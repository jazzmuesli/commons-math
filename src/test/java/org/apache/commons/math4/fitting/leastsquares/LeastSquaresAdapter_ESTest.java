/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:31:33 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.optim.ConvergenceChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastSquaresAdapter_ESTest extends LeastSquaresAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem0).getStart();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      RealVector realVector0 = leastSquaresAdapter0.getStart();
      assertNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(leastSquaresProblem0).getParameterSize();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      int int0 = leastSquaresAdapter0.getParameterSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(197).when(leastSquaresProblem0).getParameterSize();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      int int0 = leastSquaresAdapter0.getParameterSize();
      assertEquals(197, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn((-1077)).when(leastSquaresProblem0).getParameterSize();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      int int0 = leastSquaresAdapter0.getParameterSize();
      assertEquals((-1077), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(leastSquaresProblem0).getObservationSize();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      int int0 = leastSquaresAdapter0.getObservationSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(16, (-1077)).when(leastSquaresProblem0).getObservationSize();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      int int0 = leastSquaresAdapter0.getObservationSize();
      int int1 = leastSquaresAdapter0.getObservationSize();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(leastSquaresProblem0).getConvergenceChecker();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker0 = leastSquaresAdapter0.getConvergenceChecker();
      assertNull(convergenceChecker0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker0 = (ConvergenceChecker<LeastSquaresProblem.Evaluation>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(convergenceChecker0).toString();
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(leastSquaresProblem0).getConvergenceChecker();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker1 = leastSquaresAdapter0.getConvergenceChecker();
      assertSame(convergenceChecker1, convergenceChecker0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(leastSquaresProblem_Evaluation0).toString();
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realVector0).toString();
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn(leastSquaresProblem_Evaluation0).when(leastSquaresProblem0).evaluate(any(org.apache.commons.math4.linear.RealVector.class));
      doReturn(realVector0).when(leastSquaresProblem0).getStart();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      RealVector realVector1 = leastSquaresAdapter0.getStart();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = leastSquaresAdapter0.evaluate(realVector1);
      assertSame(leastSquaresProblem_Evaluation1, leastSquaresProblem_Evaluation0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter((LeastSquaresProblem) null);
      // Undeclared exception!
      try { 
        leastSquaresAdapter0.getObservationSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter((LeastSquaresProblem) null);
      // Undeclared exception!
      try { 
        leastSquaresAdapter0.evaluate((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realVector0).toString();
      LeastSquaresProblem leastSquaresProblem0 = mock(LeastSquaresProblem.class, new ViolatedAssumptionAnswer());
      doReturn((LeastSquaresProblem.Evaluation) null).when(leastSquaresProblem0).evaluate(any(org.apache.commons.math4.linear.RealVector.class));
      doReturn(realVector0).when(leastSquaresProblem0).getStart();
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter(leastSquaresProblem0);
      RealVector realVector1 = leastSquaresAdapter0.getStart();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = leastSquaresAdapter0.evaluate(realVector1);
      assertNull(leastSquaresProblem_Evaluation0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter((LeastSquaresProblem) null);
      // Undeclared exception!
      try { 
        leastSquaresAdapter0.getConvergenceChecker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter((LeastSquaresProblem) null);
      // Undeclared exception!
      try { 
        leastSquaresAdapter0.getParameterSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeastSquaresAdapter leastSquaresAdapter0 = new LeastSquaresAdapter((LeastSquaresProblem) null);
      // Undeclared exception!
      try { 
        leastSquaresAdapter0.getStart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresAdapter", e);
      }
  }
}

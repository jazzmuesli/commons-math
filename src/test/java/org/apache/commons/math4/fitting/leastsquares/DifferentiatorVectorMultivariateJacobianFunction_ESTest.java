/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:43:54 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MultivariateVectorFunction;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.differentiation.UnivariateDifferentiableVectorFunction;
import org.apache.commons.math4.analysis.differentiation.UnivariateVectorFunctionDifferentiator;
import org.apache.commons.math4.fitting.leastsquares.DifferentiatorVectorMultivariateJacobianFunction;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DifferentiatorVectorMultivariateJacobianFunction_ESTest extends DifferentiatorVectorMultivariateJacobianFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      UnivariateVectorFunctionDifferentiator univariateVectorFunctionDifferentiator0 = mock(UnivariateVectorFunctionDifferentiator.class, new ViolatedAssumptionAnswer());
      DifferentiatorVectorMultivariateJacobianFunction differentiatorVectorMultivariateJacobianFunction0 = new DifferentiatorVectorMultivariateJacobianFunction(multivariateVectorFunction0, univariateVectorFunctionDifferentiator0);
      assertNotNull(differentiatorVectorMultivariateJacobianFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector0).getDimension();
      doReturn(doubleArray0).when(realVector0).toArray();
      // Undeclared exception!
      try { 
        differentiatorVectorMultivariateJacobianFunction0.value(realVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[9];
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn((-690.424875443), (-690.424875443), (-690.424875443), (-690.424875443), 0.0).when(derivativeStructure0).getPartialDerivative(any(int[].class));
      derivativeStructureArray0[0] = derivativeStructure0;
      derivativeStructureArray0[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructure0;
      derivativeStructureArray0[3] = derivativeStructure0;
      derivativeStructureArray0[4] = derivativeStructure0;
      derivativeStructureArray0[5] = derivativeStructure0;
      derivativeStructureArray0[6] = derivativeStructure0;
      derivativeStructureArray0[7] = derivativeStructure0;
      derivativeStructureArray0[8] = derivativeStructure0;
      UnivariateDifferentiableVectorFunction univariateDifferentiableVectorFunction0 = mock(UnivariateDifferentiableVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(derivativeStructureArray0).when(univariateDifferentiableVectorFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      UnivariateVectorFunctionDifferentiator univariateVectorFunctionDifferentiator0 = mock(UnivariateVectorFunctionDifferentiator.class, new ViolatedAssumptionAnswer());
      doReturn(univariateDifferentiableVectorFunction0).when(univariateVectorFunctionDifferentiator0).differentiate(any(org.apache.commons.math4.analysis.UnivariateVectorFunction.class));
      DifferentiatorVectorMultivariateJacobianFunction differentiatorVectorMultivariateJacobianFunction0 = new DifferentiatorVectorMultivariateJacobianFunction(multivariateVectorFunction0, univariateVectorFunctionDifferentiator0);
      assertNotNull(differentiatorVectorMultivariateJacobianFunction0);
      assertEquals(13, doubleArray0.length);
      assertEquals(9, derivativeStructureArray0.length);
      
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(34, 34).when(realVector0).getDimension();
      doReturn((-690.424875443)).when(realVector0).getEntry(anyInt());
      doReturn(doubleArray0).when(realVector0).toArray();
      // Undeclared exception!
      try { 
        differentiatorVectorMultivariateJacobianFunction0.value(realVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 9x1 but expected 13x1
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      UnivariateVectorFunctionDifferentiator univariateVectorFunctionDifferentiator0 = mock(UnivariateVectorFunctionDifferentiator.class, new ViolatedAssumptionAnswer());
      DifferentiatorVectorMultivariateJacobianFunction differentiatorVectorMultivariateJacobianFunction0 = new DifferentiatorVectorMultivariateJacobianFunction(multivariateVectorFunction0, univariateVectorFunctionDifferentiator0);
      assertNotNull(differentiatorVectorMultivariateJacobianFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(1481, 0).when(realVector0).getDimension();
      doReturn(doubleArray0).when(realVector0).toArray();
      Pair<RealVector, RealMatrix> pair0 = differentiatorVectorMultivariateJacobianFunction0.value(realVector0);
      assertNotNull(pair0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      UnivariateVectorFunctionDifferentiator univariateVectorFunctionDifferentiator0 = mock(UnivariateVectorFunctionDifferentiator.class, new ViolatedAssumptionAnswer());
      DifferentiatorVectorMultivariateJacobianFunction differentiatorVectorMultivariateJacobianFunction0 = new DifferentiatorVectorMultivariateJacobianFunction(multivariateVectorFunction0, univariateVectorFunctionDifferentiator0);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(1481, (-652)).when(realVector0).getDimension();
      doReturn(doubleArray0).when(realVector0).toArray();
      Pair<RealVector, RealMatrix> pair0 = differentiatorVectorMultivariateJacobianFunction0.value(realVector0);
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      UnivariateVectorFunctionDifferentiator univariateVectorFunctionDifferentiator0 = mock(UnivariateVectorFunctionDifferentiator.class, new ViolatedAssumptionAnswer());
      DifferentiatorVectorMultivariateJacobianFunction differentiatorVectorMultivariateJacobianFunction0 = new DifferentiatorVectorMultivariateJacobianFunction(multivariateVectorFunction0, univariateVectorFunctionDifferentiator0);
      RealVector realVector0 = null;
      // Undeclared exception!
      try { 
        differentiatorVectorMultivariateJacobianFunction0.value(realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DifferentiatorVectorMultivariateJacobianFunction", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:51:42 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MultivariateMatrixFunction;
import org.apache.commons.math4.analysis.MultivariateVectorFunction;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math4.fitting.leastsquares.MultivariateJacobianFunction;
import org.apache.commons.math4.fitting.leastsquares.ParameterValidator;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.optim.ConvergenceChecker;
import org.apache.commons.math4.optim.PointVectorValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastSquaresBuilder_ESTest extends LeastSquaresBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(154, 154, 0).when(realMatrix0).getColumnDimension();
      doReturn(154, 154, (-590)).when(realMatrix0).getRowDimension();
      doReturn(true, false).when(realMatrix0).isSquare();
      doReturn(3974.9629, 249.25106).when(realMatrix0).getEntry(anyInt() , anyInt());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.weight(realMatrix0);
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.model(multivariateJacobianFunction0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 154;
      doubleArray0[1] = 249.25106;
      doubleArray0[2] = (double) 154;
      doubleArray0[3] = (double) (-590);
      doubleArray0[4] = (-1.0);
      leastSquaresBuilder0.start(doubleArray0);
      leastSquaresBuilder2.maxIterations(4);
      // Undeclared exception!
      try { 
        leastSquaresBuilder2.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (-590x154) matrix
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(154, 154).when(realMatrix0).getColumnDimension();
      doReturn(154, 154).when(realMatrix0).getRowDimension();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realMatrix0).getEntry(anyInt() , anyInt());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.weight(realMatrix0);
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.model(multivariateJacobianFunction0);
      leastSquaresBuilder2.maxIterations(4);
      // Undeclared exception!
      leastSquaresBuilder2.build();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.model(multivariateJacobianFunction0);
      leastSquaresBuilder1.lazyEvaluation(false);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder0.lazyEvaluation(true);
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder2.checkerPair(convergenceChecker0);
      MultivariateJacobianFunction multivariateJacobianFunction1 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder0.model(multivariateJacobianFunction1);
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker1 = (ConvergenceChecker<LeastSquaresProblem.Evaluation>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder3.checker(convergenceChecker1);
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder1.weight(realMatrix0);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder0.start(realVector0);
      // Undeclared exception!
      try { 
        leastSquaresBuilder2.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // required functionality is missing in org.apache.commons.math4.fitting.leastsquares.MultivariateJacobianFunction$MockitoMock$971693065
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        leastSquaresBuilder0.target((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      leastSquaresBuilder0.build();
      int int0 = 0;
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.maxIterations(0);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.target(realVector0);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.maxIterations(0);
      leastSquaresBuilder3.lazyEvaluation(true);
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker0 = (ConvergenceChecker<LeastSquaresProblem.Evaluation>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder0.checker(convergenceChecker0);
      // Undeclared exception!
      try { 
        leastSquaresBuilder0.start((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(realMatrix0).getColumnDimension();
      doReturn(0, 0, 0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.weight(realMatrix0);
      ParameterValidator parameterValidator0 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.parameterValidator(parameterValidator0);
      leastSquaresBuilder1.lazyEvaluation(false);
      ParameterValidator parameterValidator1 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.parameterValidator(parameterValidator1);
      // Undeclared exception!
      try { 
        leastSquaresBuilder3.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.start(realVector0);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.maxIterations(541);
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.start(realVector1);
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder3.model(multivariateJacobianFunction0);
      MultivariateJacobianFunction multivariateJacobianFunction1 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.model(multivariateJacobianFunction1);
      assertSame(leastSquaresBuilder0, leastSquaresBuilder4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.maxEvaluations(2912);
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.model(multivariateVectorFunction0, multivariateMatrixFunction0);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.target(realVector0);
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.maxEvaluations(1975);
      assertSame(leastSquaresBuilder4, leastSquaresBuilder3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.lazyEvaluation(false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2402.6;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-4155.1);
      doubleArray0[3] = -0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = -0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = -0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 2402.6;
      doubleArray1[6] = -0.0;
      doubleArray1[7] = (-4155.1);
      leastSquaresBuilder0.target(doubleArray1);
      doubleArray0[4] = (-1169.061);
      doubleArray0[5] = 2755.6055;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2245.2846683248;
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.start(doubleArray0);
      leastSquaresBuilder2.build();
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.parameterValidator((ParameterValidator) null);
      assertSame(leastSquaresBuilder1, leastSquaresBuilder3);
      assertSame(leastSquaresBuilder0, leastSquaresBuilder3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.model(multivariateVectorFunction0, multivariateMatrixFunction0);
      assertSame(leastSquaresBuilder0, leastSquaresBuilder1);
      assertSame(leastSquaresBuilder1, leastSquaresBuilder0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      leastSquaresBuilder0.build();
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.model(multivariateJacobianFunction0);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder0.maxEvaluations(11);
      assertSame(leastSquaresBuilder2, leastSquaresBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.maxEvaluations((-1275));
      ParameterValidator parameterValidator0 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.parameterValidator(parameterValidator0);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.maxIterations((-1275));
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker0 = (ConvergenceChecker<LeastSquaresProblem.Evaluation>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.checker(convergenceChecker0);
      assertSame(leastSquaresBuilder4, leastSquaresBuilder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker0 = (ConvergenceChecker<LeastSquaresProblem.Evaluation>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.checker(convergenceChecker0);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.lazyEvaluation(true);
      ParameterValidator parameterValidator0 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder2.parameterValidator(parameterValidator0);
      ParameterValidator parameterValidator1 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder1.parameterValidator(parameterValidator1);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.maxEvaluations(1);
      // Undeclared exception!
      try { 
        leastSquaresBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.maxEvaluations((-2256));
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.model(multivariateJacobianFunction0);
      assertSame(leastSquaresBuilder2, leastSquaresBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.checker((ConvergenceChecker<LeastSquaresProblem.Evaluation>) null);
      assertSame(leastSquaresBuilder0, leastSquaresBuilder1);
      
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.start((RealVector) null);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.maxEvaluations((-1));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.start(doubleArray0);
      LeastSquaresBuilder leastSquaresBuilder5 = leastSquaresBuilder4.weight((RealMatrix) null);
      LeastSquaresBuilder leastSquaresBuilder6 = leastSquaresBuilder5.start(doubleArray0);
      assertSame(leastSquaresBuilder6, leastSquaresBuilder3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.maxIterations(49);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 49;
      doubleArray0[1] = (double) 49;
      doubleArray0[2] = (double) 49;
      doubleArray0[3] = (double) 49;
      doubleArray0[4] = (double) 49;
      doubleArray0[5] = (double) 49;
      doubleArray0[6] = (double) 49;
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.target(doubleArray0);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder2.maxEvaluations(49);
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.checker((ConvergenceChecker<LeastSquaresProblem.Evaluation>) null);
      LeastSquaresBuilder leastSquaresBuilder5 = leastSquaresBuilder4.weight((RealMatrix) null);
      LeastSquaresBuilder leastSquaresBuilder6 = leastSquaresBuilder5.target(doubleArray0);
      assertSame(leastSquaresBuilder4, leastSquaresBuilder6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.checkerPair(convergenceChecker0);
      assertSame(leastSquaresBuilder0, leastSquaresBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.target((RealVector) null);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.lazyEvaluation(true);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder1.maxIterations((-1567));
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.lazyEvaluation(false);
      LeastSquaresBuilder leastSquaresBuilder5 = leastSquaresBuilder4.target((RealVector) null);
      assertSame(leastSquaresBuilder5, leastSquaresBuilder2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1176.3415517092544);
      doubleArray0[1] = 0.0;
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.start(doubleArray0);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder1.maxEvaluations(3);
      assertSame(leastSquaresBuilder2, leastSquaresBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LeastSquaresBuilder leastSquaresBuilder0 = new LeastSquaresBuilder();
      leastSquaresBuilder0.maxIterations(2835);
      double[] doubleArray0 = new double[4];
      LeastSquaresBuilder leastSquaresBuilder1 = leastSquaresBuilder0.start(doubleArray0);
      LeastSquaresBuilder leastSquaresBuilder2 = leastSquaresBuilder0.target(doubleArray0);
      LeastSquaresBuilder leastSquaresBuilder3 = leastSquaresBuilder1.target((RealVector) null);
      ConvergenceChecker<PointVectorValuePair> convergenceChecker0 = (ConvergenceChecker<PointVectorValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder4 = leastSquaresBuilder3.checkerPair(convergenceChecker0);
      LeastSquaresBuilder leastSquaresBuilder5 = leastSquaresBuilder4.maxEvaluations(2835);
      MultivariateJacobianFunction multivariateJacobianFunction0 = mock(MultivariateJacobianFunction.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder2.model(multivariateJacobianFunction0);
      leastSquaresBuilder1.weight((RealMatrix) null);
      ParameterValidator parameterValidator0 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      LeastSquaresBuilder leastSquaresBuilder6 = leastSquaresBuilder2.target((RealVector) null);
      ParameterValidator parameterValidator1 = mock(ParameterValidator.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder6.parameterValidator(parameterValidator1);
      leastSquaresBuilder5.lazyEvaluation(false);
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      leastSquaresBuilder3.model(multivariateVectorFunction0, multivariateMatrixFunction0);
      LeastSquaresProblem leastSquaresProblem0 = leastSquaresBuilder0.build();
      assertEquals(4, leastSquaresProblem0.getParameterSize());
  }
}

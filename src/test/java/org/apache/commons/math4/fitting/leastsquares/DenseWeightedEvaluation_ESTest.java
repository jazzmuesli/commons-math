/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:44:38 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DenseWeightedEvaluation_ESTest extends DenseWeightedEvaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector0 = denseWeightedEvaluation0.getResiduals();
      assertNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realVector1).toString();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(617).when(realMatrix0).getColumnDimension();
      doReturn(realVector1).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector2 = denseWeightedEvaluation0.getResiduals();
      assertNotSame(realVector2, realVector0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getPoint();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector0 = denseWeightedEvaluation0.getPoint();
      assertNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realVector0).toString();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(617).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector1 = denseWeightedEvaluation0.getPoint();
      assertSame(realVector1, realVector0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getJacobian();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      DenseWeightedEvaluation denseWeightedEvaluation0 = null;
      try {
        denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, (RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(leastSquaresProblem_Evaluation0).getJacobian();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealMatrix) null).when(realMatrix0).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealMatrix realMatrix1 = denseWeightedEvaluation0.getJacobian();
      assertNull(realMatrix1);
  }
}

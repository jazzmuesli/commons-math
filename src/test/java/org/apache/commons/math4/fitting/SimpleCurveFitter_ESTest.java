/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:56:48 GMT 2019
 */

package org.apache.commons.math4.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math4.analysis.ParametricUnivariateFunction;
import org.apache.commons.math4.fitting.SimpleCurveFitter;
import org.apache.commons.math4.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCurveFitter_ESTest extends SimpleCurveFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParametricUnivariateFunction parametricUnivariateFunction0 = mock(ParametricUnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      SimpleCurveFitter simpleCurveFitter0 = SimpleCurveFitter.create(parametricUnivariateFunction0, doubleArray0);
      // Undeclared exception!
      try { 
        simpleCurveFitter0.withStartPoint((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.SimpleCurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParametricUnivariateFunction parametricUnivariateFunction0 = mock(ParametricUnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      SimpleCurveFitter simpleCurveFitter0 = SimpleCurveFitter.create(parametricUnivariateFunction0, doubleArray0);
      // Undeclared exception!
      try { 
        simpleCurveFitter0.getProblem((Collection<WeightedObservedPoint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.SimpleCurveFitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParametricUnivariateFunction parametricUnivariateFunction0 = mock(ParametricUnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      SimpleCurveFitter simpleCurveFitter0 = SimpleCurveFitter.create(parametricUnivariateFunction0, doubleArray0);
      SimpleCurveFitter simpleCurveFitter1 = simpleCurveFitter0.withMaxIterations(0);
      assertFalse(simpleCurveFitter1.equals((Object)simpleCurveFitter0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParametricUnivariateFunction parametricUnivariateFunction0 = mock(ParametricUnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      SimpleCurveFitter simpleCurveFitter0 = SimpleCurveFitter.create(parametricUnivariateFunction0, doubleArray0);
      SimpleCurveFitter simpleCurveFitter1 = simpleCurveFitter0.withStartPoint(doubleArray0);
      assertFalse(simpleCurveFitter1.equals((Object)simpleCurveFitter0));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:12:50 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.fitting.leastsquares.EvaluationRmsChecker;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvaluationRmsChecker_ESTest extends EvaluationRmsChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvaluationRmsChecker evaluationRmsChecker0 = new EvaluationRmsChecker(1.0);
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(846.2006).when(leastSquaresProblem_Evaluation0).getRMS();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((-2900.8934)).when(leastSquaresProblem_Evaluation1).getRMS();
      boolean boolean0 = evaluationRmsChecker0.converged(1141, leastSquaresProblem_Evaluation0, leastSquaresProblem_Evaluation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvaluationRmsChecker evaluationRmsChecker0 = new EvaluationRmsChecker(1.0);
      // Undeclared exception!
      try { 
        evaluationRmsChecker0.converged(1473, (LeastSquaresProblem.Evaluation) null, (LeastSquaresProblem.Evaluation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.EvaluationRmsChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvaluationRmsChecker evaluationRmsChecker0 = new EvaluationRmsChecker(1.0);
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(1714.290230187653, 0.0).when(leastSquaresProblem_Evaluation0).getRMS();
      boolean boolean0 = evaluationRmsChecker0.converged(1473, leastSquaresProblem_Evaluation0, leastSquaresProblem_Evaluation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvaluationRmsChecker evaluationRmsChecker0 = new EvaluationRmsChecker(0.0, 0.0);
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 2028.89392256059).when(leastSquaresProblem_Evaluation0).getRMS();
      boolean boolean0 = evaluationRmsChecker0.converged(1727, leastSquaresProblem_Evaluation0, leastSquaresProblem_Evaluation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EvaluationRmsChecker evaluationRmsChecker0 = new EvaluationRmsChecker((-1736.8492307908023));
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(leastSquaresProblem_Evaluation0).getRMS();
      boolean boolean0 = evaluationRmsChecker0.converged(1684, leastSquaresProblem_Evaluation0, leastSquaresProblem_Evaluation0);
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:11:52 GMT 2019
 */

package org.apache.commons.math4.fitting.leastsquares;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation;
import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractEvaluation_ESTest extends AbstractEvaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector0).getDimension();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0, (RealVector) null, (RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(1236, 0, 0).when(realVector1).getDimension();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVector1).getEntry(anyInt());
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1, (RealVector) null, (RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector2 = denseWeightedEvaluation0.getPoint();
      denseWeightedEvaluation0.getRMS();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix1).when(leastSquaresProblem_Evaluation1).getJacobian();
      doReturn(realVector2).when(leastSquaresProblem_Evaluation1).getPoint();
      doReturn(realVector2, realVector2, (RealVector) null).when(leastSquaresProblem_Evaluation1).getResiduals();
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(realMatrix2).transpose();
      RealVector realVector3 = denseWeightedEvaluation0.getResiduals();
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix3).getColumnDimension();
      doReturn(realMatrix2).when(realMatrix3).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      doReturn(realVector2, realVector3, (RealVector) null).when(realMatrix3).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation1 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation1, realMatrix3);
      denseWeightedEvaluation1.getCost();
      denseWeightedEvaluation1.getResiduals();
      denseWeightedEvaluation0.getReducedChiSquare(0);
      denseWeightedEvaluation1.getCost();
      denseWeightedEvaluation1.getPoint();
      double double0 = (-2179.9589539561935);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation1.getSigma((-2179.9589539561935));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.AbstractEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(4605, 4605).when(realVector0).getDimension();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVector0).getEntry(anyInt());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(4605).when(realVector1).getDimension();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realVector1).getEntry(anyInt());
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector2 = denseWeightedEvaluation0.getPoint();
      denseWeightedEvaluation0.getRMS();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector2, realVector2).when(leastSquaresProblem_Evaluation1).getResiduals();
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix3).getColumnDimension();
      doReturn(realVector2, realVector2).when(realMatrix3).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation1 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation1, realMatrix3);
      denseWeightedEvaluation1.getCost();
      // Undeclared exception!
      denseWeightedEvaluation1.getCost();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix0, (RealMatrix) null).when(leastSquaresProblem_Evaluation0).getJacobian();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix4 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix5 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-440)).when(realMatrix5).getColumnDimension();
      doReturn(realMatrix4, (RealMatrix) null).when(realMatrix5).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix5);
      double double0 = 0.0;
      denseWeightedEvaluation0.getJacobian();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCovariances(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.AbstractEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0, (RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector1).getDimension();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-374)).when(realMatrix0).getColumnDimension();
      doReturn(realVector1, (RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      denseWeightedEvaluation0.getCost();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getChiSquare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0, (RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(1736).when(realVector1).getDimension();
      doReturn(1.0, (-2684.71), (-1272.9473), 0.1256551444530487, 204.35087259352).when(realVector1).getEntry(anyInt());
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1, (RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      denseWeightedEvaluation0.getChiSquare();
      denseWeightedEvaluation0.getPoint();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getRMS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0, (RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(1736).when(realVector1).getDimension();
      doReturn(2047.558033858, 0.0, 0.0, 2047.558033858, 0.0).when(realVector1).getEntry(anyInt());
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1, (RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      denseWeightedEvaluation0.getPoint();
      denseWeightedEvaluation0.getRMS();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix1).when(leastSquaresProblem_Evaluation1).getJacobian();
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix4 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix4).getColumnDimension();
      doReturn(realMatrix3).when(realMatrix4).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation1 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation1, realMatrix4);
      denseWeightedEvaluation1.getJacobian();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realVector1).getDimension();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3197).when(realMatrix0).getColumnDimension();
      doReturn(realVector1).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      denseWeightedEvaluation0.getPoint();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getRMS();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix0).when(leastSquaresProblem_Evaluation0).getJacobian();
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(realMatrix1).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix1).when(realMatrix2).transpose();
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(7631).when(realMatrix3).getColumnDimension();
      doReturn(realMatrix2).when(realMatrix3).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      doReturn((RealVector) null).when(realMatrix3).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix3);
      double double0 = 0.0;
      denseWeightedEvaluation0.getResiduals();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCovariances(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-398)).when(realVector0).getDimension();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector1).getDimension();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector2 = denseWeightedEvaluation0.getPoint();
      denseWeightedEvaluation0.getRMS();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector2, realVector2).when(leastSquaresProblem_Evaluation1).getResiduals();
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix3).getColumnDimension();
      doReturn(realVector2, realVector2).when(realMatrix3).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation1 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation1, realMatrix3);
      denseWeightedEvaluation1.getCost();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation1.getCost();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getRMS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getChiSquare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getReducedChiSquare(2927);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      double double0 = (-2750.903932640983);
      int int0 = 0;
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getReducedChiSquare(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getChiSquare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(leastSquaresProblem_Evaluation0).getJacobian();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealMatrix) null).when(realMatrix0).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      double double0 = 3105.0;
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getSigma(3105.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.AbstractEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealVector) null).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getRMS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(leastSquaresProblem_Evaluation0).getJacobian();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealMatrix) null).when(realMatrix0).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCovariances(2513.711814553531);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.AbstractEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getSigma(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation((LeastSquaresProblem.Evaluation) null, realMatrix0);
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.fitting.leastsquares.DenseWeightedEvaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector0).getDimension();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getPoint();
      doReturn(realVector0).when(leastSquaresProblem_Evaluation0).getResiduals();
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector1).getDimension();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1236).when(realMatrix0).getColumnDimension();
      doReturn(realVector1).when(realMatrix0).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix0);
      RealVector realVector2 = denseWeightedEvaluation0.getPoint();
      denseWeightedEvaluation0.getRMS();
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation1 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realVector2, (RealVector) null).when(leastSquaresProblem_Evaluation1).getResiduals();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix1).getColumnDimension();
      doReturn(realVector2, (RealVector) null).when(realMatrix1).operate(any(org.apache.commons.math4.linear.RealVector.class));
      DenseWeightedEvaluation denseWeightedEvaluation1 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation1, realMatrix1);
      denseWeightedEvaluation1.getCost();
      // Undeclared exception!
      try { 
        denseWeightedEvaluation1.getCost();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresProblem.Evaluation leastSquaresProblem_Evaluation0 = mock(LeastSquaresProblem.Evaluation.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix0).when(leastSquaresProblem_Evaluation0).getJacobian();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((RealMatrix) null).when(realMatrix1).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      RealMatrix realMatrix2 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(realMatrix1).when(realMatrix2).transpose();
      RealMatrix realMatrix3 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-440)).when(realMatrix3).getColumnDimension();
      doReturn(realMatrix2).when(realMatrix3).multiply(any(org.apache.commons.math4.linear.RealMatrix.class));
      DenseWeightedEvaluation denseWeightedEvaluation0 = new DenseWeightedEvaluation(leastSquaresProblem_Evaluation0, realMatrix3);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        denseWeightedEvaluation0.getCovariances(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }
}

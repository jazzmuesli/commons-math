/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:31:01 GMT 2019
 */

package org.apache.commons.math4.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math4.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeightedObservedPoint_ESTest extends WeightedObservedPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-817.703), 0.0, 2062.91092677965);
      double double0 = weightedObservedPoint0.getY();
      assertEquals((-817.703), weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
      assertEquals(2062.91092677965, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(803.1500491, 803.1500491, (-352.46));
      double double0 = weightedObservedPoint0.getY();
      assertEquals(803.1500491, weightedObservedPoint0.getX(), 0.01);
      assertEquals(803.1500491, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals((-352.46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-817.703), 0.0, 2062.91092677965);
      double double0 = weightedObservedPoint0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2062.91092677965, weightedObservedPoint0.getY(), 0.01);
      assertEquals((-817.703), weightedObservedPoint0.getWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(803.1500491, 803.1500491, (-352.46));
      double double0 = weightedObservedPoint0.getX();
      assertEquals(803.1500491, weightedObservedPoint0.getWeight(), 0.01);
      assertEquals(803.1500491, double0, 0.01);
      assertEquals((-352.46), weightedObservedPoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-1074.49863295), (-1074.49863295));
      double double0 = weightedObservedPoint0.getWeight();
      assertEquals((-1074.49863295), weightedObservedPoint0.getX(), 0.01);
      assertEquals((-1074.49863295), weightedObservedPoint0.getY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(803.1500491, 803.1500491, (-352.46));
      double double0 = weightedObservedPoint0.getWeight();
      assertEquals(803.1500491, weightedObservedPoint0.getX(), 0.01);
      assertEquals(803.1500491, double0, 0.01);
      assertEquals((-352.46), weightedObservedPoint0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-817.703), 0.0, 2062.91092677965);
      double double0 = weightedObservedPoint0.getWeight();
      assertEquals(2062.91092677965, weightedObservedPoint0.getY(), 0.01);
      assertEquals((-817.703), double0, 0.01);
      assertEquals(0.0, weightedObservedPoint0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-2581.05), (-2581.05), 0.0);
      double double0 = weightedObservedPoint0.getY();
      assertEquals((-2581.05), weightedObservedPoint0.getWeight(), 0.01);
      assertEquals((-2581.05), weightedObservedPoint0.getX(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-2581.05), (-2581.05), 0.0);
      double double0 = weightedObservedPoint0.getX();
      assertEquals((-2581.05), double0, 0.01);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01);
      assertEquals((-2581.05), weightedObservedPoint0.getWeight(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:39:50 GMT 2019
 */

package org.apache.commons.math4.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math4.exception.MathIllegalNumberException;
import org.apache.commons.math4.exception.OutOfRangeException;
import org.apache.commons.math4.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfRangeException_ESTest extends OutOfRangeException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.COVARIANCE_MATRIX;
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(localizedFormats0, (Number) null, (Number) null, (Number) null);
      Number number0 = outOfRangeException0.getLo();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Byte byte0 = new Byte((byte)64);
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(byte0, byte0, byte0);
      Number number0 = outOfRangeException0.getLo();
      assertEquals((byte)64, number0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-24));
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(byte0, byte0, byte0);
      Number number0 = outOfRangeException0.getLo();
      assertEquals((byte) (-24), number0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS;
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(localizedFormats0, (Number) null, (Number) null, (Number) null);
      Number number0 = outOfRangeException0.getHi();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = MathIllegalNumberException.INTEGER_ZERO;
      Short short0 = new Short((short)619);
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(integer0, short0, short0);
      Number number0 = outOfRangeException0.getHi();
      assertEquals((short)619, number0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-24));
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(byte0, byte0, byte0);
      Number number0 = outOfRangeException0.getHi();
      assertEquals((byte) (-24), number0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = MathIllegalNumberException.INTEGER_ZERO;
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(integer0, integer0, integer0);
      Number number0 = outOfRangeException0.getHi();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      OutOfRangeException outOfRangeException0 = new OutOfRangeException(byte0, byte0, byte0);
      Number number0 = outOfRangeException0.getLo();
      assertEquals((byte)0, number0);
  }
}

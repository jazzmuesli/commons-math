/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:19:53 GMT 2019
 */

package org.apache.commons.math4.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math4.exception.MathIllegalNumberException;
import org.apache.commons.math4.exception.NumberIsTooLargeException;
import org.apache.commons.math4.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NumberIsTooLargeException_ESTest extends NumberIsTooLargeException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException((Number) null, (Number) null, false);
      numberIsTooLargeException0.getMax();
      assertFalse(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = MathIllegalNumberException.INTEGER_ZERO;
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(integer0, integer0, false);
      numberIsTooLargeException0.getMax();
      assertFalse(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Float float0 = new Float((-1800.5833162269626));
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(float0, float0, false);
      numberIsTooLargeException0.getMax();
      assertFalse(numberIsTooLargeException0.getBoundIsAllowed());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(byte0, byte0, true);
      boolean boolean0 = numberIsTooLargeException0.getBoundIsAllowed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.OUTLINE_BOUNDARY_LOOP_OPEN;
      Float float0 = new Float((-65.48139865626483));
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(localizedFormats0, float0, float0, false);
      boolean boolean0 = numberIsTooLargeException0.getBoundIsAllowed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Double double0 = new Double(1.5249175401013226);
      NumberIsTooLargeException numberIsTooLargeException0 = new NumberIsTooLargeException(double0, double0, true);
      numberIsTooLargeException0.getMax();
      assertTrue(numberIsTooLargeException0.getBoundIsAllowed());
  }
}

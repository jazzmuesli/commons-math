/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:50:22 GMT 2019
 */

package org.apache.commons.math4.exception.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.math4.exception.util.DummyLocalizable;
import org.apache.commons.math4.exception.util.ExceptionContext;
import org.apache.commons.math4.exception.util.Localizable;
import org.apache.commons.math4.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionContext_ESTest extends ExceptionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      exceptionContext0.setValue("", linkedList0);
      exceptionContext0.getValue("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      exceptionContext0.getThrowable();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.NON_POSITIVE_MICROSPHERE_ELEMENTS;
      Object[] objectArray0 = new Object[7];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      Locale locale0 = Locale.KOREA;
      exceptionContext0.getMessage(locale0, "");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.BOBYQA_BOUND_DIFFERENCE_CONDITION;
      Object[] objectArray0 = new Object[3];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      Locale locale0 = Locale.ITALY;
      exceptionContext0.getMessage(locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.BOBYQA_BOUND_DIFFERENCE_CONDITION;
      Object[] objectArray0 = new Object[3];
      exceptionContext0.addMessage(localizedFormats0, objectArray0);
      exceptionContext0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE;
      exceptionContext0.addMessage(localizedFormats0, (Object[]) null);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage((Locale) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("g'?CJD0");
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.replacement_getStackTrace(mockThrowable0);
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA;
      exceptionContext0.addMessage(localizedFormats0, stackTraceElementArray0);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage(locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("g'?CJD0");
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.replacement_getStackTrace(mockThrowable0);
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      exceptionContext0.addMessage((Localizable) null, stackTraceElementArray0);
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.exception.util.ExceptionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      Locale locale0 = Locale.TAIWAN;
      exceptionContext0.getMessage(locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("+S");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.replacement_getStackTrace(mockThrowable0);
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_MULTIPLICATION_COMPATIBLE_MATRICES;
      exceptionContext0.addMessage(localizedFormats0, stackTraceElementArray0);
      exceptionContext0.addMessage(localizedFormats0, stackTraceElementArray0);
      String string0 = exceptionContext0.getMessage();
      assertEquals("sun.reflect.GeneratedConstructorAccessor45.newInstance(Unknown Source)x<evosuite>.<evosuite>(<evosuite>) and <evosuite>.<evosuite>(<evosuite>)x{3} matrices are not multiplication compatible: sun.reflect.GeneratedConstructorAccessor45.newInstance(Unknown Source)x<evosuite>.<evosuite>(<evosuite>) and <evosuite>.<evosuite>(<evosuite>)x{3} matrices are not multiplication compatible", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Throwable throwable0 = exceptionContext0.getThrowable();
      assertNull(throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("g'?CJD0");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = exceptionContext0.getMessage(locale0, "g'?CJD0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      String string0 = exceptionContext0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("+S");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Set<String> set0 = exceptionContext0.getKeys();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("+S");
      ExceptionContext exceptionContext0 = new ExceptionContext(mockThrowable0);
      Object object0 = exceptionContext0.getValue("+S");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      String string0 = exceptionContext0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExceptionContext exceptionContext0 = new ExceptionContext((Throwable) null);
      DummyLocalizable dummyLocalizable0 = new DummyLocalizable((String) null);
      Object[] objectArray0 = new Object[8];
      exceptionContext0.addMessage(dummyLocalizable0, objectArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        exceptionContext0.getMessage(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

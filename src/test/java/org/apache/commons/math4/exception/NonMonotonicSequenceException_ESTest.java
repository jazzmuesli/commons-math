/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:04:02 GMT 2019
 */

package org.apache.commons.math4.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math4.exception.NonMonotonicSequenceException;
import org.apache.commons.math4.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NonMonotonicSequenceException_ESTest extends NonMonotonicSequenceException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException((Number) null, (Number) null, 878);
      nonMonotonicSequenceException0.getPrevious();
      assertTrue(nonMonotonicSequenceException0.getStrict());
      assertEquals(878, nonMonotonicSequenceException0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-56));
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(byte0, byte0, 2819);
      nonMonotonicSequenceException0.getPrevious();
      assertEquals(2819, nonMonotonicSequenceException0.getIndex());
      assertTrue(nonMonotonicSequenceException0.getStrict());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float(1.0F);
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(float0, float0, 2887);
      nonMonotonicSequenceException0.getPrevious();
      assertTrue(nonMonotonicSequenceException0.getStrict());
      assertEquals(2887, nonMonotonicSequenceException0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(double0, double0, 0);
      int int0 = nonMonotonicSequenceException0.getIndex();
      assertEquals(0, int0);
      assertTrue(nonMonotonicSequenceException0.getStrict());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-56));
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(byte0, byte0, 2819);
      int int0 = nonMonotonicSequenceException0.getIndex();
      assertEquals(2819, int0);
      assertTrue(nonMonotonicSequenceException0.getStrict());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException((Number) null, (Number) null, 0, mathArrays_OrderDirection0, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(long0, long0, 1, mathArrays_OrderDirection0, true);
      nonMonotonicSequenceException0.getPrevious();
      assertEquals(1, nonMonotonicSequenceException0.getIndex());
      assertTrue(nonMonotonicSequenceException0.getStrict());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Short short0 = new Short((short)4411);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(short0, short0, (short)4411, mathArrays_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException((Number) null, (Number) null, 2, mathArrays_OrderDirection0, false);
      boolean boolean0 = nonMonotonicSequenceException0.getStrict();
      assertEquals(2, nonMonotonicSequenceException0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float(3022.499726664025);
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(float0, float0, (-17));
      int int0 = nonMonotonicSequenceException0.getIndex();
      assertEquals((-17), int0);
      assertTrue(nonMonotonicSequenceException0.getStrict());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Float float0 = new Float(3022.499726664025);
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(float0, float0, (-17));
      nonMonotonicSequenceException0.getDirection();
      assertTrue(nonMonotonicSequenceException0.getStrict());
      assertEquals((-17), nonMonotonicSequenceException0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float(3022.499726664025);
      NonMonotonicSequenceException nonMonotonicSequenceException0 = new NonMonotonicSequenceException(float0, float0, (-17));
      boolean boolean0 = nonMonotonicSequenceException0.getStrict();
      assertTrue(boolean0);
      assertEquals((-17), nonMonotonicSequenceException0.getIndex());
  }
}

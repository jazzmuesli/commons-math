/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:05:54 GMT 2019
 */

package org.apache.commons.math4.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.filter.DefaultMeasurementModel;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultMeasurementModel_ESTest extends DefaultMeasurementModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = defaultMeasurementModel0.getMeasurementNoise();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)defaultMeasurementModel0.getMeasurementNoise();
      assertFalse(array2DRowRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel((RealMatrix) null, (RealMatrix) null);
      RealMatrix realMatrix0 = defaultMeasurementModel0.getMeasurementMatrix();
      assertNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = defaultMeasurementModel0.getMeasurementMatrix();
      assertEquals(1, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultMeasurementModel defaultMeasurementModel0 = null;
      try {
        defaultMeasurementModel0 = new DefaultMeasurementModel((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      DefaultMeasurementModel defaultMeasurementModel0 = null;
      try {
        defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      DefaultMeasurementModel defaultMeasurementModel0 = null;
      try {
        defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel((RealMatrix) null, (RealMatrix) null);
      RealMatrix realMatrix0 = defaultMeasurementModel0.getMeasurementNoise();
      assertNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultMeasurementModel defaultMeasurementModel0 = new DefaultMeasurementModel(doubleArray0, doubleArray0);
      RealMatrix realMatrix0 = defaultMeasurementModel0.getMeasurementMatrix();
      assertFalse(realMatrix0.isSquare());
  }
}

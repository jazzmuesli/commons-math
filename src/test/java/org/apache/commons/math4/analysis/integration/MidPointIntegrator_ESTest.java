/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:21:17 GMT 2019
 */

package org.apache.commons.math4.analysis.integration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator;
import org.apache.commons.math4.analysis.integration.MidPointIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MidPointIntegrator_ESTest extends MidPointIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = new MidPointIntegrator();
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(64, MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertNotNull(midPointIntegrator0);
      assertEquals(1.0E-15, midPointIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3, midPointIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, midPointIntegrator0.getRelativeAccuracy(), 0.01);
      
      try { 
        midPointIntegrator0.doIntegrate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = null;
      try {
        midPointIntegrator0 = new MidPointIntegrator((-1272), (-1272));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,272 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = null;
      try {
        midPointIntegrator0 = new MidPointIntegrator(309.054612027035, 309.054612027035, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = new MidPointIntegrator();
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(64, MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT);
      assertNotNull(midPointIntegrator0);
      assertEquals(1.0E-15, midPointIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-6, midPointIntegrator0.getRelativeAccuracy(), 0.01);
      assertEquals(3, midPointIntegrator0.getMinimalIterationCount());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1880.0268312741352, 227.86368339317, (double)0, 20.0, 0.3404580073582569).when(univariateFunction0).value(anyDouble());
      try { 
        midPointIntegrator0.integrate(1633, univariateFunction0, (-341.88647187487), 1633);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1,633) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = null;
      try {
        midPointIntegrator0 = new MidPointIntegrator(427, 2239);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2,239 is larger than, or equal to, the maximum (64)
         //
         verifyException("org.apache.commons.math4.analysis.integration.MidPointIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = new MidPointIntegrator(22, 38);
      assertEquals(64, MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertNotNull(midPointIntegrator0);
      assertEquals(22, midPointIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, midPointIntegrator0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, midPointIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = null;
      try {
        midPointIntegrator0 = new MidPointIntegrator(4141641.518322202, 4141641.518322202, 3, 283);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 283 is larger than, or equal to, the maximum (64)
         //
         verifyException("org.apache.commons.math4.analysis.integration.MidPointIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MidPointIntegrator midPointIntegrator0 = new MidPointIntegrator();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      midPointIntegrator0.setup(403, univariateFunction0, (-3766.2795563193827), 0.0);
      double double0 = midPointIntegrator0.doIntegrate();
      assertEquals(0.0, double0, 0.01);
  }
}

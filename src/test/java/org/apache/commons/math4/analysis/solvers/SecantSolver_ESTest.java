/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:47:45 GMT 2019
 */

package org.apache.commons.math4.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SecantSolver_ESTest extends SecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(secantSolver0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4530.102494015876, (-3157.488583), 0.0, (-3157.488583), Double.NEGATIVE_INFINITY).when(univariateFunction0).value(anyDouble());
      // Undeclared exception!
      try { 
        secantSolver0.solve(5, univariateFunction0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-190.508), 0.0);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals((-190.508), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertNotNull(secantSolver0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      secantSolver0.setup(4, univariateFunction0, 0.0, 916.33, (-1481.9163116));
      assertEquals((-1481.9163116), secantSolver0.getStartValue(), 0.01);
      assertEquals((-190.508), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(916.33, secantSolver0.getMax(), 0.01);
      
      double double0 = secantSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1481.9163116), secantSolver0.getStartValue(), 0.01);
      assertEquals((-190.508), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(916.33, secantSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-1691.5), (-1691.5));
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1691.5), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1691.5), secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertNotNull(secantSolver0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double double0 = secantSolver0.solve(5, univariateFunction0, (double) 5, (-1691.5), (double) 5);
      assertEquals(5.0, double0, 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(5.0, secantSolver0.getMin(), 0.01);
      assertEquals(5.0, secantSolver0.getStartValue(), 0.01);
      assertEquals((-1691.5), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1691.5), secantSolver0.getMax(), 0.01);
      assertEquals((-1691.5), secantSolver0.getAbsoluteAccuracy(), 0.01);
      
      double double1 = secantSolver0.doSolve();
      assertEquals(5.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(5.0, secantSolver0.getMin(), 0.01);
      assertEquals(5.0, secantSolver0.getStartValue(), 0.01);
      assertEquals((-1691.5), secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1691.5), secantSolver0.getMax(), 0.01);
      assertEquals((-1691.5), secantSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-1691.5), (-1691.5));
      assertEquals((-1691.5), secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1691.5), secantSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(secantSolver0);
      
      try { 
        secantSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(secantSolver0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3157.488583), 0.0, 0.0, (-3157.488583), 1.0E-6).when(univariateFunction0).value(anyDouble());
      double double0 = secantSolver0.solve(51, univariateFunction0, (double) 51, (double) 51);
      assertEquals(51.0, double0, 0.01);
      assertEquals(51.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(51.0, secantSolver0.getMax(), 0.01);
      assertEquals(51.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      
      boolean boolean0 = secantSolver0.isBracketing(1.0, 1.0);
      assertTrue(boolean0);
      assertEquals(51.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(51.0, secantSolver0.getMax(), 0.01);
      assertEquals(51.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        secantSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [51, 51]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.0, 0.0);
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertNotNull(secantSolver0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (double)1372, (double)1372, (double)1372).when(univariateFunction0).value(anyDouble());
      secantSolver0.setup(1372, univariateFunction0, (-909.90968655728), 1372, 1372);
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1372.0, secantSolver0.getStartValue(), 0.01);
      assertEquals((-909.90968655728), secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1372.0, secantSolver0.getMax(), 0.01);
      
      secantSolver0.verifyBracketing(1.0E-6, 1372);
      assertEquals(0.0, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1372.0, secantSolver0.getStartValue(), 0.01);
      assertEquals((-909.90968655728), secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1372.0, secantSolver0.getMax(), 0.01);
      
      try { 
        secantSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-909.91, 1,372], values: [1,372, 1,372]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4530.102494015876, (-3157.488583), 0.0, (-3157.488583), 51.0).when(univariateFunction0).value(anyDouble());
      // Undeclared exception!
      try { 
        secantSolver0.solve(5, univariateFunction0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.0, 0.0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(351.47281943762, (-771.4290687330596), (-771.4290687330596), 351.47281943762, 0.0).when(univariateFunction0).value(anyDouble());
      secantSolver0.setup(1372, univariateFunction0, (-909.90968655728), 1372, 1372);
      double double0 = secantSolver0.doSolve();
      assertEquals((-195.66275217649513), double0, 0.01);
      
      double double1 = secantSolver0.doSolve();
      assertEquals((-909.90968655728), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(356.4);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, 0.0).when(univariateFunction0).value(anyDouble());
      double double0 = secantSolver0.solve(5, univariateFunction0, (double) 5, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }
}

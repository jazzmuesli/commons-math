/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:26:21 GMT 2019
 */

package org.apache.commons.math4.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.function.HarmonicOscillator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HarmonicOscillator_ESTest extends HarmonicOscillator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[4];
      try { 
        harmonicOscillator_Parametric0.value(0.0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math4.analysis.function.HarmonicOscillator$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-597.719441534);
      doubleArray0[1] = (-0.1666666567325592);
      double[] doubleArray1 = harmonicOscillator_Parametric0.gradient((-0.1666666567325592), doubleArray0);
      assertArrayEquals(new double[] {0.9996142224294543, (-2.766863289068894), 16.601180723920844}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-755.396863);
      double[] doubleArray1 = harmonicOscillator_Parametric0.gradient((-0.1666666567325592), doubleArray0);
      assertArrayEquals(new double[] {0.15553615290606707, -0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-2287.8501857);
      double double0 = harmonicOscillator_Parametric0.value((-2287.8501857), doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2287.8501857);
      double double0 = harmonicOscillator_Parametric0.value((-2287.8501857), doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.0, 0.0, 0.0);
      double double0 = harmonicOscillator0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-4575.2), 0.0, 0.49999999999999994);
      // Undeclared exception!
      try { 
        harmonicOscillator0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.function.HarmonicOscillator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HarmonicOscillator.Parametric harmonicOscillator_Parametric0 = new HarmonicOscillator.Parametric();
      double[] doubleArray0 = new double[1];
      try { 
        harmonicOscillator_Parametric0.gradient(0.0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math4.analysis.function.HarmonicOscillator$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-4575.2), 0.0, 0.49999999999999994);
      double double0 = harmonicOscillator0.value(1833.0);
      assertEquals((-4015.1157371608333), double0, 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:49:37 GMT 2019
 */

package org.apache.commons.math4.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.UnivariateMatrixFunction;
import org.apache.commons.math4.analysis.UnivariateVectorFunction;
import org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FiniteDifferencesDifferentiator_ESTest extends FiniteDifferencesDifferentiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1379, (-693.480161));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -693.48 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(751, 478.0143928023, Double.NEGATIVE_INFINITY, 1800.7940264527435);
      assertEquals(478.0143928023, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertEquals(751, finiteDifferencesDifferentiator0.getNbPoints());
      assertNotNull(finiteDifferencesDifferentiator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1898, 1898, 0.0, (-335.35821327282764));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3,600,506 is larger than, or equal to, the maximum (-335.358)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(0, 0.0, 0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(2145764285, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u221E is larger than, or equal to, the maximum (\u221E)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1164, 0.0, (-1638.60089450558), (-293.478233));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = null;
      try {
        finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator((-1368), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1)
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.FiniteDifferencesDifferentiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1111, 1111);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertNotNull(finiteDifferencesDifferentiator0);
      
      int int0 = finiteDifferencesDifferentiator0.getNbPoints();
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertEquals(1111, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1111, 1111);
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertNotNull(finiteDifferencesDifferentiator0);
      
      double double0 = finiteDifferencesDifferentiator0.getStepSize();
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertEquals(1111.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1111, 1111);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      finiteDifferencesDifferentiator0.differentiate(univariateFunction0);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1111, 1111);
      UnivariateVectorFunction univariateVectorFunction0 = mock(UnivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      finiteDifferencesDifferentiator0.differentiate(univariateVectorFunction0);
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FiniteDifferencesDifferentiator finiteDifferencesDifferentiator0 = new FiniteDifferencesDifferentiator(1111, 1111);
      UnivariateMatrixFunction univariateMatrixFunction0 = mock(UnivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      finiteDifferencesDifferentiator0.differentiate(univariateMatrixFunction0);
      assertEquals(1111, finiteDifferencesDifferentiator0.getNbPoints());
      assertEquals(1111.0, finiteDifferencesDifferentiator0.getStepSize(), 0.01);
  }
}

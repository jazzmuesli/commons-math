/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:19:37 GMT 2019
 */

package org.apache.commons.math4.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MonitoredFunction;
import org.apache.commons.math4.analysis.QuinticFunction;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.XMinus5Function;
import org.apache.commons.math4.analysis.differentiation.UnivariateDifferentiableFunction;
import org.apache.commons.math4.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math4.analysis.solvers.BisectionSolver;
import org.apache.commons.math4.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math4.analysis.solvers.LaguerreSolver;
import org.apache.commons.math4.analysis.solvers.MullerSolver;
import org.apache.commons.math4.analysis.solvers.MullerSolver2;
import org.apache.commons.math4.analysis.solvers.NewtonRaphsonSolver;
import org.apache.commons.math4.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateSolver_ESTest extends BaseAbstractUnivariateSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-454.9443937808));
      // Undeclared exception!
      try { 
        secantSolver0.isBracketing((-454.9443937808), 638.9057584239791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      bracketingNthOrderBrentSolver0.verifySequence((-1543.646179), 938.0977, 2795.7728);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      double[] doubleArray0 = new double[5];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      bisectionSolver0.setup(5126, polynomialFunction0, 0.0, 3414.5397130014, 0.0);
      bisectionSolver0.incrementEvaluationCount();
      assertEquals(3414.5397130014, bisectionSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(779.039, 779.039, 0.0);
      boolean boolean0 = laguerreSolver0.isSequence((-3492.59979), 138.0, 779.039);
      assertEquals(779.039, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(779.039, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewtonRaphsonSolver newtonRaphsonSolver0 = new NewtonRaphsonSolver();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonRaphsonSolver0.solve(66, (UnivariateDifferentiableFunction) quinticFunction0, 1965.0, (-1917.345709));
      newtonRaphsonSolver0.isBracketing((-1.0), (-1.0));
      assertEquals(Double.NaN, newtonRaphsonSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-994.51);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.setup(270, polynomialFunction0, (-2257.290484029027), (-994.51), 0.0);
      laguerreSolver0.isBracketing((-994.51), (-994.51));
      assertEquals((-2257.290484029027), laguerreSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0);
      double[] doubleArray0 = new double[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.setup(2305, polynomialFunction0, 358.437733768, 2305, 1.0E-15);
      laguerreSolver0.computeObjectiveValue(4.0);
      assertEquals(1.0E-15, laguerreSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-454.9443937808));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-454.9443937808);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      MonitoredFunction monitoredFunction0 = new MonitoredFunction(polynomialFunction0);
      secantSolver0.setup(28, monitoredFunction0, 0.0, 0.0, 0.0);
      secantSolver0.computeObjectiveValue(638.9057584239791);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals((-454.9443937808), secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(57.0, 57.0);
      try { 
        laguerreSolver0.verifySequence(1.0E-15, 0.5, 1.0E-15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0.5, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(1.0, (-1860.08));
      try { 
        secantSolver0.verifyInterval(0.0625, (-1860.08));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0.062, -1,860.08]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-2265.03));
      double[] doubleArray0 = new double[4];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      bisectionSolver0.setup((-1678), polynomialFunction0, 1.0E-14, (-1678.0), (-1678.0));
      // Undeclared exception!
      try { 
        bisectionSolver0.verifyBracketing(0.0, (-1771.981736475997));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0, -1,771.982]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1990.949;
      laguerreSolver0.solveComplex(doubleArray0, (-3609.0107717));
      try { 
        laguerreSolver0.verifyBracketing((-1910.8913809647122), 1259.639);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1,910.891, 1,259.639], values: [7,269,961,960.062, 3,159,019,685.738]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.0);
      try { 
        bisectionSolver0.setup((-70), (UnivariateFunction) null, 0.0, (-70), (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(1.0);
      try { 
        mullerSolver0.incrementEvaluationCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2063.332, 2063.332);
      try { 
        mullerSolver2_0.computeObjectiveValue(2716.3399847014725);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      double double0 = secantSolver0.solve(178, (UnivariateFunction) xMinus5Function0, 0.0, 314.9589028701, 483.7583891488);
      assertEquals(314.9589028701, secantSolver0.getMax(), 0.01);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.solve((-1), (UnivariateFunction) null, (-256.577867153), (double) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-3797.73557));
      double[] doubleArray0 = new double[4];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double double0 = secantSolver0.solve(148, (UnivariateFunction) polynomialFunction0, (-3797.73557));
      assertEquals(Double.NaN, secantSolver0.getMin(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(1.0, (-1860.08));
      secantSolver0.isSequence(0.0, 0.0625, 0.0625);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1860.08), secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.getMaxEvaluations();
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      try { 
        laguerreSolver0.verifyBracketing((-1910.8913809647122), 1259.639);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(8.4982208748609, 2734.0);
      laguerreSolver0.getEvaluations();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(8.4982208748609, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2734.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NewtonRaphsonSolver newtonRaphsonSolver0 = new NewtonRaphsonSolver();
      newtonRaphsonSolver0.verifyInterval((-1910.8913809647122), 1259.639);
      assertEquals(1.0E-15, newtonRaphsonSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, newtonRaphsonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, newtonRaphsonSolver0.getAbsoluteAccuracy(), 0.01);
  }
}

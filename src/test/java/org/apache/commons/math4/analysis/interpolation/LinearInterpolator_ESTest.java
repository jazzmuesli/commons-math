/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:12:51 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.interpolation.LinearInterpolator;
import org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearInterpolator_ESTest extends LinearInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      assertNotNull(linearInterpolator0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1528.331242608402);
      PolynomialSplineFunction polynomialSplineFunction0 = linearInterpolator0.interpolate(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(polynomialSplineFunction0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1528.331242608402), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, polynomialSplineFunction0.getN());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      assertNotNull(linearInterpolator0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        linearInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of points (0)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      assertNotNull(linearInterpolator0);
      
      double[] doubleArray0 = new double[7];
      try { 
        linearInterpolator0.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      assertNotNull(linearInterpolator0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        linearInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      assertNotNull(linearInterpolator0);
      
      // Undeclared exception!
      try { 
        linearInterpolator0.interpolate((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1072.25369438231);
      PolynomialSplineFunction polynomialSplineFunction0 = linearInterpolator0.interpolate(doubleArray0, doubleArray0);
      assertEquals(1, polynomialSplineFunction0.getN());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      LinearInterpolator linearInterpolator0 = new LinearInterpolator();
      try { 
        linearInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LinearInterpolator", e);
      }
  }
}

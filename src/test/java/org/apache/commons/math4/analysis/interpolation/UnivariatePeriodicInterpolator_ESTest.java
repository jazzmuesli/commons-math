/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:18:08 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.interpolation.UnivariateInterpolator;
import org.apache.commons.math4.analysis.interpolation.UnivariatePeriodicInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnivariatePeriodicInterpolator_ESTest extends UnivariatePeriodicInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, 0.003743618598776026);
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator1 = new UnivariatePeriodicInterpolator(univariatePeriodicInterpolator0, (-540.11480806), 2);
      assertFalse(univariatePeriodicInterpolator1.equals((Object)univariatePeriodicInterpolator0));
      assertNotNull(univariatePeriodicInterpolator1);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-540.11480806);
      try { 
        univariatePeriodicInterpolator1.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (-540.115 >= -540.115)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, 0.0);
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator1 = new UnivariatePeriodicInterpolator(univariatePeriodicInterpolator0, (-540.11480806), 1);
      assertFalse(univariatePeriodicInterpolator1.equals((Object)univariatePeriodicInterpolator0));
      assertNotNull(univariatePeriodicInterpolator1);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-540.11480806);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        univariatePeriodicInterpolator1.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 is smaller than the minimum (5)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.UnivariatePeriodicInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, (-3723.0));
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator1 = new UnivariatePeriodicInterpolator(univariatePeriodicInterpolator0, 5, (-4308));
      assertFalse(univariatePeriodicInterpolator1.equals((Object)univariatePeriodicInterpolator0));
      assertNotNull(univariatePeriodicInterpolator1);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        univariatePeriodicInterpolator1.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.UnivariatePeriodicInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator((UnivariateInterpolator) null, 0.0, 1036);
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[3];
      try { 
        univariatePeriodicInterpolator0.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is smaller than the minimum (1,036)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.UnivariatePeriodicInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, 0.0, (-1629));
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        univariatePeriodicInterpolator0.interpolate((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.UnivariatePeriodicInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, 2725.116407, 0);
      assertNotNull(univariatePeriodicInterpolator0);
      assertEquals(5, UnivariatePeriodicInterpolator.DEFAULT_EXTEND);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        univariatePeriodicInterpolator0.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnivariateInterpolator univariateInterpolator0 = mock(UnivariateInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((UnivariateFunction) null).when(univariateInterpolator0).interpolate(any(double[].class) , any(double[].class));
      double[] doubleArray0 = new double[1];
      UnivariatePeriodicInterpolator univariatePeriodicInterpolator0 = new UnivariatePeriodicInterpolator(univariateInterpolator0, 0, 0);
      univariatePeriodicInterpolator0.interpolate(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }
}

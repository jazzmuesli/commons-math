/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:39:06 GMT 2019
 */

package org.apache.commons.math4.analysis.polynomials;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolynomialFunctionLagrangeForm_ESTest extends PolynomialFunctionLagrangeForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = null;
      try {
        polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 points are required, got only 1
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = null;
      try {
        polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2853.9705594847555);
      doubleArray0[1] = (-3113.07);
      doubleArray0[2] = 2492.12052;
      doubleArray0[3] = (-1432.8160947);
      doubleArray0[4] = 657.851;
      doubleArray0[5] = 2082.21017;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(6, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-2853.9705594847555), (-3113.07), 2492.12052, (-1432.8160947), 657.851, 2082.21017, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunctionLagrangeForm0.getCoefficients();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-2853.9705594847555), (-3113.07), 2492.12052, (-1432.8160947), 657.851, 2082.21017, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.3960426849125147E-12, 0.9999999999999994, 5.149960319306146E-19, (-1.5881867761018131E-22), (-7.431700815906108E-26), 1.2621774483536189E-29, 7.703719777548943E-33}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = PolynomialFunctionLagrangeForm.evaluate(doubleArray1, doubleArray1, (-3113.07));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-2853.9705594847555), (-3113.07), 2492.12052, (-1432.8160947), 657.851, 2082.21017, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.3960426849125147E-12, 0.9999999999999994, 5.149960319306146E-19, (-1.5881867761018131E-22), (-7.431700815906108E-26), 1.2621774483536189E-29, 7.703719777548943E-33}, doubleArray1, 0.01);
      assertEquals((-3113.07), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-39.0);
      doubleArray0[1] = 1935.155;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(2, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-39.0), 1935.155, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunctionLagrangeForm0.getCoefficients();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-39.0), 1935.155, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        PolynomialFunctionLagrangeForm.evaluate(doubleArray1, doubleArray0, 4189.31589);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      polynomialFunctionLagrangeForm0.computeCoefficients();
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = PolynomialFunctionLagrangeForm.verifyInterpolationArray(doubleArray0, doubleArray0, true);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = PolynomialFunctionLagrangeForm.verifyInterpolationArray(doubleArray0, doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-39.0);
      doubleArray0[1] = 1935.155;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(2, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-39.0), 1935.155, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = polynomialFunctionLagrangeForm0.value(862.6);
      assertEquals(2, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-39.0), 1935.155, 0.0}, doubleArray0, 0.01);
      assertEquals(862.6, double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-490.32637);
      doubleArray0[2] = 752.30527;
      doubleArray0[3] = 503.03518353629926;
      doubleArray0[4] = (-3779.1938);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(4, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {0.0, (-490.32637), 752.30527, 503.03518353629926, (-3779.1938)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = polynomialFunctionLagrangeForm0.value((-490.32637));
      assertEquals(4, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {0.0, (-490.32637), 752.30527, 503.03518353629926, (-3779.1938)}, doubleArray0, 0.01);
      assertEquals((-490.32637), double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 1422.0;
      doubleArray0[2] = (-1759.56909406);
      doubleArray0[4] = (-567.233);
      doubleArray0[5] = 2839.066;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 3567.15905;
      double double0 = PolynomialFunctionLagrangeForm.evaluate(doubleArray0, doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.5, 1422.0, (-1759.56909406), 0.0, (-567.233), 2839.066, (-1.0), 3567.15905}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 1422.0;
      doubleArray0[2] = (-1759.56909406);
      doubleArray0[4] = (-567.233);
      doubleArray0[5] = 2839.066;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 3567.15905;
      double double0 = PolynomialFunctionLagrangeForm.evaluate(doubleArray0, doubleArray0, 2839.066);
      assertArrayEquals(new double[] {0.5, 1422.0, (-1759.56909406), 0.0, (-567.233), 2839.066, (-1.0), 3567.15905}, doubleArray0, 0.01);
      assertEquals(2839.066, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PolynomialFunctionLagrangeForm.verifyInterpolationArray((double[]) null, (double[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PolynomialFunctionLagrangeForm.evaluate((double[]) null, (double[]) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = null;
      try {
        polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        PolynomialFunctionLagrangeForm.verifyInterpolationArray(doubleArray0, doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        PolynomialFunctionLagrangeForm.verifyInterpolationArray(doubleArray0, doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 points are required, got only 0
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.6215274768781);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = polynomialFunctionLagrangeForm0.degree();
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        PolynomialFunctionLagrangeForm.verifyInterpolationArray(doubleArray0, doubleArray1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 5
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialFunctionLagrangeForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.6215274768781);
      double double0 = PolynomialFunctionLagrangeForm.evaluate(doubleArray0, doubleArray0, (-693.6215274768781));
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertEquals((-693.6215274768781), double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.6215274768781);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunctionLagrangeForm0.getCoefficients();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunctionLagrangeForm0.getCoefficients();
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {(-693.6215274768781), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.6215274768781);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      double double0 = polynomialFunctionLagrangeForm0.value(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-693.6215274768781);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      double[] doubleArray1 = polynomialFunctionLagrangeForm0.getInterpolatingValues();
      double double0 = PolynomialFunctionLagrangeForm.evaluate(doubleArray1, doubleArray0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 1422.0;
      doubleArray0[2] = (-1759.56909406);
      doubleArray0[4] = (-567.233);
      doubleArray0[5] = 2839.066;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 3567.15905;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      double[] doubleArray1 = polynomialFunctionLagrangeForm0.getInterpolatingPoints();
      assertArrayEquals(new double[] {(-1759.56909406), (-567.233), (-1.0), 0.0, 0.5, 1422.0, 2839.066, 3567.15905}, doubleArray1, 0.01);
  }
}

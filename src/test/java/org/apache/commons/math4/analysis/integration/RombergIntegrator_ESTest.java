/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:19:21 GMT 2019
 */

package org.apache.commons.math4.analysis.integration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator;
import org.apache.commons.math4.analysis.integration.RombergIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RombergIntegrator_ESTest extends RombergIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(32, RombergIntegrator.ROMBERG_MAX_ITERATIONS_COUNT);
      assertNotNull(rombergIntegrator0);
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3, rombergIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, rombergIntegrator0.getRelativeAccuracy(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32, 1.0E-15, (double)(-6), (-387.0692), 7154.694363810897).when(univariateFunction0).value(anyDouble());
      rombergIntegrator0.setup(Integer.MAX_VALUE, univariateFunction0, 2400.6822441604836, Integer.MAX_VALUE);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(32, RombergIntegrator.ROMBERG_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3, rombergIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, rombergIntegrator0.getRelativeAccuracy(), 0.01);
      
      // Undeclared exception!
      rombergIntegrator0.doIntegrate();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = null;
      try {
        rombergIntegrator0 = new RombergIntegrator((-1241), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,241 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = null;
      try {
        rombergIntegrator0 = new RombergIntegrator(0.5, 0.5, (-1748), (-638));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,748 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = null;
      try {
        rombergIntegrator0 = new RombergIntegrator(2, 231);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 231 is larger than, or equal to, the maximum (32)
         //
         verifyException("org.apache.commons.math4.analysis.integration.RombergIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator(1, 5);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(32, RombergIntegrator.ROMBERG_MAX_ITERATIONS_COUNT);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertNotNull(rombergIntegrator0);
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1, rombergIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, rombergIntegrator0.getRelativeAccuracy(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(426.0, 1.0E-6, (double)1).when(univariateFunction0).value(anyDouble());
      rombergIntegrator0.setup(3, univariateFunction0, 0.5, 3);
      assertEquals(1.0E-6, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY, 0.01);
      assertEquals(Integer.MAX_VALUE, BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);
      assertEquals(1.0E-15, BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY, 0.01);
      assertEquals(32, RombergIntegrator.ROMBERG_MAX_ITERATIONS_COUNT);
      assertEquals(3, BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT);
      assertEquals(1.0E-15, rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1, rombergIntegrator0.getMinimalIterationCount());
      assertEquals(1.0E-6, rombergIntegrator0.getRelativeAccuracy(), 0.01);
      
      try { 
        rombergIntegrator0.doIntegrate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (3) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.integration.BaseAbstractUnivariateIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = null;
      try {
        rombergIntegrator0 = new RombergIntegrator((-1682.5069550545236), (-1682.5069550545236), 1, 967);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 967 is larger than, or equal to, the maximum (32)
         //
         verifyException("org.apache.commons.math4.analysis.integration.RombergIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      rombergIntegrator0.setup(2147019733, univariateFunction0, (-6), 2147019733);
      double double0 = rombergIntegrator0.doIntegrate();
      assertEquals(0.0, double0, 0.01);
  }
}

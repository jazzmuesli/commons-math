/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:39:06 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator;
import org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AkimaSplineInterpolator_ESTest extends AkimaSplineInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5.791362645858847);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 1806.56412614784;
      doubleArray0[5] = 3540.30336;
      double[] doubleArray1 = new double[6];
      PolynomialSplineFunction polynomialSplineFunction0 = akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray1);
      assertEquals(5, polynomialSplineFunction0.getN());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[3];
      try { 
        akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of points (3)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[5];
      try { 
        akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = new double[7];
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      try { 
        akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 13 != 7
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-269.7566192769614);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-902.73956049);
      doubleArray0[5] = 3380.0;
      PolynomialSplineFunction polynomialSplineFunction0 = akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray0);
      assertEquals(5, polynomialSplineFunction0.getN());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      try { 
        akimaSplineInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      double[] doubleArray0 = new double[27];
      // Undeclared exception!
      try { 
        akimaSplineInterpolator0.interpolate(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AkimaSplineInterpolator akimaSplineInterpolator0 = new AkimaSplineInterpolator();
      // Undeclared exception!
      try { 
        akimaSplineInterpolator0.interpolate((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.AkimaSplineInterpolator", e);
      }
  }
}

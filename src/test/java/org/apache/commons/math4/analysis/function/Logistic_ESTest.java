/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:22:17 GMT 2019
 */

package org.apache.commons.math4.analysis.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.function.Logistic;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Logistic_ESTest extends Logistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-199.0);
      try { 
        logistic_Parametric0.gradient((-199.0), doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -199 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[7];
      try { 
        logistic_Parametric0.value(239.8985843, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 742.3446059791;
      doubleArray0[3] = 742.3446059791;
      doubleArray0[5] = 742.3446059791;
      double[] doubleArray1 = logistic_Parametric0.gradient(742.3446059791, doubleArray0);
      assertArrayEquals(new double[] {742.3446059791, 0.0, 0.0, 742.3446059791, 0.0, 742.3446059791}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.9911337563320016, -0.0, 734.7729974041106, (-0.0013333435776082948), 0.008866243667998375, 0.008826821848909684}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 239.8985843;
      doubleArray0[5] = 239.8985843;
      double[] doubleArray1 = logistic_Parametric0.gradient(1.3629491735708616E151, doubleArray0);
      assertArrayEquals(new double[] {239.8985843, 0.0, 0.0, 0.0, 0.0, 239.8985843}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, -0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 2.1482391357421875;
      doubleArray0[5] = 1188.081;
      double[] doubleArray1 = logistic_Parametric0.gradient(1188.081, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2.1482391357421875, 1188.081}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, -0.0, 0.0018081588172373666, 0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 2.1482391357421875;
      doubleArray0[3] = 2.1482391357421875;
      doubleArray0[5] = 1188.081;
      double[] doubleArray1 = logistic_Parametric0.gradient(1188.081, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.1482391357421875, 2.1482391357421875, 0.0, 1188.081}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, -0.0, 0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 3325.4463621;
      double double0 = logistic_Parametric0.value(3325.4463621, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 3325.4463621}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logistic logistic0 = new Logistic(0.0, 0.0, 3447.6885047, 3447.6885047, 3447.6885047, 3447.6885047);
      assertNotNull(logistic0);
      
      double double0 = logistic0.value(3447.6885047);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logistic logistic0 = new Logistic(1183.69925289, (-2007.87335621186), (-1449.61273565596), (-824.4100109833681), (-824.4100109833681), 1183.69925289);
      assertNotNull(logistic0);
      
      double double0 = logistic0.value((-824.4100109833681));
      assertEquals((-824.4100109833681), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      assertNotNull(logistic_Parametric0);
      
      double[] doubleArray0 = new double[2];
      try { 
        logistic_Parametric0.value(10.0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logistic logistic0 = null;
      try {
        logistic0 = new Logistic((-1.0), 827.736822, 827.736822, 1.0, 827.736822, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logistic logistic0 = new Logistic(742.3446059791, 742.3446059791, 742.3446059791, 742.3446059791, 1598.6115794659, 742.3446059791);
      assertNotNull(logistic0);
      
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(derivativeStructure0).add(anyDouble());
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(derivativeStructure0).when(derivativeStructure1).negate();
      // Undeclared exception!
      try { 
        logistic0.value(derivativeStructure1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logistic logistic0 = new Logistic(742.3446059791, 742.3446059791, 742.3446059791, 742.3446059791, 1598.6115794659, 742.3446059791);
      double double0 = logistic0.value(742.3446059791);
      assertEquals(749.9364776108935, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      try { 
        logistic_Parametric0.gradient(2.1482391357421875, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic$Parametric", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logistic.Parametric logistic_Parametric0 = new Logistic.Parametric();
      double[] doubleArray0 = new double[6];
      try { 
        logistic_Parametric0.value(0.0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.function.Logistic$Parametric", e);
      }
  }
}

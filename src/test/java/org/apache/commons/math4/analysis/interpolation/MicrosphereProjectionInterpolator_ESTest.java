/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:36:59 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MultivariateFunction;
import org.apache.commons.math4.analysis.interpolation.InterpolatingMicrosphere;
import org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MicrosphereProjectionInterpolator_ESTest extends MicrosphereProjectionInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      doReturn(2940).when(interpolatingMicrosphere0).getDimension();
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 1.0, true, 1.0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 2,940
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator((InterpolatingMicrosphere) null, 0.0, true, 0.0);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(4650, 4650, 2.220446049250313E-16, 4650, 2623.40872, 4650, true, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = null;
      try {
        microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(1199, 0, 1199, 2.220446049250313E-16, 1199, 0, false, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.InterpolatingMicrosphere", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = null;
      try {
        microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(4654, 4654, 4654, 0.0, 4654, 1863.4035135, true, 5238.1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4,654 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.InterpolatingMicrosphere", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(40, 40, 0.0, 1.0, 1.0, 0.0, false, (-1.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      doReturn(2, 0).when(interpolatingMicrosphere0).getDimension();
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 411.1536658, true, 411.1536658);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 411.1536658, false, 411.1536658);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[8];
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 0.0, true, 0.0);
      double[][] doubleArray0 = new double[0][2];
      double[] doubleArray1 = new double[7];
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 0.0, true, 0.0);
      double[][] doubleArray0 = new double[0][5];
      try { 
        microsphereProjectionInterpolator0.interpolate(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 1.0, true, 1.0);
      double[] doubleArray0 = new double[2];
      try { 
        microsphereProjectionInterpolator0.interpolate((double[][]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = null;
      try {
        microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, (-4060.56), false, (-1379.9231584799));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -4,060.56 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.MicrosphereProjectionInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = null;
      try {
        microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(0, 0, 2313.0, 0, 2313.0, 2313.0, true, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimension must be strictly positive
         //
         verifyException("org.apache.commons.rng.sampling.UnitSphereSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatingMicrosphere interpolatingMicrosphere0 = mock(InterpolatingMicrosphere.class, new ViolatedAssumptionAnswer());
      doReturn((InterpolatingMicrosphere) null).when(interpolatingMicrosphere0).copy();
      doReturn(2).when(interpolatingMicrosphere0).getDimension();
      MicrosphereProjectionInterpolator microsphereProjectionInterpolator0 = new MicrosphereProjectionInterpolator(interpolatingMicrosphere0, 411.1536658, false, 411.1536658);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      MultivariateFunction multivariateFunction0 = microsphereProjectionInterpolator0.interpolate(doubleArray0, doubleArray1);
      assertNotNull(multivariateFunction0);
  }
}

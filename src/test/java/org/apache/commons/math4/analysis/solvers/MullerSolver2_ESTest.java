/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:59:46 GMT 2019
 */

package org.apache.commons.math4.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.solvers.MullerSolver2;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MullerSolver2_ESTest extends MullerSolver2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4230, (-1441.461762436), (double)4230, (double)4230, 1.0E-6).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(4230, univariateFunction0, (double) 4230, 4448.005965131816);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4443.625295696409, double0, 0.01);
      
      double double1 = 0.0;
      int int0 = mullerSolver2_0.getMaxEvaluations();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4230, int0);
      
      mullerSolver2_0.verifyInterval(1141.8230396, 4230);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      
      double double2 = mullerSolver2_0.computeObjectiveValue((-2003.8505));
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-6, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      boolean boolean0 = mullerSolver2_0.isSequence(4230, (-2003.8505), 0.0);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertFalse(boolean0);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      mullerSolver2_0.incrementEvaluationCount();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      
      boolean boolean1 = mullerSolver2_0.isSequence(1.0E-6, (-3266.72381545), 4230);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double3 = 0.5;
      double double4 = 3344.7297;
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [4,230, 4,448.006], values: [0, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.MullerSolver2", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-15, (-1.5707963267948966), 234.828, (-3805.0420240439253), 1.0E-15).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(2098, univariateFunction0, (double) 2098);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(2098.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      mullerSolver2_0.setup(3, univariateFunction1, 3, (-1.0), 3);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(3.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals((-1.0), mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3.0, mullerSolver2_0.getMin(), 0.01);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [3, -1]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4230, 95.09648015684968).when(univariateFunction0).value(anyDouble());
      try { 
        mullerSolver2_0.solve(4230, univariateFunction0, (double) 4230, 4448.005965131816);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [4,230, 4,448.006], values: [4,230, 95.096]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.MullerSolver2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-15, (-1802.172780038), 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      mullerSolver2_0.solve(2098, univariateFunction0, (double) 2098);
      int int0 = 3;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double0 = (-1.0);
      mullerSolver2_0.setup(int0, univariateFunction1, int0, double0, int0);
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [3, -1]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 2592.47;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2592.47, 2592.47);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(2592.47, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(2592.47, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      double double1 = 0.0;
      int int0 = 2953;
      mullerSolver2_0.verifyInterval(0.0, 1.0E-6);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(2592.47, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(2592.47, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(764.28644049, 764.28644049).when(univariateFunction0).value(anyDouble());
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve(2953, univariateFunction0, (double) 2953);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [764.286, 764.286]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.MullerSolver2", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      double double0 = Double.POSITIVE_INFINITY;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2123.6807)).when(univariateFunction0).value(anyDouble());
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve(1, univariateFunction0, (double) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(2147479971, univariateFunction0, 2390.044338549991);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(2390.044338549991, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = mullerSolver2_0.doSolve();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(2390.044338549991, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int0 = mullerSolver2_0.getMaxEvaluations();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(2390.044338549991, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2147479971, int0);
      
      try { 
        mullerSolver2_0.verifySequence(Double.POSITIVE_INFINITY, 466.9796432686, 2147479971);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [\u221E, 466.98]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      boolean boolean0 = mullerSolver2_0.isSequence(0.0, 0.0, (-1.0));
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertFalse(boolean0);
      
      int int0 = mullerSolver2_0.getEvaluations();
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0, int0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(1, univariateFunction0, (double) 1, 426.4607478);
      assertEquals(1.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(213.7303739, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(426.4607478, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(2098, univariateFunction0, (double) 2098);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2098.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      mullerSolver2_0.setup(3, univariateFunction1, 3, (-1.0), 3);
      assertEquals(3.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals((-1.0), mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(3.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [3, -1]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-1.0));
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals((-1.0), mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(1, univariateFunction0, 0.0);
      assertEquals(0.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        mullerSolver2_0.computeObjectiveValue(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-2211));
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(63.7094282126, 0.0).when(univariateFunction0).value(anyDouble());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateFunction1).value(anyDouble());
      double double0 = mullerSolver2_0.solve(2098, univariateFunction1, 63.7094282126, 813.096327);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(63.7094282126, mullerSolver2_0.getMin(), 0.01);
      assertEquals(813.096327, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(438.4028776063, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(63.7094282126, double0, 0.01);
      
      double double1 = mullerSolver2_0.solve(2098, univariateFunction0, (double) 2098);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMin(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getMax(), 0.01);
      assertEquals(2098.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = 3;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double2 = (-1.0);
      mullerSolver2_0.setup(int0, univariateFunction2, int0, double2, int0);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(3.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(3.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [3, -1]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      boolean boolean0 = mullerSolver2_0.isSequence(0.0, 0.0, (-1.0));
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertFalse(boolean0);
      
      int int0 = mullerSolver2_0.getEvaluations();
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0, int0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      try { 
        mullerSolver2_0.solve((-7), univariateFunction0, (double) (-7), 426.4607478);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (-7) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      int int0 = 4230;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4230, (-1441.461762436), 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double double0 = mullerSolver2_0.solve(4230, univariateFunction0, (double) 4230, 4448.005965131816);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4339.002983565908, double0, 0.01);
      
      double double1 = 0.0;
      int int1 = mullerSolver2_0.getMaxEvaluations();
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4230, int1);
      assertTrue(int1 == int0);
      
      double double2 = (-2003.8505);
      double double3 = 1141.8230396;
      mullerSolver2_0.verifyInterval(double3, int0);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertTrue(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = 0.0;
      double double5 = mullerSolver2_0.computeObjectiveValue(double2);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      boolean boolean0 = mullerSolver2_0.isSequence(int1, double2, double4);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertFalse(boolean0);
      assertTrue(int1 == int0);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double5, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double6 = 202.257638;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double6, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      double double7 = (-3266.72381545);
      mullerSolver2_0.incrementEvaluationCount();
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      
      boolean boolean1 = mullerSolver2_0.isSequence(double5, double7, int1);
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(int1 == int0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double5, 0.01);
      assertNotEquals(double2, double7, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double6, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double6, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double7, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      
      double double8 = 0.5;
      double double9 = 3344.7297;
      double double10 = mullerSolver2_0.doSolve();
      assertEquals(4448.005965131816, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4339.002982565908, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(4230.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(4230.0, double10, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      
      double double11 = 339.0751625196;
      double double12 = mullerSolver2_0.solve(int1, univariateFunction1, double8, double9, double11);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(339.0751625196, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(3344.7297, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.5, mullerSolver2_0.getMin(), 0.01);
      assertEquals(3344.7297, double12, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double11, 0.01);
      assertNotEquals(double8, double10, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double9, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double10, 0.01);
      assertNotEquals(double9, double11, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertTrue(int1 == int0);
      assertNotEquals(double6, double11, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double7, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double8, 0.01);
      assertNotEquals(double6, double9, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double10, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      
      double double13 = mullerSolver2_0.doSolve();
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(339.0751625196, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(3344.7297, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.5, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.5, double13, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double8, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double10, 0.01);
      
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifyBracketing(double1, double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      try { 
        mullerSolver2_0.solve(0, univariateFunction0, 1773.556706332, 668.64997, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [1,773.557, 668.65]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 375.8324476501;
      double double1 = 0.0;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(375.8324476501, 0.0);
      assertEquals(0.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(375.8324476501, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      try { 
        mullerSolver2_0.computeObjectiveValue(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-15, 0.0).when(univariateFunction0).value(anyDouble());
      mullerSolver2_0.solve(2098, univariateFunction0, (double) 2098);
      int int0 = 3;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double0 = (-1.0);
      mullerSolver2_0.setup(int0, univariateFunction1, int0, double0, int0);
      try { 
        mullerSolver2_0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [3, -1]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }
}

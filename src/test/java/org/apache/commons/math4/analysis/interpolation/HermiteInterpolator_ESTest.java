/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:19:34 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.interpolation.HermiteInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class HermiteInterpolator_ESTest extends HermiteInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1692.8;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1692.8;
      doubleArray1[3] = 1692.8;
      doubleArray1[4] = 1692.8;
      doubleArray1[5] = 1692.8;
      doubleArray1[6] = 1692.8;
      doubleArray1[7] = 1692.8;
      doubleArray0[0] = doubleArray1;
      hermiteInterpolator0.addSamplePoint(1692.8, doubleArray0);
      hermiteInterpolator0.value((-3.141592653589793));
      hermiteInterpolator0.getPolynomials();
      hermiteInterpolator0.getPolynomials();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 10.0;
      doubleArray2[1] = 10.0;
      doubleArray2[2] = 10.0;
      doubleArray2[3] = 10.0;
      doubleArray2[4] = 10.0;
      doubleArray2[5] = 10.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 10.0;
      doubleArray3[1] = 10.0;
      doubleArray3[2] = 10.0;
      doubleArray3[3] = 10.0;
      doubleArray3[4] = 10.0;
      doubleArray3[5] = 10.0;
      doubleArray3[6] = 10.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 10.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 10.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      hermiteInterpolator0.addSamplePoint(10.0, doubleArray0);
      hermiteInterpolator0.getPolynomials();
      hermiteInterpolator0.getPolynomials();
      // Undeclared exception!
      try { 
        hermiteInterpolator0.addSamplePoint(0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1532.387;
      doubleArray1[1] = 1532.387;
      doubleArray0[0] = doubleArray1;
      hermiteInterpolator0.addSamplePoint(1532.387, doubleArray0);
      hermiteInterpolator0.getPolynomials();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1953.0704062736986;
      doubleArray1[1] = 1953.0704062736986;
      doubleArray1[2] = 1953.0704062736986;
      doubleArray1[3] = 1953.0704062736986;
      doubleArray1[4] = (-318.69);
      doubleArray1[5] = 1953.0704062736986;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1953.0704062736986;
      doubleArray2[1] = (-318.69);
      doubleArray2[2] = 1953.0704062736986;
      doubleArray2[3] = 1953.0704062736986;
      doubleArray2[4] = 1953.0704062736986;
      doubleArray2[5] = (-318.69);
      doubleArray2[6] = (-318.69);
      doubleArray2[7] = 1953.0704062736986;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1953.0704062736986;
      doubleArray3[1] = 1953.0704062736986;
      doubleArray3[2] = (-318.69);
      doubleArray3[3] = 1953.0704062736986;
      doubleArray3[4] = 1953.0704062736986;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-318.69);
      doubleArray4[1] = (-318.69);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-318.69);
      doubleArray4[4] = 1953.0704062736986;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-318.69);
      doubleArray5[1] = 1953.0704062736986;
      doubleArray0[4] = doubleArray5;
      hermiteInterpolator0.addSamplePoint(1953.0704062736986, doubleArray0);
      // Undeclared exception!
      try { 
        hermiteInterpolator0.getPolynomials();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-191.0);
      doubleArray1[1] = (-191.0);
      doubleArray1[2] = (-191.0);
      doubleArray1[3] = (-191.0);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-191.0);
      doubleArray1[6] = (-191.0);
      doubleArray1[7] = (-191.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-191.0);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-191.0);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-527.8461453473);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-191.0);
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-527.8461453473);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-191.0);
      doubleArray5[1] = (-527.8461453473);
      doubleArray5[2] = (-191.0);
      doubleArray5[3] = (-191.0);
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-1378.83);
      doubleArray0[4] = doubleArray5;
      hermiteInterpolator0.addSamplePoint((-191.0), doubleArray0);
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value(882.4509546668);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 307.0;
      doubleArray1[1] = 1556.071712;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      hermiteInterpolator0.addSamplePoint(1556.071712, doubleArray0);
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value((-3636.913558));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-771.13583018);
      doubleArray1[1] = 1530.910937013;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1530.910937013;
      doubleArray2[1] = (-771.13583018);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-771.13583018);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1530.910937013;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-771.13583018);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-771.13583018);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-4390.068612091556);
      doubleArray4[2] = (-771.13583018);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1530.910937013;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-4390.068612091556);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-4390.068612091556);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-771.13583018);
      doubleArray5[5] = (-4390.068612091556);
      doubleArray5[6] = (-771.13583018);
      doubleArray0[4] = doubleArray5;
      hermiteInterpolator0.addSamplePoint(1530.910937013, doubleArray0);
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(derivativeStructure0).getField();
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value(derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 10.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 10.0;
      doubleArray2[4] = 10.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 10.0;
      doubleArray3[2] = (-2.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 10.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2.0);
      doubleArray4[3] = 10.0;
      doubleArray4[4] = 1060.55043;
      doubleArray4[5] = (-2.0);
      doubleArray4[6] = 10.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 10.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2.0);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-2.0);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-2.0);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 10.0;
      doubleArray5[7] = (-2.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-2.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      hermiteInterpolator0.addSamplePoint(0.0, doubleArray0);
      double double0 = 3.141592653589793;
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      try { 
        hermiteInterpolator0.value(derivativeStructure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      // Undeclared exception!
      try { 
        hermiteInterpolator0.addSamplePoint(0.0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      try { 
        hermiteInterpolator0.value((DerivativeStructure) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      DerivativeStructure derivativeStructure0 = null;
      double double0 = 1539.62223603146;
      try { 
        hermiteInterpolator0.value(1539.62223603146);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      try { 
        hermiteInterpolator0.getPolynomials();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      try { 
        hermiteInterpolator0.value((-2014.909675366678));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2021.9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = 2021.9;
      doubleArray2[2] = (-1150.0323);
      doubleArray2[3] = 2021.9;
      doubleArray2[4] = 2021.9;
      doubleArray2[5] = 2021.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[1] = 2021.9;
      doubleArray4[2] = (-1150.0323);
      doubleArray4[3] = 2021.9;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 2021.9;
      doubleArray5[1] = 2021.9;
      doubleArray5[2] = (-1150.0323);
      doubleArray5[4] = (-1150.0323);
      doubleArray5[6] = (-1150.0323);
      doubleArray5[7] = 2021.9;
      hermiteInterpolator0.addSamplePoint(2021.9, doubleArray0);
      double[][] doubleArray6 = new double[1][3];
      double[] doubleArray7 = new double[7];
      doubleArray5[6] = 823.393918687;
      doubleArray7[1] = 823.393918687;
      doubleArray7[3] = 823.393918687;
      doubleArray7[4] = 823.393918687;
      doubleArray7[6] = 823.393918687;
      doubleArray6[0] = doubleArray7;
      // Undeclared exception!
      try { 
        hermiteInterpolator0.addSamplePoint(823.393918687, doubleArray6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 10.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      hermiteInterpolator0.addSamplePoint(0.0, doubleArray0);
      hermiteInterpolator0.getPolynomials();
      hermiteInterpolator0.value(321.739360557);
      Field<DerivativeStructure> field0 = (Field<DerivativeStructure>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(field0).getZero();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(field0, (Field) null).when(derivativeStructure0).getField();
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value(derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 10.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      hermiteInterpolator0.addSamplePoint(0.0, doubleArray0);
      hermiteInterpolator0.getPolynomials();
      hermiteInterpolator0.value(321.739360557);
      Field<DerivativeStructure> field0 = (Field<DerivativeStructure>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(field0).getZero();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(field0, (Field) null).when(derivativeStructure0).getField();
      // Undeclared exception!
      try { 
        hermiteInterpolator0.value(derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 0.5;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.5;
      doubleArray1[6] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-3.141592653589793);
      doubleArray2[2] = 0.5;
      doubleArray2[3] = 0.5;
      doubleArray2[4] = (-2096.148012);
      doubleArray2[5] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-2096.148012);
      doubleArray3[1] = (-3.141592653589793);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.5;
      doubleArray4[2] = (-3.141592653589793);
      doubleArray4[3] = 0.5;
      doubleArray4[4] = (-2096.148012);
      doubleArray4[5] = (-3.141592653589793);
      doubleArray4[6] = 0.5;
      doubleArray4[7] = 0.5;
      doubleArray4[8] = (-2096.148012);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.5;
      doubleArray5[1] = (-3.141592653589793);
      doubleArray5[2] = (-2096.148012);
      doubleArray5[3] = 0.5;
      doubleArray5[4] = (-3.141592653589793);
      doubleArray5[5] = (-3.141592653589793);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.5;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-3.141592653589793);
      doubleArray7[3] = (-2096.148012);
      doubleArray7[4] = (-2096.148012);
      doubleArray7[5] = 0.5;
      doubleArray7[6] = (-2096.148012);
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-3.141592653589793);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-2096.148012);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-3.141592653589793);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-3.141592653589793);
      doubleArray9[4] = (-45.02742534728892);
      doubleArray9[5] = (-2096.148012);
      doubleArray9[6] = 0.0;
      doubleArray0[8] = doubleArray9;
      hermiteInterpolator0.addSamplePoint(0.5, doubleArray0);
      // Undeclared exception!
      try { 
        hermiteInterpolator0.getPolynomials();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double double0 = 16.233901809249048;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 16.233901809249048;
      doubleArray1[1] = 16.233901809249048;
      doubleArray1[2] = 16.233901809249048;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 16.233901809249048;
      doubleArray2[1] = 16.233901809249048;
      doubleArray2[2] = 16.233901809249048;
      doubleArray2[4] = 584.6871186;
      doubleArray2[5] = 16.233901809249048;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 584.6871186;
      doubleArray3[1] = 584.6871186;
      doubleArray3[2] = 16.233901809249048;
      doubleArray3[3] = 584.6871186;
      doubleArray3[5] = 584.6871186;
      doubleArray3[6] = 584.6871186;
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      try { 
        hermiteInterpolator0.value(derivativeStructure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample for interpolation is empty
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3.141592653589793);
      doubleArray1[1] = (-3.141592653589793);
      doubleArray1[2] = (-3.141592653589793);
      doubleArray1[3] = (-3.141592653589793);
      doubleArray1[4] = (-3.141592653589793);
      doubleArray1[5] = (-3.141592653589793);
      doubleArray1[6] = (-3.141592653589793);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-3.141592653589793);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3.141592653589793);
      doubleArray2[3] = (-3.141592653589793);
      doubleArray2[4] = (-3.141592653589793);
      doubleArray2[5] = (-3.141592653589793);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-3.141592653589793);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-3.141592653589793);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-3.141592653589793);
      doubleArray5[1] = (-3.141592653589793);
      doubleArray5[2] = (-193.759366264);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-193.759366264);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-193.759366264);
      doubleArray0[5] = doubleArray6;
      hermiteInterpolator0.addSamplePoint((-3.141592653589793), doubleArray0);
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HermiteInterpolator hermiteInterpolator0 = new HermiteInterpolator();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      hermiteInterpolator0.addSamplePoint(0.0, doubleArray0);
      hermiteInterpolator0.getPolynomials();
      doubleArray0[1] = doubleArray1;
      hermiteInterpolator0.value(0.0);
      hermiteInterpolator0.addSamplePoint(3.0, doubleArray0);
      try { 
        hermiteInterpolator0.addSamplePoint(3.0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicated abscissa 0 causes division by zero
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.HermiteInterpolator", e);
      }
  }
}

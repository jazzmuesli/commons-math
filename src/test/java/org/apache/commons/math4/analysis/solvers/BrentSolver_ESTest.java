/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:32:38 GMT 2019
 */

package org.apache.commons.math4.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.solvers.BrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      brentSolver0.solve(2484, univariateFunction0, 0.0);
      double double0 = brentSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1.0, 9.869604401089358);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      brentSolver0.solve(261, univariateFunction0, (-2106.0975749));
      double double0 = brentSolver0.doSolve();
      assertEquals((-2106.0975749), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1.0, 1256.5);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      brentSolver0.setup(1536, univariateFunction0, 1536, 1536, 1.0E-14);
      // Undeclared exception!
      try { 
        brentSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // endpoints do not specify an interval: [1,536, 0]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-1662.7998131), (-1662.7998131));
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(180.7804837383624, 0.0, 0.0, 0.0, 1256.8).when(univariateFunction0).value(anyDouble());
      brentSolver0.solve(527, univariateFunction0, (double) 527);
      brentSolver0.doSolve();
      brentSolver0.doSolve();
      // Undeclared exception!
      try { 
        brentSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1,256.8, 1,256.8]
         //
         verifyException("org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.9737162811332675, 0.9737162811332675, 0.9737162811332675);
      // Undeclared exception!
      try { 
        brentSolver0.doSolve();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }
}

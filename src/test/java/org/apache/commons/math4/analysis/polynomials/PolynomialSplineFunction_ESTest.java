/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:24:17 GMT 2019
 */

package org.apache.commons.math4.analysis.polynomials;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolynomialSplineFunction_ESTest extends PolynomialSplineFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 89.7362590805437;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3.141592653589793, 0.0).when(polynomialFunction0).value(anyDouble());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      doReturn(89.7362590805437).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.value((-2058.49));
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction1.value(89.7362590805437);
      polynomialSplineFunction1.value((-2058.49));
      polynomialSplineFunction0.isValidPoint((-2058.49));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2058.49);
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[1] = polynomialFunctionArray0[0];
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value((-2058.49));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      doReturn(65.0329725).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.value((-2058.49));
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
      polynomialSplineFunction1.isValidPoint(65.0329725);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      doReturn(1276.6772788).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.value((-2058.49));
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction1.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value(262.00811);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 262.008 out of [-2,058.49, 88.548] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 65.0329725;
      double double0 = 77.649272;
      doubleArray0[2] = 77.649272;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      DerivativeStructure derivativeStructure2 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value((-516.784603));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -516.785 out of [3.142, 77.649] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0, (PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction1).polynomialDerivative();
      doReturn((-2058.49)).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.value((-2058.49));
      polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
      polynomialSplineFunction0.getN();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      doReturn((-2058.49)).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.value((-2058.49));
      polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      doReturn(0.0).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.value((-2058.49));
      polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(973.0).when(derivativeStructure1).getValue();
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value(derivativeStructure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 973 out of [-2,058.49, 88.548] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      DerivativeStructure derivativeStructure2 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(1914.081).when(derivativeStructure2).getValue();
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value(derivativeStructure2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,914.081 out of [-2,058.49, 88.548] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(polynomialFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn((-2058.49)).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      polynomialSplineFunction1.value(derivativeStructure0);
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(polynomialFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction1.getPolynomials();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      polynomialSplineFunction1.value(derivativeStructure0);
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(polynomialFunction1).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      polynomialSplineFunction0.value(derivativeStructure0);
      polynomialSplineFunction0.getKnots();
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((DerivativeStructure) null).when(polynomialFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0).when(polynomialFunction1).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(88.547708).when(derivativeStructure1).getValue();
      doReturn(derivativeStructure0).when(derivativeStructure1).subtract(anyDouble());
      polynomialSplineFunction1.value(derivativeStructure1);
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[1] = polynomialFunctionArray0[0];
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.polynomialSplineDerivative();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 65.0329725;
      double double0 = 77.649272;
      doubleArray0[2] = 77.649272;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      doReturn((DerivativeStructure) null).when(polynomialFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(65.0329725).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      polynomialSplineFunction0.value(derivativeStructure0);
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value((DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value(derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 65.0329725;
      doubleArray0[2] = 77.649272;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(derivativeStructure0).getValue();
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value(derivativeStructure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 out of [3.142, 77.649] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4432.520137328);
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[1];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -4,432.52)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, (PolynomialFunction[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[5];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      polynomialFunctionArray0[2] = polynomialFunction0;
      polynomialFunctionArray0[3] = polynomialFunction0;
      polynomialFunctionArray0[4] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction((double[]) null, polynomialFunctionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[9];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      polynomialFunctionArray0[2] = polynomialFunction0;
      polynomialFunctionArray0[3] = polynomialFunction0;
      polynomialFunctionArray0[4] = polynomialFunction0;
      polynomialFunctionArray0[5] = polynomialFunction0;
      polynomialFunctionArray0[6] = polynomialFunction0;
      polynomialFunctionArray0[7] = polynomialFunction0;
      polynomialFunctionArray0[8] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1910.84597646;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[0];
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[0];
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // spline partition must have at least 2 points, got 1
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2058.49);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 88.547708;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      PolynomialFunction polynomialFunction1 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(polynomialFunction0, polynomialFunction0, (PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction1).polynomialDerivative();
      doReturn(88.547708).when(polynomialFunction1).value(anyDouble());
      polynomialFunctionArray0[0] = polynomialFunction1;
      polynomialFunctionArray0[1] = polynomialFunction1;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.value((-2058.49));
      PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
      polynomialSplineFunction0.isValidPoint((-2058.49));
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(derivativeStructure0).getValue();
      doReturn((DerivativeStructure) null).when(derivativeStructure0).subtract(anyDouble());
      // Undeclared exception!
      try { 
        polynomialSplineFunction1.value(derivativeStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 65.0329725;
      double double0 = 77.649272;
      doubleArray0[2] = 77.649272;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      DerivativeStructure derivativeStructure0 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(derivativeStructure0).toString();
      doReturn(0.0).when(derivativeStructure0).getValue();
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((PolynomialFunction) null, (PolynomialFunction) null, (PolynomialFunction) null, (PolynomialFunction) null).when(polynomialFunction0).polynomialDerivative();
      doReturn(derivativeStructure0).when(polynomialFunction0).value(any(org.apache.commons.math4.analysis.differentiation.DerivativeStructure.class));
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
      polynomialSplineFunction0.polynomialSplineDerivative();
      DerivativeStructure derivativeStructure1 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      DerivativeStructure derivativeStructure2 = mock(DerivativeStructure.class, new ViolatedAssumptionAnswer());
      doReturn(65.0329725).when(derivativeStructure2).getValue();
      doReturn(derivativeStructure1).when(derivativeStructure2).subtract(anyDouble());
      polynomialSplineFunction0.getPolynomials();
      polynomialSplineFunction0.getKnots();
      DerivativeStructure derivativeStructure3 = polynomialSplineFunction0.value(derivativeStructure2);
      polynomialSplineFunction0.polynomialSplineDerivative();
      // Undeclared exception!
      try { 
        polynomialSplineFunction0.value(derivativeStructure3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 out of [3.142, 77.649] range
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2368.81131);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2876.200020815;
      doubleArray0[5] = (-1214.3213388445);
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 0.0;
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[7];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[4] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunctionArray0[0];
      polynomialFunctionArray0[2] = polynomialFunction0;
      polynomialFunctionArray0[3] = polynomialFunction0;
      polynomialFunctionArray0[4] = polynomialFunction0;
      polynomialFunctionArray0[5] = polynomialFunction0;
      polynomialFunctionArray0[6] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 7
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1864.0;
      doubleArray0[1] = 1420.5618346;
      doubleArray0[2] = 2484.4356900771;
      doubleArray0[3] = 3860.8519546701073;
      doubleArray0[4] = (-2844.58990148314);
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[7] = (-858.8);
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[9];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      polynomialFunctionArray0[4] = polynomialFunctionArray0[3];
      polynomialFunctionArray0[5] = polynomialFunctionArray0[4];
      polynomialFunctionArray0[6] = polynomialFunctionArray0[5];
      polynomialFunctionArray0[7] = polynomialFunctionArray0[6];
      polynomialFunctionArray0[8] = polynomialFunctionArray0[7];
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1594.0520077);
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, (PolynomialFunction[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[5];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // spline partition must have at least 2 points, got 0
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
      PolynomialFunction polynomialFunction0 = mock(PolynomialFunction.class, new ViolatedAssumptionAnswer());
      polynomialFunctionArray0[0] = polynomialFunction0;
      polynomialFunctionArray0[1] = polynomialFunction0;
      PolynomialSplineFunction polynomialSplineFunction0 = null;
      try {
        polynomialSplineFunction0 = new PolynomialSplineFunction((double[]) null, polynomialFunctionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.analysis.polynomials.PolynomialSplineFunction", e);
      }
  }
}

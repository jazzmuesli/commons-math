/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:12:53 GMT 2019
 */

package org.apache.commons.math4.analysis.interpolation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.interpolation.LoessInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoessInterpolator_ESTest extends LoessInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.3;
      doubleArray0[2] = (double) 2;
      try { 
        loessInterpolator0.smooth(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bandwidth (0)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(1.0E-12, 0);
      assertNotNull(loessInterpolator0);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        loessInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of points (1)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.SplineInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        loessInterpolator0.smooth(doubleArray0, doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        loessInterpolator0.smooth((double[]) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[0];
      try { 
        loessInterpolator0.smooth(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      // Undeclared exception!
      try { 
        loessInterpolator0.smooth((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = null;
      try {
        loessInterpolator0 = new LoessInterpolator(0.0, (-1550));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of robustness iterations (-1,550)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        loessInterpolator0.smooth(doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = loessInterpolator0.smooth(doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray2 = loessInterpolator0.smooth(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      assertNotNull(loessInterpolator0);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      
      double[] doubleArray0 = new double[0];
      try { 
        loessInterpolator0.smooth(doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(1.0E-12, 0);
      assertNotNull(loessInterpolator0);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = loessInterpolator0.smooth(doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = null;
      try {
        loessInterpolator0 = new LoessInterpolator(1888.0, 209, 1888.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bandwidth (1,888)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(1.0, 3224);
      assertNotNull(loessInterpolator0);
      assertEquals(2, LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS);
      assertEquals(1.0E-12, LoessInterpolator.DEFAULT_ACCURACY, 0.01);
      assertEquals(0.3, LoessInterpolator.DEFAULT_BANDWIDTH, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        loessInterpolator0.interpolate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(0.0, 0, (-1513.395434));
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.3;
      doubleArray0[2] = (double) 2;
      try { 
        loessInterpolator0.smooth(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bandwidth (0)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(0.0, 1, 0.0);
      double[] doubleArray0 = new double[0];
      try { 
        loessInterpolator0.interpolate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LoessInterpolator loessInterpolator0 = new LoessInterpolator();
      double[] doubleArray1 = new double[4];
      try { 
        loessInterpolator0.smooth(doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = null;
      try {
        loessInterpolator0 = new LoessInterpolator(0.0, (-2825), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of robustness iterations (-2,825)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = new LoessInterpolator(0.0, 798, Double.NaN);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        loessInterpolator0.interpolate((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = null;
      try {
        loessInterpolator0 = new LoessInterpolator((-1014.24), (-1729), (-1729));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bandwidth (-1,014.24)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LoessInterpolator loessInterpolator0 = null;
      try {
        loessInterpolator0 = new LoessInterpolator(2145.472067161271, (-1031));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bandwidth (2,145.472)
         //
         verifyException("org.apache.commons.math4.analysis.interpolation.LoessInterpolator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:27:34 GMT 2019
 */

package org.apache.commons.math4.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math4.random.NormalizedRandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CorrelatedRandomVectorGenerator_ESTest extends CorrelatedRandomVectorGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator((double[]) null, (RealMatrix) null, 0.0, normalizedRandomGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2252, 1).when(realMatrix0).getRowDimension();
      doReturn(doubleArray0).when(realMatrix0).getData();
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, 0.0, normalizedRandomGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value 0 at index 0
         //
         verifyException("org.apache.commons.math4.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(414, Integer.MAX_VALUE).when(realMatrix0).getRowDimension();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, 0.0, (NormalizedRandomGenerator) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-4277)).when(realMatrix0).getRowDimension();
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, (-4277), (NormalizedRandomGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(realMatrix0).getRowDimension();
      doReturn((double[][]) null).when(realMatrix0).getData();
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, (-2213.886682755), normalizedRandomGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(realMatrix0).getRowDimension();
      doReturn((double[][]) null).when(realMatrix0).getData();
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(realMatrix0, 0.6366197723675814, normalizedRandomGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getRowDimension();
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, realMatrix0, 1676.116, normalizedRandomGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math4.random.CorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(realMatrix0).getRowDimension();
      doReturn((double[][]) null).when(realMatrix0).getData();
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      CorrelatedRandomVectorGenerator correlatedRandomVectorGenerator0 = null;
      try {
        correlatedRandomVectorGenerator0 = new CorrelatedRandomVectorGenerator(doubleArray0, realMatrix0, 0.0, normalizedRandomGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.RectangularCholeskyDecomposition", e);
      }
  }
}

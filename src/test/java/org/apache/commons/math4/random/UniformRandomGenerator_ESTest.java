/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:23:19 GMT 2019
 */

package org.apache.commons.math4.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.random.UniformRandomGenerator;
import org.apache.commons.rng.UniformRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UniformRandomGenerator_ESTest extends UniformRandomGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(uniformRandomProvider0).nextDouble();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(uniformRandomProvider0);
      double double0 = uniformRandomGenerator0.nextNormalizedDouble();
      assertEquals(5.196152422706632, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn((-13.881504113130783)).when(uniformRandomProvider0).nextDouble();
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(uniformRandomProvider0);
      double double0 = uniformRandomGenerator0.nextNormalizedDouble();
      assertEquals((-49.8189916264066), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        uniformRandomGenerator0.nextNormalizedDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UniformRandomGenerator", e);
      }
  }
}

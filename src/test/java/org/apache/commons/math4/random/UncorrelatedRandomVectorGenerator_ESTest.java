/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:29:57 GMT 2019
 */

package org.apache.commons.math4.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.random.NormalizedRandomGenerator;
import org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UncorrelatedRandomVectorGenerator_ESTest extends UncorrelatedRandomVectorGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((double)97, (-3433.32333834353), (-3433.32333834353), (double)97, (-3433.32333834353)).when(normalizedRandomGenerator0).nextNormalizedDouble();
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(97, normalizedRandomGenerator0);
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2651.082395;
      doubleArray0[1] = 0.0;
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 458.260824473).when(normalizedRandomGenerator0).nextNormalizedDouble();
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, normalizedRandomGenerator0);
      uncorrelatedRandomVectorGenerator0.nextVector();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator((double[]) null, (double[]) null, normalizedRandomGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(normalizedRandomGenerator0).nextNormalizedDouble();
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(800, normalizedRandomGenerator0);
      assertNotNull(uncorrelatedRandomVectorGenerator0);
      
      double[] doubleArray0 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertNotNull(doubleArray0);
      assertEquals(800, doubleArray0.length);
      
      double[] doubleArray1 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(800, doubleArray1.length);
      
      double[] doubleArray2 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(800, doubleArray2.length);
      
      double[] doubleArray3 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(800, doubleArray3.length);
      
      double[] doubleArray4 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
      assertEquals(800, doubleArray4.length);
      
      double[] doubleArray5 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotNull(doubleArray5);
      assertEquals(800, doubleArray5.length);
      
      double[] doubleArray6 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotNull(doubleArray6);
      assertEquals(800, doubleArray6.length);
      
      double[] doubleArray7 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotNull(doubleArray7);
      assertEquals(800, doubleArray7.length);
      
      double[] doubleArray8 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertNotSame(doubleArray8, doubleArray5);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray3);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray4);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray0);
      assertNotNull(doubleArray8);
      assertEquals(800, doubleArray8.length);
      
      double[] doubleArray9 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray0));
      assertNotSame(doubleArray9, doubleArray3);
      assertNotSame(doubleArray9, doubleArray8);
      assertNotSame(doubleArray9, doubleArray1);
      assertNotSame(doubleArray9, doubleArray7);
      assertNotSame(doubleArray9, doubleArray5);
      assertNotSame(doubleArray9, doubleArray6);
      assertNotSame(doubleArray9, doubleArray4);
      assertNotSame(doubleArray9, doubleArray2);
      assertNotSame(doubleArray9, doubleArray0);
      assertNotNull(doubleArray9);
      assertEquals(800, doubleArray9.length);
      
      double[] doubleArray10 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray10.equals((Object)doubleArray0));
      assertFalse(doubleArray10.equals((Object)doubleArray5));
      assertFalse(doubleArray10.equals((Object)doubleArray9));
      assertFalse(doubleArray10.equals((Object)doubleArray8));
      assertFalse(doubleArray10.equals((Object)doubleArray4));
      assertFalse(doubleArray10.equals((Object)doubleArray2));
      assertFalse(doubleArray10.equals((Object)doubleArray1));
      assertFalse(doubleArray10.equals((Object)doubleArray7));
      assertFalse(doubleArray10.equals((Object)doubleArray6));
      assertFalse(doubleArray10.equals((Object)doubleArray3));
      assertNotSame(doubleArray10, doubleArray0);
      assertNotSame(doubleArray10, doubleArray5);
      assertNotSame(doubleArray10, doubleArray9);
      assertNotSame(doubleArray10, doubleArray8);
      assertNotSame(doubleArray10, doubleArray4);
      assertNotSame(doubleArray10, doubleArray2);
      assertNotSame(doubleArray10, doubleArray1);
      assertNotSame(doubleArray10, doubleArray7);
      assertNotSame(doubleArray10, doubleArray6);
      assertNotSame(doubleArray10, doubleArray3);
      assertNotNull(doubleArray10);
      assertEquals(800, doubleArray10.length);
      
      double[] doubleArray11 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertFalse(doubleArray11.equals((Object)doubleArray5));
      assertFalse(doubleArray11.equals((Object)doubleArray6));
      assertFalse(doubleArray11.equals((Object)doubleArray2));
      assertFalse(doubleArray11.equals((Object)doubleArray0));
      assertFalse(doubleArray11.equals((Object)doubleArray9));
      assertFalse(doubleArray11.equals((Object)doubleArray4));
      assertFalse(doubleArray11.equals((Object)doubleArray8));
      assertFalse(doubleArray11.equals((Object)doubleArray10));
      assertFalse(doubleArray11.equals((Object)doubleArray3));
      assertFalse(doubleArray11.equals((Object)doubleArray1));
      assertFalse(doubleArray11.equals((Object)doubleArray7));
      assertNotSame(doubleArray11, doubleArray5);
      assertNotSame(doubleArray11, doubleArray6);
      assertNotSame(doubleArray11, doubleArray2);
      assertNotSame(doubleArray11, doubleArray0);
      assertNotSame(doubleArray11, doubleArray9);
      assertNotSame(doubleArray11, doubleArray4);
      assertNotSame(doubleArray11, doubleArray8);
      assertNotSame(doubleArray11, doubleArray10);
      assertNotSame(doubleArray11, doubleArray3);
      assertNotSame(doubleArray11, doubleArray1);
      assertNotSame(doubleArray11, doubleArray7);
      assertNotNull(doubleArray11);
      assertEquals(800, doubleArray11.length);
      
      // Undeclared exception!
      uncorrelatedRandomVectorGenerator0.nextVector();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1584.0273246);
      doubleArray0[1] = 305.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-473.0);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 305.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-473.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 305.0;
      doubleArray1[7] = (-473.0);
      doubleArray1[8] = 0.0;
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray1, normalizedRandomGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator((-2966), (NormalizedRandomGenerator) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4455.9786665585425;
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, (NormalizedRandomGenerator) null);
      assertArrayEquals(new double[] {4455.9786665585425}, doubleArray0, 0.01);
      assertNotNull(uncorrelatedRandomVectorGenerator0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        uncorrelatedRandomVectorGenerator0.nextVector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(0, normalizedRandomGenerator0);
      assertNotNull(uncorrelatedRandomVectorGenerator0);
      
      double[] doubleArray0 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator((-1055), normalizedRandomGenerator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator((-630), normalizedRandomGenerator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1418.15;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1089.45175392);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1865.7;
      doubleArray0[7] = 1.5707963267948966;
      doubleArray0[8] = 1.0E-8;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1089.45175392);
      doubleArray1[5] = (-1089.45175392);
      doubleArray1[6] = 1.0E-8;
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = null;
      try {
        uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray1, normalizedRandomGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math4.random.UncorrelatedRandomVectorGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1035.20348314319);
      doubleArray0[1] = 1790.459136218112;
      doubleArray0[2] = 0.5;
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(normalizedRandomGenerator0).nextNormalizedDouble();
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, normalizedRandomGenerator0);
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      uncorrelatedRandomVectorGenerator0.nextVector();
      double[] doubleArray1 = uncorrelatedRandomVectorGenerator0.nextVector();
      assertArrayEquals(new double[] {(-1035.20348314319), 1790.459136218112, 0.5}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-2181.3);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3044.1428194);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-484.955923);
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(doubleArray0, doubleArray0, normalizedRandomGenerator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalizedRandomGenerator normalizedRandomGenerator0 = mock(NormalizedRandomGenerator.class, new ViolatedAssumptionAnswer());
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(2137, normalizedRandomGenerator0);
  }
}

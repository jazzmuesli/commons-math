/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:57:09 GMT 2019
 */

package org.apache.commons.math4.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math4.random.RandomGenerator;
import org.apache.commons.math4.random.SynchronizedRandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SynchronizedRandomGenerator_ESTest extends SynchronizedRandomGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(2017L).when(randomGenerator0).nextLong();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      long long0 = synchronizedRandomGenerator0.nextLong();
      assertEquals(2017L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1)).when(randomGenerator0).nextLong();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      long long0 = synchronizedRandomGenerator0.nextLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(887).when(randomGenerator0).nextInt(anyInt());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      int int0 = synchronizedRandomGenerator0.nextInt(0);
      assertEquals(887, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(randomGenerator0).nextInt(anyInt());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      int int0 = synchronizedRandomGenerator0.nextInt((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3229).when(randomGenerator0).nextInt();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      synchronizedRandomGenerator0.nextInt();
      int int0 = synchronizedRandomGenerator0.nextInt();
      assertEquals(3229, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(randomGenerator0).nextInt();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      int int0 = synchronizedRandomGenerator0.nextInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(3345.262856053798).when(randomGenerator0).nextGaussian();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextGaussian();
      assertEquals(3345.262856053798, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-1927.915224958015)).when(randomGenerator0).nextGaussian();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextGaussian();
      assertEquals((-1927.915224958015), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(909.8011F).when(randomGenerator0).nextFloat();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      float float0 = synchronizedRandomGenerator0.nextFloat();
      assertEquals(909.8011F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-1779.3F)).when(randomGenerator0).nextFloat();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      float float0 = synchronizedRandomGenerator0.nextFloat();
      assertEquals((-1779.3F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(2549.1145).when(randomGenerator0).nextDouble();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextDouble();
      assertEquals(2549.1145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((-1701.37666606)).when(randomGenerator0).nextDouble();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextDouble();
      assertEquals((-1701.37666606), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(randomGenerator0).nextBoolean();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      boolean boolean0 = synchronizedRandomGenerator0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      int[] intArray0 = new int[6];
      synchronizedRandomGenerator0.setSeed(intArray0);
      assertEquals(0.0, synchronizedRandomGenerator0.nextGaussian(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      synchronizedRandomGenerator0.setSeed(0);
      assertEquals(0, synchronizedRandomGenerator0.nextInt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(randomGenerator0).nextGaussian();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      synchronizedRandomGenerator0.setSeed(0L);
      assertEquals(0.0F, synchronizedRandomGenerator0.nextFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      byte[] byteArray0 = new byte[0];
      synchronizedRandomGenerator0.nextBytes(byteArray0);
      assertEquals(0.0F, synchronizedRandomGenerator0.nextFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(randomGenerator0).nextBoolean();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      boolean boolean0 = synchronizedRandomGenerator0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomGenerator0).nextInt(anyInt());
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      int int0 = synchronizedRandomGenerator0.nextInt((-1924));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(randomGenerator0).nextDouble();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      double double0 = synchronizedRandomGenerator0.nextDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomGenerator0).nextLong();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      long long0 = synchronizedRandomGenerator0.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomGenerator randomGenerator0 = mock(RandomGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(randomGenerator0).nextFloat();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(randomGenerator0);
      float float0 = synchronizedRandomGenerator0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
  }
}

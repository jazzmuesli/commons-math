/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:25:16 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.moment.FirstMoment;
import org.apache.commons.math4.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math4.stat.descriptive.moment.Skewness;
import org.apache.commons.math4.stat.descriptive.moment.ThirdMoment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Skewness_ESTest extends Skewness_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      long long0 = (-1840L);
      thirdMoment1.n = (-1840L);
      ThirdMoment thirdMoment2 = thirdMoment1.copy();
      Skewness skewness0 = new Skewness(thirdMoment2);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (-1840L);
      doubleArray0[3] = (double) (-1840L);
      doubleArray0[4] = (double) (-1840L);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1840L);
      double[] doubleArray1 = new double[5];
      skewness0.copy();
      try { 
        skewness0.incrementAll(doubleArray1, (-51), (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-51)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = thirdMoment0.copy();
      Skewness skewness0 = new Skewness(thirdMoment1);
      thirdMoment1.m3 = 2.0;
      Skewness skewness1 = skewness0.copy();
      Skewness skewness2 = new Skewness();
      Skewness.copy(skewness2, skewness1);
      Skewness skewness3 = skewness0.copy();
      double[] doubleArray0 = new double[1];
      skewness3.evaluate(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      skewness0.clear();
      doubleArray0[0] = 2.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      skewness3.evaluate(doubleArray1);
      int int0 = 0;
      skewness0.evaluate(doubleArray0, 0, 0);
      skewness0.incMoment = false;
      skewness3.getResult();
      skewness0.getResult();
      try { 
        skewness0.evaluate(doubleArray0, (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      long long0 = (-1840L);
      thirdMoment1.n = (-1840L);
      ThirdMoment thirdMoment2 = thirdMoment1.copy();
      Skewness skewness0 = new Skewness(thirdMoment2);
      thirdMoment2.m2 = (double) (-1840L);
      double[] doubleArray0 = new double[7];
      skewness0.equals(thirdMoment1);
      doubleArray0[0] = (double) (-1840L);
      doubleArray0[1] = (double) (-1840L);
      doubleArray0[2] = (double) (-1840L);
      doubleArray0[3] = (double) (-1840L);
      doubleArray0[4] = (double) (-1840L);
      doubleArray0[5] = (-1840.0);
      doubleArray0[6] = (double) (-1840L);
      skewness0.getN();
      try { 
        thirdMoment1.evaluate(doubleArray0, 242, 242);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness.copy(skewness0, skewness0);
      skewness0.getN();
      skewness0.getResult();
      skewness0.increment(0L);
      skewness0.getResult();
      skewness0.increment(Double.NaN);
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness1 = skewness0.copy();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      skewness0.moment = thirdMoment1;
      skewness0.increment((-1434.6339526));
      thirdMoment0.increment(1163.52829433);
      skewness0.increment(Double.NaN);
      skewness0.getN();
      thirdMoment1.nDevSq = 0.0;
      skewness0.getN();
      Skewness skewness2 = skewness0.copy();
      skewness2.increment(0.0);
      thirdMoment0.copy();
      Skewness.copy(skewness2, skewness2);
      skewness2.getResult();
      skewness2.getN();
      skewness1.getN();
      Skewness.copy(skewness2, skewness1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      try { 
        skewness0.evaluate(doubleArray0, 1156, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThirdMoment thirdMoment0 = null;
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1865.444375805378;
      doubleArray0[2] = 154.81155593483;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2152.49569704;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      skewness0.incMoment = true;
      skewness0.evaluate(doubleArray0);
      // Undeclared exception!
      try { 
        skewness0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = skewness0.copy();
      Skewness skewness2 = skewness0.copy();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1320.54182088);
      doubleArray0[1] = 1.986821492305628E-8;
      doubleArray0[2] = 509182.5900959665;
      doubleArray0[3] = (-1239.395102);
      doubleArray0[4] = 920.70892365;
      doubleArray0[5] = 0.07490822288864472;
      doubleArray0[6] = (-1011.9);
      doubleArray0[7] = 509182.5900959665;
      skewness0.incrementAll(doubleArray0);
      skewness2.incMoment = false;
      skewness1.copy();
      skewness1.getN();
      skewness1.getN();
      skewness0.getResult();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1283.69617);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 5716.39246053817;
      doubleArray0[6] = 2.0;
      skewness0.incrementAll(doubleArray0);
      // Undeclared exception!
      try { 
        skewness0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = thirdMoment0.copy();
      Skewness skewness0 = new Skewness(thirdMoment1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      thirdMoment1.incrementAll(doubleArray0);
      thirdMoment0.n = 0L;
      skewness0.getN();
      skewness0.copy();
      skewness0.getResult();
      skewness0.increment(6L);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 468.1836812;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      try { 
        skewness0.evaluate(doubleArray1, 21, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2140.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 105.5499088;
      doubleArray0[7] = (-264.55326072927716);
      doubleArray0[8] = 0.0;
      skewness0.incrementAll(doubleArray0);
      Skewness skewness1 = skewness0.copy();
      skewness1.increment(0.0);
      skewness0.getResult();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-19;
      doubleArray0[1] = (-284.51611);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 58.85301999675293;
      doubleArray0[4] = 1249.181481;
      skewness0.incrementAll(doubleArray0);
      Skewness skewness1 = skewness0.copy();
      skewness1.clear();
      Skewness skewness2 = skewness1.copy();
      skewness2.increment((-819.6473024));
      skewness0.evaluate(doubleArray0);
      skewness1.evaluate(doubleArray0, 0, 0);
      skewness2.getN();
      skewness2.clear();
      skewness2.evaluate(doubleArray0, 0, 1);
      skewness2.getResult();
      skewness0.copy();
      Skewness.copy(skewness0, skewness0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      // Undeclared exception!
      try { 
        Skewness.copy(skewness0, skewness0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      Skewness skewness1 = new Skewness(skewness0);
      skewness0.moment = thirdMoment0;
      skewness1.equals(skewness0);
      double[] doubleArray0 = null;
      int int0 = 0;
      int int1 = (-3236);
      skewness0.moment = thirdMoment0;
      // Undeclared exception!
      try { 
        skewness1.evaluate((double[]) null, 0, (-3236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      Skewness skewness1 = null;
      try {
        skewness1 = new Skewness(skewness0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      skewness0.clear();
      // Undeclared exception!
      try { 
        skewness0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Skewness", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 659.99118781452;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      skewness0.evaluate(doubleArray0, 0, 0);
      skewness0.increment((-1.0));
      Skewness skewness1 = skewness0.copy();
      Skewness.copy(skewness0, skewness1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness(skewness0);
      try { 
        Skewness.copy(skewness1, (Skewness) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.increment((-745.3908));
      skewness0.getN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness(skewness0);
      ThirdMoment thirdMoment0 = new ThirdMoment();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      skewness1.evaluate(doubleArray0);
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      ThirdMoment thirdMoment2 = thirdMoment1.copy();
      skewness1.equals(skewness0);
      skewness1.moment = thirdMoment2;
      Skewness.copy(skewness1, skewness1);
      Skewness.copy(skewness1, skewness1);
      double[] doubleArray1 = new double[0];
      skewness0.evaluate(doubleArray1, 0, 0);
      skewness0.clear();
      Skewness.copy(skewness1, skewness1);
      skewness0.increment(1.0E-19);
      skewness1.getResult();
      skewness1.clear();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[2];
      skewness0.evaluate(doubleArray0);
      skewness0.equals("");
      Skewness.copy(skewness0, skewness0);
      doubleArray0[0] = (-749.820220557);
      doubleArray0[1] = (-95.54367035245);
      try { 
        skewness0.evaluate(doubleArray0, 1342, 1342);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.clear();
      skewness0.clear();
      Skewness.copy(skewness0, skewness0);
      skewness0.clear();
      skewness0.getResult();
      skewness0.getResult();
      skewness0.getN();
      ThirdMoment thirdMoment0 = new ThirdMoment();
      skewness0.moment = thirdMoment0;
      Skewness skewness1 = skewness0.copy();
      Skewness.copy(skewness1, skewness0);
      skewness1.getResult();
      Skewness.copy(skewness1, skewness0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      skewness0.incrementAll(doubleArray0);
      Skewness.copy(skewness1, skewness0);
      int int0 = 257;
      try { 
        skewness1.evaluate(doubleArray0, 257, 257);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.getResult();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      skewness0.evaluate(doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      skewness0.clear();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Skewness skewness0 = new Skewness((ThirdMoment) null);
      skewness0.increment((-280.62148179));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness(skewness0);
      skewness1.getN();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      Skewness skewness0 = new Skewness(thirdMoment0);
      Skewness.copy(skewness0, skewness0);
      skewness0.copy();
      skewness0.getN();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[0];
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      skewness0.moment = thirdMoment1;
      try { 
        skewness0.evaluate(doubleArray0, (-3174), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-3,174)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Skewness skewness0 = null;
      try {
        skewness0 = new Skewness((Skewness) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Skewness skewness1 = new Skewness(skewness0);
      Skewness skewness2 = new Skewness(skewness1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1980.420900029813);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (-672.275375);
      skewness0.evaluate(doubleArray0);
      Skewness.copy(skewness0, skewness0);
      skewness0.copy();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      // Undeclared exception!
      try { 
        skewness0.evaluate((double[]) null, (-1073741823), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      Object object0 = new Object();
      skewness0.equals(object0);
      skewness0.copy();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.getResult();
      skewness0.increment(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = thirdMoment0.copy();
      FirstMoment.copy((FirstMoment) thirdMoment1, (FirstMoment) thirdMoment0);
      thirdMoment1.nDev = 2492.6774360415;
      ThirdMoment thirdMoment2 = new ThirdMoment(thirdMoment1);
      ThirdMoment.copy(thirdMoment2, thirdMoment1);
      Skewness skewness0 = new Skewness(thirdMoment2);
      double[] doubleArray0 = new double[3];
      thirdMoment1.equals(skewness0);
      thirdMoment1.equals(skewness0);
      doubleArray0[0] = 2492.6774360415;
      doubleArray0[1] = 2492.6774360415;
      doubleArray0[2] = 2492.6774360415;
      thirdMoment2.n = 1023L;
      skewness0.evaluate(doubleArray0, 2147472524, 2147472524);
      skewness0.getResult();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-19;
      doubleArray0[1] = (-284.51611);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 58.85301999675293;
      doubleArray0[4] = 1249.181481;
      skewness0.incrementAll(doubleArray0);
      Skewness skewness1 = skewness0.copy();
      skewness1.clear();
      Skewness skewness2 = skewness1.copy();
      skewness2.increment((-819.6473024));
      double double0 = skewness0.evaluate(doubleArray0);
      skewness1.evaluate(doubleArray0, 0, 0);
      skewness2.getN();
      skewness2.clear();
      skewness2.evaluate(doubleArray0, 0, 1);
      skewness2.getResult();
      Skewness skewness3 = skewness0.copy();
      skewness3.incrementAll(doubleArray0);
      skewness3.equals(skewness1);
      Skewness.copy(skewness0, skewness0);
      skewness2.copy();
      skewness1.getResult();
      double double1 = skewness1.getResult();
      assertEquals(5L, skewness0.getN());
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThirdMoment thirdMoment0 = new ThirdMoment();
      ThirdMoment thirdMoment1 = new ThirdMoment(thirdMoment0);
      thirdMoment1.clear();
      Skewness skewness0 = new Skewness(thirdMoment1);
      Skewness skewness1 = new Skewness(skewness0);
      skewness1.increment((-735.03575677876));
      SecondMoment secondMoment0 = new SecondMoment(thirdMoment1);
      FirstMoment.copy((FirstMoment) thirdMoment0, (FirstMoment) secondMoment0);
      skewness1.clear();
      Skewness.copy(skewness0, skewness1);
      assertTrue(skewness0.equals((Object)skewness1));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:18:32 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math4.stat.descriptive.SynchronizedDescriptiveStatistics;
import org.apache.commons.math4.stat.descriptive.UnivariateStatistic;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SynchronizedDescriptiveStatistics_ESTest extends SynchronizedDescriptiveStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.setWindowSize((-1));
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(1456);
      int int0 = synchronizedDescriptiveStatistics0.getWindowSize();
      assertEquals(1456, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.addValue((-3706.0));
      double[] doubleArray0 = synchronizedDescriptiveStatistics0.getValues();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
      assertArrayEquals(new double[] {(-3706.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.addValue((-3706.0));
      synchronizedDescriptiveStatistics0.getStandardDeviation();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.addValue((-3706.0));
      synchronizedDescriptiveStatistics0.addValue(0.0);
      synchronizedDescriptiveStatistics0.getStandardDeviation();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.addValue(0);
      double double0 = synchronizedDescriptiveStatistics0.getQuadraticMean();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.addValue((-3706.0));
      synchronizedDescriptiveStatistics0.getQuadraticMean();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.addValue((-3706.0));
      synchronizedDescriptiveStatistics0.getN();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.addValue(0);
      double double0 = synchronizedDescriptiveStatistics0.getElement(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.addValue(1739);
      double double0 = synchronizedDescriptiveStatistics0.getElement(0);
      assertEquals(1739.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(9);
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics1 = synchronizedDescriptiveStatistics0.copy();
      assertEquals(9, synchronizedDescriptiveStatistics1.getWindowSize());
      assertNotSame(synchronizedDescriptiveStatistics1, synchronizedDescriptiveStatistics0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      UnivariateStatistic univariateStatistic0 = synchronizedDescriptiveStatistics0.getSumsqImpl();
      double double0 = synchronizedDescriptiveStatistics0.apply(univariateStatistic0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.addValue(1.0);
      UnivariateStatistic univariateStatistic0 = synchronizedDescriptiveStatistics0.getPercentileImpl();
      double double0 = synchronizedDescriptiveStatistics0.apply(univariateStatistic0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      UnivariateStatistic univariateStatistic0 = synchronizedDescriptiveStatistics0.getMeanImpl();
      synchronizedDescriptiveStatistics0.addValue((-793.024322));
      double double0 = synchronizedDescriptiveStatistics0.apply(univariateStatistic0);
      assertEquals((-793.024322), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.setKurtosisImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        synchronizedDescriptiveStatistics0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(342);
      try { 
        SynchronizedDescriptiveStatistics.copy((SynchronizedDescriptiveStatistics) null, synchronizedDescriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.setMeanImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        SynchronizedDescriptiveStatistics.copy(synchronizedDescriptiveStatistics0, synchronizedDescriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.setMaxImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        synchronizedDescriptiveStatistics0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      // Undeclared exception!
      try { 
        synchronizedDescriptiveStatistics0.apply((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = null;
      try {
        synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics((SynchronizedDescriptiveStatistics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(418);
      synchronizedDescriptiveStatistics0.setMinImpl((UnivariateStatistic) null);
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics1 = null;
      try {
        synchronizedDescriptiveStatistics1 = new SynchronizedDescriptiveStatistics(synchronizedDescriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = null;
      try {
        synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (0)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(1456);
      try { 
        synchronizedDescriptiveStatistics0.setWindowSize(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (0)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(768);
      synchronizedDescriptiveStatistics0.getN();
      assertEquals(768, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(1456);
      SynchronizedDescriptiveStatistics.copy(synchronizedDescriptiveStatistics0, synchronizedDescriptiveStatistics0);
      assertEquals(1456, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics(1456);
      synchronizedDescriptiveStatistics0.getValues();
      assertEquals(1456, synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      int int0 = synchronizedDescriptiveStatistics0.getWindowSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.clear();
      assertEquals((-1), synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      // Undeclared exception!
      try { 
        synchronizedDescriptiveStatistics0.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics1 = synchronizedDescriptiveStatistics0.copy();
      assertNotSame(synchronizedDescriptiveStatistics1, synchronizedDescriptiveStatistics0);
      assertEquals((-1), synchronizedDescriptiveStatistics1.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.addValue((-1));
      double double0 = synchronizedDescriptiveStatistics0.getElement(0);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1), synchronizedDescriptiveStatistics0.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics1 = new SynchronizedDescriptiveStatistics(synchronizedDescriptiveStatistics0);
      assertEquals((-1), synchronizedDescriptiveStatistics1.getWindowSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SynchronizedDescriptiveStatistics synchronizedDescriptiveStatistics0 = new SynchronizedDescriptiveStatistics();
      synchronizedDescriptiveStatistics0.toString();
      assertEquals((-1), synchronizedDescriptiveStatistics0.getWindowSize());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:52:46 GMT 2019
 */

package org.apache.commons.math4.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.stat.regression.GLSMultipleLinearRegression;
import org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMultipleLinearRegression_ESTest extends AbstractMultipleLinearRegression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[1];
      oLSMultipleLinearRegression0.getY();
      doubleArray0[0] = 991.5;
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      oLSMultipleLinearRegression0.estimateRegressandVariance();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-231.0);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[2][9];
      gLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      gLSMultipleLinearRegression0.newXSampleData(doubleArray1);
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not enough data (2 rows) for this many predictors (2 predictors)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1575.410048292);
      doubleArray0[2] = 544.782989691001;
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NaN;
      oLSMultipleLinearRegression0.calculateYVariance();
      doubleArray0[5] = 1307.581912852;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, 3094, 3094);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 9,575,930
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newYSampleData((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1325.9;
      doubleArray0[1] = (-372.3145588623578);
      doubleArray0[2] = 1504.1241463684;
      double double0 = (-254.948848);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, (double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][4];
      double[][] doubleArray1 = new double[5][8];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2502.3159431432746);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2034.55606931363;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1050.875);
      doubleArray2[5] = 0.0;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2502.3159431432746);
      doubleArray3[1] = 2034.55606931363;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2034.55606931363;
      doubleArray3[6] = 0.0;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2034.55606931363;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2034.55606931363;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 2034.55606931363;
      doubleArray4[6] = 0.0;
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1050.875);
      doubleArray5[3] = 2034.55606931363;
      doubleArray5[4] = (-2502.3159431432746);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray1[3] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-2502.3159431432746);
      doubleArray6[3] = (-2502.3159431432746);
      doubleArray1[4] = doubleArray6;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][7];
      double[] doubleArray1 = new double[0];
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      gLSMultipleLinearRegression0.setNoIntercept(true);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newXSampleData((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[0][7];
      double[] doubleArray1 = new double[0];
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      oLSMultipleLinearRegression0.getX();
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, 2, 1514);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 3,030
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression((-1.0));
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 511.457;
      doubleArray0[4] = doubleArray5;
      oLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray5);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(44.00139307981);
      oLSMultipleLinearRegression0.setNoIntercept(true);
      oLSMultipleLinearRegression0.isNoIntercept();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateRSquared();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(0.0);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2359.757157162;
      doubleArray0[2] = (-908.68708);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, 2526, 2526);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 6,383,202
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newYSampleData(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression((-3342.5163293928));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3342.5163293928);
      doubleArray0[1] = (-3342.5163293928);
      doubleArray0[2] = (-3342.5163293928);
      doubleArray0[3] = (-3342.5163293928);
      doubleArray0[4] = (-3342.5163293928);
      doubleArray0[5] = (-3342.5163293928);
      doubleArray0[6] = (-3342.5163293928);
      doubleArray0[7] = (-3342.5163293928);
      doubleArray0[8] = (-3342.5163293928);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3035.85639543;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      oLSMultipleLinearRegression0.newXSampleData(doubleArray1);
      doubleArray0[2] = 974.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 3867.1035494922;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, 257, 257);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 66,306
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1393.82460305917;
      doubleArray1[5] = (-522.56112442332);
      doubleArray1[6] = (-2077.0);
      doubleArray1[7] = (-564.3839646358);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-564.3839646358);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-564.3839646358);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-564.3839646358);
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1393.82460305917;
      doubleArray6[3] = (-522.56112442332);
      doubleArray6[4] = (-2077.0);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-522.56112442332);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = Double.NaN;
      doubleArray7[2] = (-522.56112442332);
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = Double.NaN;
      doubleArray8[1] = 1393.82460305917;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 1.0;
      doubleArray0[7] = doubleArray8;
      oLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      oLSMultipleLinearRegression0.isNoIntercept();
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(Double.POSITIVE_INFINITY);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateRegressandVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(501.54);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(0.0);
      boolean boolean0 = false;
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = null;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression((-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(0.0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 1421.56;
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(1421.56);
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateResiduals();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.calculateYVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression((-2421.450425011531));
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2421.450425011531);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2421.450425011531);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2421.450425011531);
      doubleArray3[1] = (-2421.450425011531);
      doubleArray3[2] = (-2421.450425011531);
      doubleArray3[3] = (-2421.450425011531);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2421.450425011531);
      doubleArray4[1] = (-2421.450425011531);
      doubleArray4[2] = (-2421.450425011531);
      doubleArray4[3] = (-2421.450425011531);
      doubleArray4[4] = (-2421.450425011531);
      doubleArray4[5] = (-2421.450425011531);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (-2421.450425011531);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2421.450425011531);
      doubleArray5[1] = (-2421.450425011531);
      doubleArray5[2] = (-2421.450425011531);
      doubleArray5[3] = (-2421.450425011531);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-2421.450425011531);
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (-2421.450425011531);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-2421.450425011531);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2421.450425011531);
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (6x1) matrix
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      oLSMultipleLinearRegression0.setNoIntercept(false);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateErrorVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 2903.0;
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(2903.0);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionStandardError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateTotalSumOfSquares();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      RealVector realVector0 = oLSMultipleLinearRegression0.getY();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2128.9313241);
      doubleArray1[1] = (-2916.42417);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 734.355;
      doubleArray1[4] = (-674.7191);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 1762.4231123532259;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (1x8) matrix
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-12.2033);
      doubleArray1[2] = 1141.9088927;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1361.68);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1361.68);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-12.2033);
      doubleArray2[4] = (-12.2033);
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1361.68);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1361.68);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-2103.0596936);
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-2803.6551447063);
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 1289.842919163387;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 941.3;
      doubleArray8[2] = (-1361.68);
      doubleArray8[3] = (-1361.68);
      doubleArray0[7] = doubleArray8;
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(205.0432499415316);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      oLSMultipleLinearRegression0.setNoIntercept(true);
      assertTrue(oLSMultipleLinearRegression0.isNoIntercept());
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateBetaVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1445.5922793086);
      doubleArray0[1] = 3507.1;
      doubleArray0[2] = 1503.3;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1976.47);
      doubleArray0[5] = (-2231.5214307137);
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 2 observed points, at least 3 are required
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-688.6538066823215);
      doubleArray0[1] = (-155.2038);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1466.33505154171);
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = (-4492.08953855803);
      oLSMultipleLinearRegression0.newYSampleData(doubleArray0);
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertArrayEquals(new double[] {(-688.6538066823215), (-155.2038), 0.0, (-1.0), 0.0, 0.0, (-1466.33505154171), Double.NaN, (-4492.08953855803)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      oLSMultipleLinearRegression0.setNoIntercept(true);
      assertTrue(oLSMultipleLinearRegression0.isNoIntercept());
      
      double double0 = oLSMultipleLinearRegression0.estimateRegressandVariance();
      assertTrue(oLSMultipleLinearRegression0.isNoIntercept());
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionStandardError();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      double[][] doubleArray0 = new double[0][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1380.2;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-130.424);
      doubleArray1[4] = (-789.547977246608);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      gLSMultipleLinearRegression0.newYSampleData(doubleArray1);
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertArrayEquals(new double[] {1380.2, 1.0, 1.0, (-130.424), (-789.547977246608), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      double double0 = gLSMultipleLinearRegression0.estimateRegressandVariance();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertEquals(419160.2140018684, double0, 0.01);
      
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.estimateRegressionParametersVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      assertFalse(oLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(oLSMultipleLinearRegression0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1575.410048292);
      doubleArray0[2] = 544.782989691001;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1307.581912852;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newSampleData(doubleArray0, 3094, 3094);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 9,575,930
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      assertFalse(gLSMultipleLinearRegression0.isNoIntercept());
      assertNotNull(gLSMultipleLinearRegression0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2291.28839403733);
      doubleArray0[1] = 1220.5716321439;
      doubleArray0[2] = (-301.116);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-4873.5626);
      doubleArray0[7] = (-392.3885833991);
      doubleArray0[8] = 1714.5102542210639;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.newSampleData(doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-544.893266);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1958.06210698;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3210.6783144241476);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-3210.6783144241476);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1958.06210698;
      doubleArray3[4] = 1958.06210698;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-544.893266);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 1958.06210698;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-544.893266);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-544.893266);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-544.893266);
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray6[4] = (-3210.6783144241476);
      doubleArray6[5] = 2082.0449025;
      doubleArray6[6] = 1958.06210698;
      doubleArray6[7] = (-544.893266);
      doubleArray6[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (-544.893266);
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 1958.06210698;
      doubleArray7[4] = (-544.893266);
      doubleArray7[5] = (-1.0);
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression();
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressandVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-231.0);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        gLSMultipleLinearRegression0.validateSampleData(doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not enough data (2 rows) for this many predictors (2 predictors)
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GLSMultipleLinearRegression gLSMultipleLinearRegression0 = new GLSMultipleLinearRegression();
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-44.39239604421);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (-1943.306873044659);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1943.306873044659);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (-1943.306873044659);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1943.306873044659);
      doubleArray4[6] = 1.0;
      doubleArray4[7] = Double.POSITIVE_INFINITY;
      doubleArray4[8] = (-1943.306873044659);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        gLSMultipleLinearRegression0.validateCovarianceData(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (4x8) matrix
         //
         verifyException("org.apache.commons.math4.stat.regression.AbstractMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 340.892195571186;
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(340.892195571186);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 340.892195571186;
      doubleArray0[1] = 340.892195571186;
      doubleArray0[2] = 340.892195571186;
      doubleArray0[4] = 340.892195571186;
      doubleArray0[5] = 340.892195571186;
      double double1 = 1671.0;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.calculateTotalSumOfSquares();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OLSMultipleLinearRegression oLSMultipleLinearRegression0 = new OLSMultipleLinearRegression(0.0);
      boolean boolean0 = false;
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      oLSMultipleLinearRegression0.newXSampleData(doubleArray0);
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        oLSMultipleLinearRegression0.estimateRegressionParametersStandardErrors();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (7)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }
}

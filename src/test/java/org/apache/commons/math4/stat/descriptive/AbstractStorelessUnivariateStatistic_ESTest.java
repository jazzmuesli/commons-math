/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:11:48 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math4.stat.descriptive.moment.Mean;
import org.apache.commons.math4.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math4.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math4.stat.descriptive.moment.Variance;
import org.apache.commons.math4.stat.descriptive.rank.Max;
import org.apache.commons.math4.stat.descriptive.rank.Min;
import org.apache.commons.math4.stat.descriptive.summary.Product;
import org.apache.commons.math4.stat.descriptive.summary.Sum;
import org.apache.commons.math4.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math4.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractStorelessUnivariateStatistic_ESTest extends AbstractStorelessUnivariateStatistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      sumOfSquares0.increment((-1462.980962018));
      sumOfSquares0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Min min0 = new Min();
      min0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      product0.increment(18.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Min min0 = new Min();
      min0.clear();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      sumOfSquares0.increment((-1462.980962018));
      sumOfSquares0.getResult();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3548.8;
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.evaluate(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-684.2349456722);
      min0.evaluate(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      Mean mean0 = new Mean(secondMoment0);
      mean0.copy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[6];
      min0.incrementAll(doubleArray0);
      min0.copy();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      // Undeclared exception!
      try { 
        sumOfSquares0.incrementAll((double[]) null, 1, (-473));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[2];
      try { 
        product0.incrementAll(doubleArray0, (-1861), (-1861));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,861)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Sum sum0 = new Sum();
      try { 
        sum0.incrementAll(doubleArray0, 34, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      // Undeclared exception!
      try { 
        sumOfLogs0.evaluate((double[]) null, (-2050), 606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      SecondMoment secondMoment0 = new SecondMoment();
      try { 
        secondMoment0.evaluate(doubleArray0, (-53), (-53));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-53)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[8];
      try { 
        secondMoment0.evaluate(doubleArray0, 238, 238);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Max max0 = new Max();
      double[] doubleArray0 = new double[3];
      max0.incrementAll(doubleArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Variance variance0 = new Variance(false);
      variance0.incrementAll(doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[7];
      secondMoment0.evaluate(doubleArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.evaluate(doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sum sum0 = new Sum();
      Sum sum1 = sum0.copy();
      sum1.increment(0.0);
      sum1.equals(sum0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Min min0 = new Min();
      assertNotNull(min0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      
      Min min1 = new Min(min0);
      assertTrue(min1.equals((Object)min0));
      assertNotNull(min1);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      double[] doubleArray0 = new double[6];
      min1.incrementAll(doubleArray0);
      assertFalse(min0.equals((Object)min1));
      assertFalse(min1.equals((Object)min0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(min0, min1);
      assertNotSame(min1, min0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(6L, min1.getN());
      assertEquals(0.0, min1.getResult(), 0.01);
      
      boolean boolean0 = min1.equals(min0);
      assertFalse(min0.equals((Object)min1));
      assertFalse(min1.equals((Object)min0));
      assertFalse(boolean0);
      assertNotSame(min0, min1);
      assertNotSame(min1, min0);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(6L, min1.getN());
      assertEquals(0.0, min1.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotNull(secondMoment1);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      
      boolean boolean0 = secondMoment0.equals(secondMoment1);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertTrue(boolean0);
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StandardDeviation standardDeviation0 = new StandardDeviation(true);
      assertNotNull(standardDeviation0);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      boolean boolean0 = standardDeviation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      assertNotNull(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      boolean boolean0 = secondMoment0.equals(secondMoment0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Min min0 = new Min();
      assertNotNull(min0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      
      boolean boolean0 = min0.equals("|){M~P_-78\"^5v_");
      assertFalse(boolean0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sum sum0 = new Sum();
      assertNotNull(sum0);
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      
      // Undeclared exception!
      try { 
        sum0.incrementAll((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Min min0 = new Min();
      assertNotNull(min0);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      
      // Undeclared exception!
      try { 
        min0.evaluate((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[1];
      double double0 = secondMoment0.evaluate(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      // Undeclared exception!
      try { 
        geometricMean0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }
}

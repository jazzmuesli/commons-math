/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:17:50 GMT 2019
 */

package org.apache.commons.math4.stat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.StatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StatUtils_ESTest extends StatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2483.13;
      doubleArray0[2] = 0.05139094591140747;
      doubleArray0[3] = 1.0;
      double double0 = StatUtils.populationVariance(doubleArray0, 2502.48);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2483.13, 0.05139094591140747, 1.0}, doubleArray0, 0.01);
      assertEquals(1155786.5759401354, double0, 0.01);
      
      double double1 = StatUtils.variance(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2483.13, 0.05139094591140747, 1.0}, doubleArray0, 0.01);
      assertEquals(1541048.7679201795, double1, 0.01);
      
      int int0 = 1;
      double double2 = StatUtils.geometricMean(doubleArray0, 1, 1);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 2483.13, 0.05139094591140747, 1.0}, doubleArray0, 0.01);
      assertEquals(2483.1299999999997, double2, 0.01);
      
      try { 
        StatUtils.percentile(doubleArray0, 877.9438483662);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 877.944, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-710.870961);
      doubleArray0[1] = (-3908.636501);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-1.8374207360194882E-11);
      doubleArray0[5] = (-3908.636501);
      double double0 = StatUtils.sumSq(doubleArray0, 2, 2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-710.870961), (-3908.636501), 0.0, 0.0, (-1.8374207360194882E-11), (-3908.636501)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = StatUtils.min(doubleArray0, 2, 2);
      assertEquals(6, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-710.870961), (-3908.636501), 0.0, 0.0, (-1.8374207360194882E-11), (-3908.636501)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.8374207360194882E-11);
      doubleArray1[1] = (-3908.636501);
      doubleArray1[2] = (double) 937;
      doubleArray1[3] = (-710.870961);
      doubleArray1[4] = (-710.870961);
      doubleArray1[5] = (double) 937;
      double[] doubleArray2 = StatUtils.normalize(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.8374207360194882E-11), (-3908.636501), 937.0, (-710.870961), (-710.870961), 937.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.3214974038324055, (-1.8598895864938647), 0.8444315803445551, (-0.07523548901382555), (-0.07523548901382555), 0.8444315803445551}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = StatUtils.geometricMean(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      double double1 = StatUtils.meanDifference(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.sum(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray2 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StatUtils.mode((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 138;
      // Undeclared exception!
      try { 
        StatUtils.geometricMean((double[]) null, 138, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1178.3761);
      doubleArray0[0] = (-1178.3761);
      double double1 = StatUtils.sumDifference(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1178.3761)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.sumSq(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-1178.3761)}, doubleArray0, 0.01);
      assertEquals(1388570.23305121, double2, 0.01);
      
      double double3 = StatUtils.max(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {(-1178.3761)}, doubleArray0, 0.01);
      assertEquals((-1178.3761), double3, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1388570.23305121;
      doubleArray1[2] = (-1178.3761);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1178.3761);
      try { 
        StatUtils.mean(doubleArray1, 2581, 2581);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 950.19;
      doubleArray0[4] = (-72.7085892);
      doubleArray0[5] = 1753.0033413408619;
      doubleArray0[6] = (-1430.0);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double double0 = StatUtils.variance(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.9999999999999999, double0, 0.01);
      
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6026069.680420681, double1, 0.01);
      
      double[] doubleArray3 = StatUtils.mode(doubleArray1, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      
      double double2 = StatUtils.percentile(doubleArray1, 0.9999999999999999);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals((-1.7292991460428633), double2, 0.01);
      
      double double3 = StatUtils.product(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = StatUtils.sumLog(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double4, 0.01);
      
      double[] doubleArray4 = StatUtils.mode(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotNull(doubleArray4);
      
      double double5 = StatUtils.min(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals((-1.7292991460428633), double5, 0.01);
      
      try { 
        StatUtils.sumDifference(doubleArray2, doubleArray4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.4113073945045471;
      doubleArray0[4] = 3190.16;
      double double1 = StatUtils.max(doubleArray0, 1, 1);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, 0.4113073945045471, 3190.16}, doubleArray0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, 0.4113073945045471, 3190.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.4479865625631284), (-0.44658466437507516), (-0.4472856134691018), (-0.4469973079235574), 1.7888541483308626}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double2 = StatUtils.geometricMean(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, 0.4113073945045471, 3190.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.4479865625631284), (-0.44658466437507516), (-0.4472856134691018), (-0.4469973079235574), 1.7888541483308626}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = StatUtils.meanDifference(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, 0.4113073945045471, 3190.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.4479865625631284), (-0.44658466437507516), (-0.4472856134691018), (-0.4469973079235574), 1.7888541483308626}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-638.1142614789009), double3, 0.01);
      
      int int0 = (-4313);
      try { 
        StatUtils.sumSq(doubleArray0, 8, (-4313));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-4,313)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 950.19;
      doubleArray0[4] = (-72.7085892);
      doubleArray0[5] = 1753.0033413408619;
      doubleArray0[6] = (-1430.0);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double double0 = StatUtils.variance(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.9999999999999999, double0, 0.01);
      
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6026069.680420681, double1, 0.01);
      
      double[] doubleArray3 = StatUtils.mode(doubleArray1, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      
      double double2 = StatUtils.percentile(doubleArray1, 0.9999999999999999);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals((-1.7292991460428633), double2, 0.01);
      
      double double3 = StatUtils.product(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = StatUtils.sumLog(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(Double.NaN, double4, 0.01);
      
      double[] doubleArray4 = StatUtils.mode(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotNull(doubleArray4);
      
      double double5 = StatUtils.min(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals((-1.7292991460428633), double5, 0.01);
      
      double double6 = StatUtils.populationVariance(doubleArray0, (-2813.984101));
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertEquals(730679.5247995798, double6, 0.01);
      
      double double7 = StatUtils.max(doubleArray4);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = StatUtils.min(doubleArray1, 1, 1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertEquals(0.8753677110679028, double8, 0.01);
      
      try { 
        StatUtils.varianceDifference(doubleArray3, doubleArray4, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-701);
      // Undeclared exception!
      try { 
        StatUtils.geometricMean((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 950.19;
      doubleArray0[4] = (-72.7085892);
      doubleArray0[5] = 1753.0033413408619;
      doubleArray0[6] = (-1430.0);
      doubleArray0[7] = 1.0;
      double double0 = StatUtils.variance(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {950.19, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {950.19, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double[] doubleArray1 = StatUtils.mode(doubleArray0, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {950.19, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        StatUtils.percentile(doubleArray0, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math4.util.KthSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 588.0;
      doubleArray0[1] = 1124.07;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2682.888);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.695838923802857E-243;
      doubleArray0[6] = 0.4574742913246155;
      doubleArray0[7] = 1.0074354568442952E-9;
      doubleArray0[8] = 0.0;
      double double0 = StatUtils.variance(doubleArray0, 2, 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {588.0, 1124.07, (-1.0), (-2682.888), 0.0, 1.695838923802857E-243, 0.4574742913246155, 1.0074354568442952E-9, 0.0}, doubleArray0, 0.01);
      assertEquals(3596261.6222719997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1106.73992582);
      doubleArray0[3] = 2686.736;
      doubleArray0[4] = 1784.0;
      double double0 = StatUtils.percentile(doubleArray0, 87.24);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1106.73992582), 2686.736, 1784.0}, doubleArray0, 0.01);
      assertEquals(2686.736, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      // Undeclared exception!
      try { 
        StatUtils.percentile((double[]) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-710.870961);
      doubleArray0[0] = (-710.870961);
      double double1 = (-3908.636501);
      doubleArray0[1] = (-3908.636501);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3275.97776594701);
      double double2 = (-1.8374207360194882E-11);
      doubleArray0[4] = (-1.8374207360194882E-11);
      doubleArray0[5] = (-97.7143031985387);
      double double3 = StatUtils.sumSq(doubleArray0, 2, 2);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-710.870961), (-3908.636501), 0.0, (-3275.97776594701), (-1.8374207360194882E-11), (-97.7143031985387)}, doubleArray0, 0.01);
      assertEquals(1.0732030322979163E7, double3, 0.01);
      
      int int0 = 937;
      try { 
        StatUtils.geometricMean(doubleArray0, 23, 937);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        StatUtils.product((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatUtils.sum((double[]) null, 429, 2402);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1889.2147984147098);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1038.27884247);
      doubleArray0[5] = 2326.56;
      double double0 = StatUtils.mean(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1889.2147984147098), 0.0, (-1038.27884247), 2326.56}, doubleArray0, 0.01);
      assertEquals((-100.1556068141183), double0, 0.01);
      
      double double1 = StatUtils.min(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1889.2147984147098), 0.0, (-1038.27884247), 2326.56}, doubleArray0, 0.01);
      assertEquals((-1889.2147984147098), double1, 0.01);
      
      double double2 = StatUtils.populationVariance(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1889.2147984147098), 0.0, (-1038.27884247), 2326.56}, doubleArray0, 0.01);
      assertEquals(1666641.6782353586, double2, 0.01);
      
      double double3 = StatUtils.variance(doubleArray0, 0, 1);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1889.2147984147098), 0.0, (-1038.27884247), 2326.56}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.populationVariance(doubleArray0, (-100.1556068141183));
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1889.2147984147098), 0.0, (-1038.27884247), 2326.56}, doubleArray0, 0.01);
      assertEquals(1666641.6782353586, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.sum((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = StatUtils.variance(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.varianceDifference(doubleArray0, doubleArray0, (-3426.0568));
      assertEquals(5, doubleArray0.length);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.862645149230957E-9), double4, 0.01);
      
      int int0 = 322;
      try { 
        StatUtils.min(doubleArray0, 18, 322);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = StatUtils.variance(doubleArray0, (double) 1469);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[0] = 5239.0;
      try { 
        StatUtils.sumLog(doubleArray0, 1469, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.sumLog((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1869.9);
      double double1 = StatUtils.varianceDifference(doubleArray0, doubleArray0, (-1869.9));
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.varianceDifference(doubleArray0, doubleArray0, 0.0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = StatUtils.geometricMean(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.mean(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = StatUtils.max(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double[] doubleArray1 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StatUtils.mean((double[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.meanDifference((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3315.2046;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 391.553;
      doubleArray0[8] = 1088.83122718219;
      double double0 = StatUtils.geometricMean(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 3315.2046, 0.0, 0.0, 391.553, 1088.83122718219}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = StatUtils.sum(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 3315.2046, 0.0, 0.0, 391.553, 1088.83122718219}, doubleArray0, 0.01);
      assertEquals(4796.58882718219, double1, 0.01);
      
      try { 
        StatUtils.percentile(doubleArray0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.min((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1869.9);
      try { 
        StatUtils.varianceDifference(doubleArray0, doubleArray0, (-1869.9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 0.0;
      int int0 = 1289;
      int int1 = 0;
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null, 0.0, 1289, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-357);
      int int1 = 0;
      // Undeclared exception!
      try { 
        StatUtils.product((double[]) null, (-357), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1606.7186057;
      doubleArray0[2] = 506.589772;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-2676.01);
      int int0 = 0;
      double double0 = StatUtils.populationVariance(doubleArray0, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1606.7186057, 506.589772, 0.0, (-1.0), 0.0, (-1.0), (-2676.01)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.geometricMean(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1606.7186057, 506.589772, 0.0, (-1.0), 0.0, (-1.0), (-2676.01)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int1 = 187;
      try { 
        StatUtils.geometricMean(doubleArray0, 187, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.variance(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.min(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = (-535);
      int int1 = 4562;
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, (-535), 4562);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-535)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 4170;
      // Undeclared exception!
      try { 
        StatUtils.variance((double[]) null, (-876.00944387116), 4170, 4170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2212.28470789;
      doubleArray0[2] = 0.375;
      doubleArray0[3] = 0.6666666666666666;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, (-833), (-833));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-833)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 363.315274961414;
      double double0 = StatUtils.max(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {363.315274961414}, doubleArray0, 0.01);
      assertEquals(363.315274961414, double0, 0.01);
      
      double double1 = StatUtils.populationVariance(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {363.315274961414}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double2 = StatUtils.sumDifference(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = StatUtils.geometricMean(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {363.315274961414}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(363.3152749614141, double3, 0.01);
      
      int int0 = 2;
      try { 
        StatUtils.variance(doubleArray1, 0.0, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 2017;
      // Undeclared exception!
      try { 
        StatUtils.sumLog((double[]) null, 2017, 2017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-835.4);
      doubleArray0[1] = (-864.058541601);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-490.043258313);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1982.71911;
      doubleArray0[8] = 3843.6134543207672;
      double double0 = StatUtils.varianceDifference(doubleArray0, doubleArray0, 6659.297020036927);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-835.4), (-864.058541601), 0.0, 0.0, 0.0, (-490.043258313), 0.0, 1982.71911, 3843.6134543207672}, doubleArray0, 0.01);
      assertEquals((-2.2351741790771484E-8), double0, 0.01);
      
      double double1 = StatUtils.product(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-835.4), (-864.058541601), 0.0, 0.0, 0.0, (-490.043258313), 0.0, 1982.71911, 3843.6134543207672}, doubleArray0, 0.01);
      assertEquals(-0.0, double1, 0.01);
      
      double double2 = StatUtils.min(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-835.4), (-864.058541601), 0.0, 0.0, 0.0, (-490.043258313), 0.0, 1982.71911, 3843.6134543207672}, doubleArray0, 0.01);
      assertEquals((-864.058541601), double2, 0.01);
      
      double double3 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {(-835.4), (-864.058541601), 0.0, 0.0, 0.0, (-490.043258313), 0.0, 1982.71911, 3843.6134543207672}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      try { 
        StatUtils.variance(doubleArray0, (-30.93383276123603), 247, 247);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 9.869604401089358;
      doubleArray0[1] = 1214.797367845757;
      double double0 = StatUtils.sumSq(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {9.869604401089358, 1214.797367845757}, doubleArray0, 0.01);
      assertEquals(1475830.0540160134, double0, 0.01);
      
      double double1 = StatUtils.min(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 1214.797367845757}, doubleArray0, 0.01);
      assertEquals(9.869604401089358, double1, 0.01);
      
      double double2 = StatUtils.mean(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 1214.797367845757}, doubleArray0, 0.01);
      assertEquals(612.3334861234232, double2, 0.01);
      
      double double3 = StatUtils.varianceDifference(doubleArray0, doubleArray0, 9.869604401089358);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 1214.797367845757}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.sumDifference(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 1214.797367845757}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      int int0 = (-984);
      try { 
        StatUtils.product(doubleArray0, (-984), (-984));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-984)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.variance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-692.46961473565);
      doubleArray0[0] = (-692.46961473565);
      doubleArray0[1] = 946.439858;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 535.0;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        StatUtils.sumDifference(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = (-3055);
      try { 
        StatUtils.geometricMean(doubleArray0, (-3055), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-3,055)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1729.250494227;
      doubleArray0[1] = (-952.9);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1833.6237;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      double double0 = StatUtils.sum(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1729.250494227, (-952.9), 0.0, 0.0, 1833.6237, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2607.974194227, double0, 0.01);
      
      int int0 = 2;
      try { 
        StatUtils.populationVariance(doubleArray0, 2, 2049);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.normalize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 50.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-500.8);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = StatUtils.mode(doubleArray0, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 0.0, (-500.8), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 50.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 50.0;
      doubleArray2[3] = (-500.8);
      doubleArray2[4] = 50.0;
      doubleArray2[5] = (-500.8);
      doubleArray2[6] = 50.0;
      double double0 = StatUtils.variance(doubleArray2, 0, 0);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, (-500.8), 50.0, (-500.8), 50.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.variance(doubleArray1, 2.0, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {50.0, 0.0, (-500.8), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.min(doubleArray2, 0, 0);
      assertEquals(7, doubleArray2.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, (-500.8), 50.0, (-500.8), 50.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = StatUtils.variance(doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, (-500.8), 50.0, (-500.8), 50.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(69967.77142857143, double3, 0.01);
      
      double[] doubleArray3 = StatUtils.mode(doubleArray2, 0, 1);
      assertEquals(1, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, (-500.8), 50.0, (-500.8), 50.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      
      double double4 = StatUtils.min(doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, (-500.8), 50.0, (-500.8), 50.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(50.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.max((double[]) null, 4057, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5013.087660623096;
      doubleArray0[1] = 735.4;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2163.3579341499258;
      double double0 = StatUtils.min(doubleArray0, 0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5013.087660623096, 735.4, Double.NEGATIVE_INFINITY, 1.0, 0.0, 2163.3579341499258}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 735.4;
      doubleArray1[2] = 5013.087660623096;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 5013.087660623096;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 735.4;
      doubleArray1[7] = (double) 0;
      double double1 = StatUtils.sumDifference(doubleArray1, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 735.4, 5013.087660623096, 1.0, 5013.087660623096, 0.0, 735.4, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.sumSq(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 735.4, 5013.087660623096, 1.0, 5013.087660623096, 0.0, 735.4, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5.134372310618308E7, double2, 0.01);
      
      double double3 = StatUtils.sum(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 735.4, 5013.087660623096, 1.0, 5013.087660623096, 0.0, 735.4, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11497.975321246191, double3, 0.01);
      
      double double4 = StatUtils.varianceDifference(doubleArray1, doubleArray1, (-1.0));
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 735.4, 5013.087660623096, 1.0, 5013.087660623096, 0.0, 735.4, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = StatUtils.sumSq(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {5013.087660623096, 735.4, Double.NEGATIVE_INFINITY, 1.0, 0.0, 2163.3579341499258}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      double double6 = StatUtils.product(doubleArray1, 0, 1);
      assertEquals(8, doubleArray1.length);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 735.4, 5013.087660623096, 1.0, 5013.087660623096, 0.0, 735.4, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = StatUtils.max(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertArrayEquals(new double[] {5013.087660623096, 735.4, Double.NEGATIVE_INFINITY, 1.0, 0.0, 2163.3579341499258}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5013.087660623096, double7, 0.01);
      
      try { 
        StatUtils.sum(doubleArray1, (-1630), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,630)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 456.784;
      doubleArray0[2] = 0.0;
      int int0 = (-1918);
      try { 
        StatUtils.populationVariance(doubleArray0, 529.64, (-1918), (-1918));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,918)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 1122;
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null, 1122, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        StatUtils.sumDifference(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient dimension {0}, must be at least {1}
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 1056.92763589;
      // Undeclared exception!
      try { 
        StatUtils.varianceDifference((double[]) null, (double[]) null, 1056.92763589);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatUtils.mean((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1908.74459741);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1908.74459741);
      doubleArray1[1] = (-1908.74459741);
      doubleArray1[2] = (-1908.74459741);
      doubleArray1[3] = (-1908.74459741);
      doubleArray1[4] = (-1908.74459741);
      doubleArray1[5] = (-1908.74459741);
      try { 
        StatUtils.varianceDifference(doubleArray0, doubleArray1, (-4253.145564032402));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 861.5;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 9.869604401089358;
      double double1 = StatUtils.min(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {861.5, 0.0, 9.869604401089358}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = 1555;
      try { 
        StatUtils.sum(doubleArray0, 1555, 1555);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 506.2411;
      try { 
        StatUtils.sumSq(doubleArray0, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1898.389322677659);
      doubleArray0[1] = 146.5231606211442;
      doubleArray0[2] = (-286.1);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2591.2;
      doubleArray0[6] = 6.96;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1898.389322677659), 146.5231606211442, (-286.1), Double.NEGATIVE_INFINITY, 0.0, 2591.2, 6.96, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.populationVariance(doubleArray1, 2591.2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1898.389322677659), 146.5231606211442, (-286.1), Double.NEGATIVE_INFINITY, 0.0, 2591.2, 6.96, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.varianceDifference(doubleArray1, doubleArray1, 0.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1898.389322677659), 146.5231606211442, (-286.1), Double.NEGATIVE_INFINITY, 0.0, 2591.2, 6.96, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int0 = 0;
      try { 
        StatUtils.sumSq(doubleArray0, 0, (-1175));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,175)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        StatUtils.mean(doubleArray0, 3127, 258);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2336.4656921);
      doubleArray0[1] = (-2491.33283722281);
      doubleArray0[2] = 3498.464279163442;
      doubleArray0[3] = (-992.2);
      double[] doubleArray1 = StatUtils.mode(doubleArray0, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2336.4656921), (-2491.33283722281), 3498.464279163442, (-992.2)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.variance(doubleArray1, (-2336.4656921));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2336.4656921), (-2491.33283722281), 3498.464279163442, (-992.2)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.min(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2336.4656921), (-2491.33283722281), 3498.464279163442, (-992.2)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-2491.33283722281), double1, 0.01);
      
      double double2 = StatUtils.variance(doubleArray0, 1936.353);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-2336.4656921), (-2491.33283722281), 3498.464279163442, (-992.2)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7847381.356700606, double2, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2491.33283722281);
      doubleArray2[1] = 3498.464279163442;
      doubleArray2[2] = (-2491.33283722281);
      doubleArray2[3] = 3736.2367852385205;
      doubleArray2[4] = 7847381.356700606;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = (-2336.4656921);
      doubleArray2[7] = (-992.2);
      double double3 = StatUtils.sumSq(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2491.33283722281), 3498.464279163442, (-2491.33283722281), 3736.2367852385205, 7847381.356700606, Double.NaN, (-2336.4656921), (-992.2)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double3, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-992.2);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1936.353;
      doubleArray3[3] = (-2491.33283722281);
      doubleArray3[4] = (-2491.33283722281);
      doubleArray3[5] = (double) 0;
      doubleArray3[6] = Double.NaN;
      doubleArray3[7] = (-2491.33283722281);
      try { 
        StatUtils.meanDifference(doubleArray0, doubleArray3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1409.1645584661871);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1409.1645584661871);
      try { 
        StatUtils.meanDifference(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = StatUtils.mean(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-3285.290979);
      doubleArray0[0] = (-3285.290979);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      int int0 = 2477;
      int int1 = (-3189);
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, 2477, (-3189));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-3,189)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 50.0;
      doubleArray0[1] = 1052.2129459711546;
      doubleArray0[2] = 1815.2715531;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2710.546089367546);
      double[] doubleArray1 = StatUtils.mode(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {50.0, 1052.2129459711546, 1815.2715531, 1.0, (-2710.546089367546)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2710.546089367546), 1.0, 50.0, 1052.2129459711546, 1815.2715531}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, 0, (-1160));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,160)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3607.31668276976;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = StatUtils.min(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3607.31668276976, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1586.892);
      doubleArray0[3] = (-3016.18937);
      double double0 = StatUtils.sum(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1586.892), (-3016.18937)}, doubleArray0, 0.01);
      assertEquals((-4603.08137), double0, 0.01);
      
      try { 
        StatUtils.sumSq(doubleArray0, 1672, 1672);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2481.5721326568);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1192.734161241689;
      doubleArray0[4] = (-1005.62);
      doubleArray0[5] = (-491.6118113016193);
      doubleArray0[6] = 2250.79662781321;
      double double0 = StatUtils.sumSq(doubleArray0, 0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2481.5721326568), 0.0, 1192.734161241689, (-1005.62), (-491.6118113016193), 2250.79662781321}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3506.872958307;
      doubleArray0[1] = 1847.5011;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 406.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2826.217099488;
      doubleArray0[6] = (-2725.4245859347);
      doubleArray0[7] = 0.5;
      double double0 = StatUtils.sum(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3506.872958307, 1847.5011, 0.0, 406.0, 0.0, 2826.217099488, (-2725.4245859347), 0.5}, doubleArray0, 0.01);
      assertEquals(5861.666571860299, double0, 0.01);
      
      try { 
        StatUtils.min(doubleArray0, (-2617), (-2617));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-2,617)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1720.98;
      doubleArray0[1] = 9.869604401089358;
      doubleArray0[2] = (-2025.74);
      double double0 = StatUtils.min(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1720.98, 9.869604401089358, (-2025.74)}, doubleArray0, 0.01);
      assertEquals((-2025.74), double0, 0.01);
      
      double double1 = StatUtils.variance(doubleArray0, 0, 0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1720.98, 9.869604401089358, (-2025.74)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.variance(doubleArray0, 0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1720.98, 9.869604401089358, (-2025.74)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = StatUtils.geometricMean(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {1720.98, 9.869604401089358, (-2025.74)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = StatUtils.populationVariance(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertArrayEquals(new double[] {1720.98, 9.869604401089358, (-2025.74)}, doubleArray0, 0.01);
      assertEquals(2345501.7784285136, double4, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2345501.7784285136;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-814.598);
      doubleArray1[4] = (double) 0;
      double double5 = StatUtils.sumLog(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {2345501.7784285136, Double.NaN, 0.0, (-814.598), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = StatUtils.mean(doubleArray1, 0, 0);
      assertEquals(5, doubleArray1.length);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2345501.7784285136, Double.NaN, 0.0, (-814.598), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = StatUtils.variance(doubleArray1, (double) 0);
      assertEquals(5, doubleArray1.length);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2345501.7784285136, Double.NaN, 0.0, (-814.598), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2199.29712348);
      doubleArray0[2] = (-1698.08632642);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 5229.703819;
      doubleArray0[7] = 0.0;
      double double0 = StatUtils.varianceDifference(doubleArray0, doubleArray0, (-1702.676281877281));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = StatUtils.product(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.variance(doubleArray0, 926.0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(4978237.098265824, double2, 0.01);
      
      double double3 = StatUtils.sumSq(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(3.507021104378516E7, double3, 0.01);
      
      double double4 = StatUtils.max(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(5229.703819, double4, 0.01);
      
      double double5 = StatUtils.variance(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertArrayEquals(new double[] {0.0, (-2199.29712348), (-1698.08632642), 0.0, 2.0, 0.0, 5229.703819, 0.0}, doubleArray0, 0.01);
      assertEquals(4978237.098265822, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = 439.924800131;
      doubleArray0[2] = 439.924800131;
      doubleArray0[3] = (-1239.41756920903);
      double double2 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 439.924800131, (-1239.41756920903)}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = StatUtils.variance(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 439.924800131, (-1239.41756920903)}, doubleArray0, 0.01);
      assertEquals(523297.5228941022, double3, 0.01);
      
      double double4 = StatUtils.geometricMean(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 439.924800131, (-1239.41756920903)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = StatUtils.populationVariance(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 439.924800131, (-1239.41756920903)}, doubleArray0, 0.01);
      assertEquals(392473.14217057667, double5, 0.01);
      
      int int0 = 510;
      try { 
        StatUtils.sumLog(doubleArray0, 510, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.max((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5773502691896257), (-0.5773502691896257), 1.1547005383792512}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.varianceDifference(doubleArray0, doubleArray1, (-1569.89));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5773502691896257), (-0.5773502691896257), 1.1547005383792512}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.1786327948793769, double0, 0.01);
      
      double double1 = StatUtils.product(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.product(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = StatUtils.sum(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-2.0), double3, 0.01);
      
      double double4 = StatUtils.populationVariance(doubleArray1, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5773502691896257), (-0.5773502691896257), 1.1547005383792512}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.6666666666666664, double4, 0.01);
      
      double double5 = StatUtils.min(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5773502691896257), (-0.5773502691896257), 1.1547005383792512}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-0.5773502691896257), double5, 0.01);
      
      try { 
        StatUtils.min(doubleArray0, 1584, 1584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.mean((double[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = StatUtils.populationVariance(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = 196;
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, 196, 196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 196
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2855.82027168);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1243.3682661735;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      double double0 = (-332.974);
      doubleArray0[5] = (-332.974);
      double double1 = StatUtils.variance(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-2855.82027168), (-1.0), 1243.3682661735, 0.0, 1.0, (-332.974)}, doubleArray0, 0.01);
      assertEquals(1836353.4727316457, double1, 0.01);
      
      double double2 = StatUtils.sumDifference(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-2855.82027168), (-1.0), 1243.3682661735, 0.0, 1.0, (-332.974)}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2855.82027168), (-1.0), 1243.3682661735, 0.0, 1.0, (-332.974)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.8681595416931818), 0.23853044809027982, 1.1568012744387348, 0.23926838946287057, 0.24000633083546133, (-0.00644690113416465)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = 0;
      try { 
        StatUtils.percentile(doubleArray1, 0, 0, (-951.844578));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: -951.845, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        StatUtils.meanDifference(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient dimension {0}, must be at least {1}
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double double0 = StatUtils.variance(doubleArray0, 0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.populationVariance(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, 1150, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1150
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = StatUtils.sumLog(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = StatUtils.variance(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.variance(doubleArray0, 0.0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = StatUtils.sumLog(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.min(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = StatUtils.min(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = StatUtils.sumLog(doubleArray0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      try { 
        StatUtils.variance(doubleArray0, 0.0, 2, (-1230));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,230)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = 1;
      double double0 = StatUtils.sum(doubleArray0, 1, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = StatUtils.sumLog(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double double3 = StatUtils.sum(doubleArray0, 0, 1);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      try { 
        StatUtils.variance(doubleArray0, (-981), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-981)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.3333333333333333;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.3333333333333333, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7071067811865475, (-0.7071067811865476)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.product(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.3333333333333333, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7071067811865475, (-0.7071067811865476)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-0.5), double0, 0.01);
      
      double double1 = StatUtils.geometricMean(doubleArray0, 0, 0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.3333333333333333, (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.sumDifference(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.3333333333333333, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7071067811865475, (-0.7071067811865476)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-0.6666666666666665), double2, 0.01);
      
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1453.0);
      doubleArray0[0] = (-1453.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5440.0);
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = 0.0;
      doubleArray0[5] = 0.0;
      double double3 = StatUtils.variance(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-1453.0), 0.0, 0.0, (-5440.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4757180.166666666, double3, 0.01);
      
      int int0 = 45;
      int int1 = 646;
      try { 
        StatUtils.product(doubleArray0, 45, 646);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      double double0 = StatUtils.variance(doubleArray0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.populationVariance(doubleArray0, (double) 0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = 332.007361926;
      double double3 = StatUtils.variance(doubleArray0, 332.007361926, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = StatUtils.sum(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      try { 
        StatUtils.sumLog(doubleArray0, 0, (-490));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-490)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.6666666666666666;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-488.7292074659576);
      doubleArray0[3] = 0.0;
      double double0 = StatUtils.populationVariance(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.6666666666666666, 0.0, (-488.7292074659576), 0.0}, doubleArray0, 0.01);
      assertEquals(44826.35543547064, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.6666666666666666;
      doubleArray0[1] = (-578.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 509.5;
      try { 
        StatUtils.min(doubleArray0, 189, 5373);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = (-5041.4);
      doubleArray0[2] = 50.0;
      doubleArray0[3] = 860.4;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1605.0);
      double double0 = StatUtils.percentile(doubleArray0, 0.625);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.625, (-5041.4), 50.0, 860.4, 0.0, (-1605.0)}, doubleArray0, 0.01);
      assertEquals((-5041.4), double0, 0.01);
      
      try { 
        StatUtils.populationVariance(doubleArray0, 1.0, 1844, 214);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3783.772334200792;
      doubleArray0[3] = 640.24;
      doubleArray0[4] = (-1852.662650866);
      double double0 = StatUtils.variance(doubleArray0, 0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3783.772334200792, 640.24, (-1852.662650866)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        StatUtils.max(doubleArray0, 628, 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = (-1970.4864830114);
      doubleArray0[1] = (-1970.4864830114);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = 973.518076521638;
      doubleArray0[3] = 973.518076521638;
      int int0 = 2895;
      try { 
        StatUtils.min(doubleArray0, 2895, 2895);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = (-935.5602971);
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null, (-935.5602971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-84);
      // Undeclared exception!
      try { 
        StatUtils.sumSq((double[]) null, (-84), (-84));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1522.397952;
      doubleArray0[1] = 0.0;
      try { 
        StatUtils.percentile(doubleArray0, 0, (-2828), (-2518.8685895751));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-2,828)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1373.71463640735);
      double double0 = StatUtils.populationVariance(doubleArray0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1373.71463640735)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        StatUtils.mean(doubleArray0, 607, (-433));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-433)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 506.2411;
      try { 
        StatUtils.sumSq(doubleArray0, 286, 2396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 720.852;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2112.3);
      doubleArray0[3] = 9.869604401089358;
      double double0 = StatUtils.min(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {720.852, 0.0, (-2112.3), 9.869604401089358}, doubleArray0, 0.01);
      assertEquals((-2112.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      double double0 = (-57.19477232205);
      doubleArray0[1] = (-57.19477232205);
      double double1 = (-1710.732);
      doubleArray0[2] = (-1710.732);
      int int0 = (-2468);
      try { 
        StatUtils.geometricMean(doubleArray0, (-2468), (-2468));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-2,468)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-880.88);
      doubleArray0[0] = (-880.88);
      doubleArray0[1] = (-627.0);
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      double double2 = (-2258.2);
      doubleArray0[3] = (-2258.2);
      doubleArray0[4] = (-1522.87419);
      double double3 = StatUtils.sumDifference(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-880.88), (-627.0), 0.0, (-2258.2), (-1522.87419)}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.variance(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {(-880.88), (-627.0), 0.0, (-2258.2), (-1522.87419)}, doubleArray0, 0.01);
      assertEquals(748271.0820461111, double4, 0.01);
      
      double double5 = StatUtils.geometricMean(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertArrayEquals(new double[] {(-880.88), (-627.0), 0.0, (-2258.2), (-1522.87419)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-880.88), (-627.0), 0.0, (-2258.2), (-1522.87419)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.2045149022152098, 0.4980087546065341, 1.2228419255903074, (-1.3877135237168006), (-0.5376520586952511)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 748271.0820461111;
      try { 
        StatUtils.percentile(doubleArray2, (-627.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: -627, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1159.2869813;
      doubleArray0[0] = 1159.2869813;
      double double1 = 1.0;
      doubleArray0[1] = 1.0;
      double double2 = 0.5;
      doubleArray0[2] = 0.5;
      double double3 = StatUtils.sum(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {1159.2869813, 1.0, 0.5}, doubleArray0, 0.01);
      assertEquals(1160.7869813, double3, 0.01);
      
      int int0 = 163;
      try { 
        StatUtils.geometricMean(doubleArray0, 163, 163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1281.30308156666;
      try { 
        StatUtils.sum(doubleArray0, (-4249), (-4249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-4,249)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7071067811865475, (-0.7071067811865475)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-631.463);
      doubleArray0[1] = (-2253.786757);
      doubleArray0[2] = (-681.5970483729);
      try { 
        StatUtils.percentile(doubleArray0, (-631.463));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: -631.463, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3349.0489170570886);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        StatUtils.geometricMean(doubleArray0, 1568, 1568);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1216.772398485841;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 0.6666666666666666;
      double double0 = StatUtils.product(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1216.772398485841, 100.0, 0.6666666666666666}, doubleArray0, 0.01);
      assertEquals(81118.15989905606, double0, 0.01);
      
      double double1 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1216.772398485841, 100.0, 0.6666666666666666}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = 290;
      try { 
        StatUtils.product(doubleArray0, 290, (-1783));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,783)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = StatUtils.product(doubleArray0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = StatUtils.product(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-250.439);
      doubleArray0[1] = 3066.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-1.0);
      double double0 = StatUtils.populationVariance(doubleArray0, (-777.905159785097), 0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-250.439), 3066.0, Double.POSITIVE_INFINITY, (-1.0)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-777.905159785097);
      doubleArray1[6] = (-777.905159785097);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (-250.439);
      double double1 = StatUtils.max(doubleArray1, 2, 0);
      assertEquals(9, doubleArray1.length);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, Double.NaN, (-1.0), Double.POSITIVE_INFINITY, 0.0, (-777.905159785097), (-777.905159785097), 0.0, (-250.439)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-550.827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 440.8449844;
      double double0 = StatUtils.populationVariance(doubleArray0, 1633.584714842688, 0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-550.827), 0.0, 440.8449844}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2611.497;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 379.0;
      doubleArray0[3] = 450.1503980989665;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      double double0 = StatUtils.variance(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2611.497, 0.0, 379.0, 450.1503980989665, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(912671.0359565384, double0, 0.01);
      
      double double1 = StatUtils.varianceDifference(doubleArray0, doubleArray0, (-733.4665));
      assertEquals(7, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2611.497, 0.0, 379.0, 450.1503980989665, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7.761021455128987E-11, double1, 0.01);
      
      double double2 = StatUtils.sumDifference(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {2611.497, 0.0, 379.0, 450.1503980989665, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-739.6050233201);
      doubleArray0[0] = (-739.6050233201);
      double double1 = (-169.89);
      doubleArray0[1] = (-169.89);
      doubleArray0[2] = 0.0;
      double double2 = StatUtils.sumSq(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {(-739.6050233201), (-169.89), 0.0}, doubleArray0, 0.01);
      assertEquals(575878.2026203257, double2, 0.01);
      
      int int0 = (-2429);
      try { 
        StatUtils.populationVariance(doubleArray0, (-2429), (-2429));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-2,429)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1640.4042028375338);
      doubleArray0[0] = (-1640.4042028375338);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1260.5530692314;
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 100.0;
      double double2 = 2113.0;
      doubleArray0[5] = 2113.0;
      double double3 = StatUtils.varianceDifference(doubleArray0, doubleArray0, 2.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 2.0, 1260.5530692314, 0.0, 100.0, 2113.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = StatUtils.sumLog(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 2.0, 1260.5530692314, 0.0, 100.0, 2113.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double[] doubleArray1 = StatUtils.mode(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1640.4042028375338), 2.0, 1260.5530692314, 0.0, 100.0, 2113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 0.0, 2.0, 100.0, 1260.5530692314, 2113.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double5 = StatUtils.variance(doubleArray1, 1988.6581700861614);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 2.0, 1260.5530692314, 0.0, 100.0, 2113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 0.0, 2.0, 100.0, 1260.5530692314, 2113.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1638679.5524129258, double5, 0.01);
      
      double[] doubleArray2 = StatUtils.mode(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1640.4042028375338), 2.0, 1260.5530692314, 0.0, 100.0, 2113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1640.4042028375338), 0.0, 2.0, 100.0, 1260.5530692314, 2113.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      try { 
        StatUtils.sumLog(doubleArray1, (-1692), (-1692));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,692)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 737;
      int int1 = 0;
      try { 
        StatUtils.variance(doubleArray0, 3193.196443161334, 737, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 717.811809686;
      double double0 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {717.811809686}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = (-3143);
      int int1 = 0;
      try { 
        StatUtils.max(doubleArray0, (-3143), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-3,143)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = (-1.0);
      doubleArray0[1] = (-1.0);
      double double1 = StatUtils.sumLog(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = 3636;
      try { 
        StatUtils.variance(doubleArray0, 3636, 3636);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-697.0);
      doubleArray0[1] = (-1311.576595117137);
      doubleArray0[2] = (-1304.058246);
      doubleArray0[3] = 0.0;
      try { 
        StatUtils.populationVariance(doubleArray0, (-245), (-1659));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-245)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatUtils.sumSq((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3238.65169);
      doubleArray0[1] = (-861.703023879509);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3410.3483864912);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = StatUtils.mode(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3238.65169), (-861.703023879509), 0.0, (-3410.3483864912), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.variance(doubleArray1, 0, 0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3238.65169), (-861.703023879509), 0.0, (-3410.3483864912), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4493.71;
      double double0 = StatUtils.variance(doubleArray0, 1428.0533532687);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4493.71}, doubleArray0, 0.01);
      assertEquals(1.009671478205E7, double0, 0.01);
      
      double double1 = StatUtils.mean(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 4493.71}, doubleArray0, 0.01);
      assertEquals(2246.855, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2137.17777556904);
      doubleArray0[1] = 0.0;
      try { 
        StatUtils.sumLog(doubleArray0, (-1454), (-1454));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,454)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = StatUtils.mode(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.min(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = StatUtils.mean(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      double double2 = StatUtils.varianceDifference(doubleArray2, doubleArray2, 0.0);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 124.06;
      doubleArray0[2] = (-101.1180844057579);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        StatUtils.varianceDifference(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 299.26809492423;
      doubleArray0[1] = (-1276.23);
      doubleArray0[2] = 862.33;
      doubleArray0[3] = 0.0;
      double double0 = StatUtils.variance(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {299.26809492423, (-1276.23), 862.33, 0.0}, doubleArray0, 0.01);
      assertEquals(819550.7720080843, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatUtils.populationVariance((double[]) null, 0.0, 1084, 4068);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 864.25;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      try { 
        StatUtils.variance(doubleArray0, 1.0, 0, (-1154));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,154)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5924.0440807095265);
      double double0 = StatUtils.sumLog(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5924.0440807095265)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      try { 
        StatUtils.max(doubleArray0, (-4342), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-4,342)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-51.1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5790297768522832E146;
      doubleArray0[4] = 8.281321669236493E188;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1751.47958847957);
      double[] doubleArray1 = StatUtils.mode(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = StatUtils.sumSq(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = StatUtils.normalize(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = StatUtils.mode(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      double double1 = StatUtils.geometricMean(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = StatUtils.variance(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, (-51.1), 0.0, 1.5790297768522832E146, 8.281321669236493E188, 0.0, 1.0, (-1751.47958847957)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3527.365392564;
      doubleArray0[1] = 963.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 399.5660721;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5607312917709351;
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray0, (-639), (-639));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-639)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-710.870961);
      doubleArray0[0] = (-710.870961);
      double double1 = (-3908.636501);
      doubleArray0[1] = (-3908.636501);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3275.97776594701);
      double double2 = (-1.8374207360194882E-11);
      doubleArray0[4] = (-1.8374207360194882E-11);
      doubleArray0[5] = (-97.7143031985387);
      int int0 = 2;
      double double3 = StatUtils.sumSq(doubleArray0, 2, 2);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {(-710.870961), (-3908.636501), 0.0, (-3275.97776594701), (-1.8374207360194882E-11), (-97.7143031985387)}, doubleArray0, 0.01);
      assertEquals(1.0732030322979163E7, double3, 0.01);
      
      int int1 = 937;
      try { 
        StatUtils.geometricMean(doubleArray0, 23, 937);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StatUtils.mean((double[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.625;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 950.19;
      doubleArray0[4] = (-72.7085892);
      doubleArray0[5] = 1753.0033413408619;
      doubleArray0[6] = (-1430.0);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = StatUtils.normalize(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double double0 = StatUtils.variance(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.9999999999999999, double0, 0.01);
      
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6026069.680420681, double1, 0.01);
      
      int int0 = 0;
      double[] doubleArray3 = StatUtils.mode(doubleArray1, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      double double2 = StatUtils.percentile(doubleArray1, 0.9999999999999999);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals((-1.7292991460428633), double2, 0.01);
      
      double double3 = StatUtils.product(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = StatUtils.sumLog(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(Double.NaN, double4, 0.01);
      
      double[] doubleArray4 = StatUtils.mode(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotNull(doubleArray4);
      
      double double5 = StatUtils.min(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.1637512181656394), 0.8753677110679028, (-0.1644351622145154), (-0.1644351622145154), (-0.24400093323133415), 1.7538947625372792, (-1.7292991460428633), (-0.16334085173631377)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertEquals((-1.7292991460428633), double5, 0.01);
      
      double double6 = StatUtils.populationVariance(doubleArray0, (-2813.984101));
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(730679.5247995798, double6, 0.01);
      
      double double7 = StatUtils.max(doubleArray4);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertArrayEquals(new double[] {0.625, 950.19, 0.0, 0.0, (-72.7085892), 1753.0033413408619, (-1430.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(0.0, double7, 0.01);
      
      int int1 = 392;
      try { 
        StatUtils.populationVariance(doubleArray0, 392, 392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.375;
      doubleArray0[4] = 1256.0;
      double double0 = StatUtils.sumSq(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.375, 0.0, 0.0, 1256.0}, doubleArray0, 0.01);
      assertEquals(1577536.140625, double0, 0.01);
      
      try { 
        StatUtils.sumLog(doubleArray0, (-387), (-387));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-387)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.375;
      doubleArray0[2] = 0.0;
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1256.0;
      double double1 = StatUtils.sumSq(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.375, 0.0, Double.NEGATIVE_INFINITY, 1256.0}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      int int0 = 21;
      try { 
        StatUtils.percentile(doubleArray0, 21, 1117, 0.375);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (-835.4);
      doubleArray0[1] = (-864.058541601);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-490.043258313);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1982.71911;
      doubleArray0[8] = 3843.6134543207672;
      double double0 = StatUtils.varianceDifference(doubleArray0, doubleArray0, 6659.297020036927);
      assertEquals(20, doubleArray0.length);
      assertEquals((-1.8822519402754933E-8), double0, 0.01);
      
      double double1 = StatUtils.product(doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(-0.0, double1, 0.01);
      
      double double2 = StatUtils.min(doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-864.058541601), double2, 0.01);
      
      double double3 = StatUtils.meanDifference(doubleArray0, doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      try { 
        StatUtils.variance(doubleArray0, (-30.93383276123603), 247, 247);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 138;
      // Undeclared exception!
      try { 
        StatUtils.variance((double[]) null, 138, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      StatUtils.geometricMean(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NaN;
      doubleArray1[0] = Double.NaN;
      StatUtils.meanDifference(doubleArray1, doubleArray1);
      StatUtils.sum(doubleArray0);
      int int0 = 0;
      int int1 = (-2907);
      // Undeclared exception!
      try { 
        StatUtils.mode(doubleArray1, 0, (-2907));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-2,907)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      StatUtils.geometricMean(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      StatUtils.meanDifference(doubleArray1, doubleArray1);
      StatUtils.sum(doubleArray0);
      double[] doubleArray2 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StatUtils.mode((double[]) null, 0, (-2907));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1322.917;
      int int0 = 0;
      StatUtils.populationVariance(doubleArray0, 1322.917, 0, 0);
      int int1 = 1053;
      int int2 = 0;
      // Undeclared exception!
      try { 
        StatUtils.max((double[]) null, 1053, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = (-701);
      // Undeclared exception!
      try { 
        StatUtils.min((double[]) null, (-701), (-701));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }
}

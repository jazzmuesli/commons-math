/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:01:38 GMT 2019
 */

package org.apache.commons.math4.stat.interval;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.interval.ClopperPearsonInterval;
import org.apache.commons.math4.stat.interval.ConfidenceInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClopperPearsonInterval_ESTest extends ClopperPearsonInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      ConfidenceInterval confidenceInterval0 = clopperPearsonInterval0.createInterval(222, 85, 1.0E-14);
      assertEquals(0.38530777938858257, confidenceInterval0.getUpperBound(), 0.01);
      assertEquals(0.380810047001107, confidenceInterval0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      // Undeclared exception!
      try { 
        clopperPearsonInterval0.createInterval(1306, 0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bracketing: f(0)=\uFFFD, f(\uFFFD)=\uFFFD
         //
         verifyException("org.apache.commons.numbers.rootfinder.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      // Undeclared exception!
      try { 
        clopperPearsonInterval0.createInterval((-1), 279, 279);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of trials (-1)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      // Undeclared exception!
      try { 
        clopperPearsonInterval0.createInterval(232, 2138, (-618.53274966));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of successes (2,138) must be less than or equal to population size (232)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      ConfidenceInterval confidenceInterval0 = clopperPearsonInterval0.createInterval(254, 254, 0.4449339357928196);
      assertEquals(0.9949661952723243, confidenceInterval0.getLowerBound(), 0.01);
      assertEquals(1.0, confidenceInterval0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClopperPearsonInterval clopperPearsonInterval0 = new ClopperPearsonInterval();
      ConfidenceInterval confidenceInterval0 = clopperPearsonInterval0.createInterval(254, 0, 0.4449339357928196);
      assertEquals(0.0, confidenceInterval0.getLowerBound(), 0.01);
      assertEquals(0.00503380472767565, confidenceInterval0.getUpperBound(), 0.01);
  }
}

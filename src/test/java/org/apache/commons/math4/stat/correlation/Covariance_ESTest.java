/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:27:25 GMT 2019
 */

package org.apache.commons.math4.stat.correlation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.stat.correlation.Covariance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Covariance_ESTest extends Covariance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 46.9;
      doubleArray1[2] = (-2118.463848);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-452.55635306379);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 46.9;
      doubleArray2[1] = (-2118.463848);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-452.55635306379);
      doubleArray0[1] = doubleArray2;
      Covariance covariance0 = new Covariance(doubleArray0);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray3 = new double[0][2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix(doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = covariance0.getCovarianceMatrix();
      assertEquals(0, covariance0.getN());
      assertNull(realMatrix0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1214.279);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = covariance0.getCovarianceMatrix();
      assertEquals(0, covariance0.getN());
      assertNull(realMatrix0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1969.6444);
      double double0 = 986.08911076;
      doubleArray1[1] = 986.08911076;
      double double1 = 151.76255;
      doubleArray1[2] = 151.76255;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-1099.0);
      double double2 = 0.0;
      doubleArray1[5] = 0.0;
      double double3 = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 151.76255;
      doubleArray2[1] = 151.76255;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1099.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (-1099.0);
      try { 
        covariance0.covariance(doubleArray2, doubleArray1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = null;
      boolean boolean0 = true;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-366.99);
      doubleArray1[1] = 2177.776832937125;
      doubleArray1[2] = (-1405.0);
      doubleArray1[3] = 740.183;
      doubleArray0[0] = doubleArray1;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 913.0;
      doubleArray1[2] = (-1835.472981114);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1835.472981114);
      doubleArray2[1] = 913.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      boolean boolean0 = false;
      Covariance covariance0 = new Covariance(doubleArray0, false);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getColumnDimension();
      double double0 = covariance0.covariance(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {913.0, 0.0, (-1835.472981114)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1835.472981114), 913.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-979719.482692766), double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = (-1835.472981114);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 913.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      Covariance covariance0 = new Covariance(doubleArray0, false);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0);
      assertEquals(2, covariance0.getN());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(2101265.032199757, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(blockRealMatrix0);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(2, covariance0.getN());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(2101265.032199757, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(3, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(3, blockRealMatrix1.getColumnDimension());
      assertEquals(8.848928666831533E11, blockRealMatrix1.getFrobeniusNorm(), 0.01);
      assertTrue(blockRealMatrix1.isSquare());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix1);
      assertEquals(2, doubleArray0.length);
      
      int int0 = covariance0.getN();
      assertEquals(2, int0);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix2 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0, false);
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix0));
      assertNotSame(blockRealMatrix2, blockRealMatrix1);
      assertNotSame(blockRealMatrix2, blockRealMatrix0);
      assertEquals(2, covariance0.getN());
      assertEquals(1050632.5160998786, blockRealMatrix2.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix2.getColumnDimension());
      assertFalse(blockRealMatrix2.isTransposable());
      assertTrue(blockRealMatrix2.isSquare());
      assertEquals(3, blockRealMatrix2.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix2);
      assertEquals(2, doubleArray0.length);
      
      double double0 = covariance0.covariance(doubleArray1, doubleArray1, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-1835.472981114)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(748658.0143110033, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int1 = covariance0.getN();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix3 = (BlockRealMatrix)covariance0.getCovarianceMatrix();
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix0));
      assertTrue(blockRealMatrix3.equals((Object)blockRealMatrix2));
      assertNotSame(blockRealMatrix3, blockRealMatrix2);
      assertNotSame(blockRealMatrix3, blockRealMatrix1);
      assertNotSame(blockRealMatrix3, blockRealMatrix0);
      assertEquals(2, covariance0.getN());
      assertEquals(1050632.5160998786, blockRealMatrix3.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix3.getColumnDimension());
      assertTrue(blockRealMatrix3.isSquare());
      assertEquals(3, blockRealMatrix3.getRowDimension());
      assertFalse(blockRealMatrix3.isTransposable());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix3);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix4 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(blockRealMatrix3);
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix2));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix0));
      assertTrue(blockRealMatrix3.equals((Object)blockRealMatrix2));
      assertNotSame(blockRealMatrix4, blockRealMatrix1);
      assertNotSame(blockRealMatrix4, blockRealMatrix2);
      assertNotSame(blockRealMatrix4, blockRealMatrix0);
      assertNotSame(blockRealMatrix4, blockRealMatrix3);
      assertNotSame(blockRealMatrix3, blockRealMatrix2);
      assertNotSame(blockRealMatrix3, blockRealMatrix1);
      assertNotSame(blockRealMatrix3, blockRealMatrix0);
      assertNotSame(blockRealMatrix3, blockRealMatrix4);
      assertEquals(3, blockRealMatrix4.getRowDimension());
      assertFalse(blockRealMatrix4.isTransposable());
      assertEquals(2.2122321667078833E11, blockRealMatrix4.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix4.getColumnDimension());
      assertTrue(blockRealMatrix4.isSquare());
      assertEquals(2, covariance0.getN());
      assertEquals(1050632.5160998786, blockRealMatrix3.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix3.getColumnDimension());
      assertTrue(blockRealMatrix3.isSquare());
      assertEquals(3, blockRealMatrix3.getRowDimension());
      assertFalse(blockRealMatrix3.isTransposable());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix4);
      assertEquals(2, doubleArray0.length);
      
      double double1 = covariance0.covariance(doubleArray2, doubleArray1, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-1835.472981114)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 913.0, 0.0}, doubleArray2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(186198.53686189803, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      BlockRealMatrix blockRealMatrix5 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(blockRealMatrix4, false);
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix2));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix4));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix2));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix4));
      assertTrue(blockRealMatrix3.equals((Object)blockRealMatrix2));
      assertNotSame(blockRealMatrix4, blockRealMatrix5);
      assertNotSame(blockRealMatrix4, blockRealMatrix1);
      assertNotSame(blockRealMatrix4, blockRealMatrix2);
      assertNotSame(blockRealMatrix4, blockRealMatrix0);
      assertNotSame(blockRealMatrix4, blockRealMatrix3);
      assertNotSame(blockRealMatrix5, blockRealMatrix4);
      assertNotSame(blockRealMatrix5, blockRealMatrix0);
      assertNotSame(blockRealMatrix5, blockRealMatrix1);
      assertNotSame(blockRealMatrix5, blockRealMatrix2);
      assertNotSame(blockRealMatrix5, blockRealMatrix3);
      assertNotSame(blockRealMatrix3, blockRealMatrix2);
      assertNotSame(blockRealMatrix3, blockRealMatrix1);
      assertNotSame(blockRealMatrix3, blockRealMatrix0);
      assertNotSame(blockRealMatrix3, blockRealMatrix5);
      assertNotSame(blockRealMatrix3, blockRealMatrix4);
      assertEquals(3, blockRealMatrix4.getRowDimension());
      assertFalse(blockRealMatrix4.isTransposable());
      assertEquals(2.2122321667078833E11, blockRealMatrix4.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix4.getColumnDimension());
      assertTrue(blockRealMatrix4.isSquare());
      assertEquals(3, blockRealMatrix5.getRowDimension());
      assertTrue(blockRealMatrix5.isSquare());
      assertFalse(blockRealMatrix5.isTransposable());
      assertEquals(3, blockRealMatrix5.getColumnDimension());
      assertEquals(6.538816865243237E21, blockRealMatrix5.getFrobeniusNorm(), 0.01);
      assertEquals(2, covariance0.getN());
      assertEquals(1050632.5160998786, blockRealMatrix3.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix3.getColumnDimension());
      assertTrue(blockRealMatrix3.isSquare());
      assertEquals(3, blockRealMatrix3.getRowDimension());
      assertFalse(blockRealMatrix3.isTransposable());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix5);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[2][0];
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 913.0;
      doubleArray1[2] = (-1835.472981114);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 913.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      Covariance covariance0 = new Covariance(doubleArray0, false);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.getCovarianceMatrix();
      assertEquals(2, covariance0.getN());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(1259024.7660998786, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertEquals(2, covariance0.getN());
      assertEquals(3, blockRealMatrix1.getColumnDimension());
      assertTrue(blockRealMatrix1.isSquare());
      assertEquals(3, blockRealMatrix1.getRowDimension());
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(2518049.532199757, blockRealMatrix1.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix1);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix2 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0, false);
      assertTrue(blockRealMatrix2.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix2.equals((Object)blockRealMatrix1));
      assertNotSame(blockRealMatrix2, blockRealMatrix0);
      assertNotSame(blockRealMatrix2, blockRealMatrix1);
      assertEquals(2, covariance0.getN());
      assertFalse(blockRealMatrix2.isTransposable());
      assertEquals(3, blockRealMatrix2.getRowDimension());
      assertEquals(1259024.7660998786, blockRealMatrix2.getFrobeniusNorm(), 0.01);
      assertTrue(blockRealMatrix2.isSquare());
      assertEquals(3, blockRealMatrix2.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix2);
      assertEquals(2, doubleArray0.length);
      
      int int0 = covariance0.getN();
      assertEquals(2, int0);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix3 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0, false);
      assertTrue(blockRealMatrix3.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix3.equals((Object)blockRealMatrix1));
      assertTrue(blockRealMatrix3.equals((Object)blockRealMatrix2));
      assertNotSame(blockRealMatrix3, blockRealMatrix2);
      assertNotSame(blockRealMatrix3, blockRealMatrix1);
      assertNotSame(blockRealMatrix3, blockRealMatrix0);
      assertEquals(2, covariance0.getN());
      assertFalse(blockRealMatrix3.isTransposable());
      assertEquals(3, blockRealMatrix3.getColumnDimension());
      assertTrue(blockRealMatrix3.isSquare());
      assertEquals(1259024.7660998786, blockRealMatrix3.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix3.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix3);
      assertEquals(2, doubleArray0.length);
      
      double double0 = covariance0.covariance(doubleArray1, doubleArray1, false);
      assertArrayEquals(new double[] {913.0, 0.0, (-1835.472981114)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1306292.6435903548, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int1 = covariance0.getN();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix4 = (BlockRealMatrix)covariance0.getCovarianceMatrix();
      assertTrue(blockRealMatrix4.equals((Object)blockRealMatrix2));
      assertTrue(blockRealMatrix4.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix1));
      assertSame(blockRealMatrix4, blockRealMatrix0);
      assertNotSame(blockRealMatrix4, blockRealMatrix3);
      assertNotSame(blockRealMatrix4, blockRealMatrix2);
      assertNotSame(blockRealMatrix4, blockRealMatrix1);
      assertEquals(1259024.7660998786, blockRealMatrix4.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix4.getRowDimension());
      assertFalse(blockRealMatrix4.isTransposable());
      assertEquals(3, blockRealMatrix4.getColumnDimension());
      assertTrue(blockRealMatrix4.isSquare());
      assertEquals(2, covariance0.getN());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix4);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix5 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(blockRealMatrix4);
      assertTrue(blockRealMatrix4.equals((Object)blockRealMatrix2));
      assertTrue(blockRealMatrix4.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix4.equals((Object)blockRealMatrix1));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix0));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix3));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix4));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix2));
      assertFalse(blockRealMatrix5.equals((Object)blockRealMatrix1));
      assertSame(blockRealMatrix4, blockRealMatrix0);
      assertNotSame(blockRealMatrix4, blockRealMatrix3);
      assertNotSame(blockRealMatrix4, blockRealMatrix5);
      assertNotSame(blockRealMatrix4, blockRealMatrix2);
      assertNotSame(blockRealMatrix4, blockRealMatrix1);
      assertNotSame(blockRealMatrix5, blockRealMatrix0);
      assertNotSame(blockRealMatrix5, blockRealMatrix3);
      assertNotSame(blockRealMatrix5, blockRealMatrix4);
      assertNotSame(blockRealMatrix5, blockRealMatrix2);
      assertNotSame(blockRealMatrix5, blockRealMatrix1);
      assertEquals(1259024.7660998786, blockRealMatrix4.getFrobeniusNorm(), 0.01);
      assertEquals(3, blockRealMatrix4.getRowDimension());
      assertFalse(blockRealMatrix4.isTransposable());
      assertEquals(3, blockRealMatrix4.getColumnDimension());
      assertTrue(blockRealMatrix4.isSquare());
      assertEquals(3, blockRealMatrix5.getRowDimension());
      assertFalse(blockRealMatrix5.isTransposable());
      assertEquals(3, blockRealMatrix5.getColumnDimension());
      assertEquals(6.158381218220438E11, blockRealMatrix5.getFrobeniusNorm(), 0.01);
      assertTrue(blockRealMatrix5.isSquare());
      assertEquals(2, covariance0.getN());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix5);
      assertEquals(2, doubleArray0.length);
      
      double double1 = covariance0.covariance(doubleArray2, doubleArray1, false);
      assertArrayEquals(new double[] {913.0, 0.0, (-1835.472981114)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 913.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(93579.75908412019, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(795, 0).when(realMatrix0).getColumnDimension();
      doReturn(795, 0).when(realMatrix0).getRowDimension();
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[1];
      double double0 = (-941.31430519);
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(realMatrix0).getColumnDimension();
      doReturn((double[]) null).when(realMatrix0).getColumn(anyInt());
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[3];
      double double0 = 2172.605750027568;
      double double1 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[0] = 2172.605750027568;
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = 2182.74657;
      double double2 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2182.74657}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1588855.445138921, double2, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(3, doubleArray0.length);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1074).when(realMatrix0).getColumnDimension();
      doReturn((double[]) null).when(realMatrix0).getColumn(anyInt());
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(5, 0).when(realMatrix0).getColumnDimension();
      doReturn(5, 0).when(realMatrix0).getRowDimension();
      boolean boolean0 = false;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(realMatrix0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[1] = doubleArray0[0];
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3.2376;
      doubleArray1[1] = (-1221.75302039076);
      doubleArray1[2] = 1380.6;
      doubleArray1[3] = (-383.16311727);
      doubleArray1[4] = 1.2599210498948732;
      doubleArray1[5] = (-2696.5881318);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        covariance0.covariance(doubleArray1, doubleArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = covariance0.getCovarianceMatrix();
      assertEquals(0, covariance0.getN());
      assertNull(realMatrix0);
      
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 913.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1835.472981114);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1835.472981114);
      doubleArray2[1] = 913.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      boolean boolean0 = false;
      Covariance covariance0 = new Covariance(doubleArray0, false);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = covariance0.getCovarianceMatrix();
      assertEquals(0, covariance0.getN());
      assertNull(realMatrix0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-327.3327781);
      doubleArray0[1] = 1292.3090316;
      doubleArray0[2] = (-3433.653);
      doubleArray0[3] = 1166.0;
      doubleArray0[4] = 1392.2056;
      doubleArray0[5] = 932.0;
      doubleArray0[6] = 1516.9332;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        covariance0.covariance((double[]) null, doubleArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[6];
      double double0 = covariance0.covariance(doubleArray0, doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(6, doubleArray0.length);
      
      double double1 = covariance0.covariance(doubleArray0, doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[0] = 875.1634531797175;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1845.1629);
      doubleArray0[4] = 2018.328570222559;
      doubleArray0[5] = 0.0;
      double double2 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {875.1634531797175, 0.0, 0.0, (-1845.1629), 2018.328570222559, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1612204.3512397865, double2, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(6, doubleArray0.length);
      
      double double3 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {875.1634531797175, 0.0, 0.0, (-1845.1629), 2018.328570222559, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1612204.3512397865, double3, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(6, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray1);
      assertEquals(0, covariance0.getN());
      assertEquals(6, blockRealMatrix0.getRowDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(6, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[0];
      try { 
        covariance0.covariance(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 0 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      double double0 = covariance0.covariance(doubleArray1, doubleArray1, false);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.25, double0, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        covariance0.covariance(doubleArray2, doubleArray2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = null;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2964.2287;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 768.851341125;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = null;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 768.851341125;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 2964.2287;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 2964.2287;
      doubleArray1[3] = doubleArray3;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      doubleArray1[6] = null;
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-58.7828774);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 12.88226;
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray1, false);
      assertEquals(0, covariance0.getN());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix((RealMatrix) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix((double[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1502.861617062056);
      doubleArray1[1] = 46.9;
      doubleArray1[2] = (-2118.463848);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-452.55635306379);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2118.463848);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-452.55635306379);
      doubleArray0[1] = doubleArray2;
      Covariance covariance0 = new Covariance(doubleArray0);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertEquals(2, covariance0.getN());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[3];
      double double0 = 2172.605750027568;
      double double1 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[0] = 2172.605750027568;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2182.74657;
      double double2 = covariance0.covariance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2172.605750027568, (-1.0), 2182.74657}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1582235.6457948976, double2, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(3, doubleArray0.length);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      // Undeclared exception!
      try { 
        covariance0.covariance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      boolean boolean0 = false;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[0][7];
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 635.8229939183;
      doubleArray1[1] = 489.691;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3617.933783231;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3617.933783231;
      doubleArray2[2] = 635.8229939183;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 635.8229939183;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 489.691;
      doubleArray5[1] = 635.8229939183;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 3617.933783231;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 635.8229939183;
      doubleArray6[3] = 489.691;
      doubleArray6[4] = 3617.933783231;
      doubleArray6[5] = 635.8229939183;
      doubleArray6[6] = 635.8229939183;
      doubleArray6[7] = 3085.00054297;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 635.8229939183;
      doubleArray7[1] = 635.8229939183;
      doubleArray7[2] = 489.691;
      doubleArray0[6] = doubleArray7;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 14.0;
      doubleArray1[1] = (-1124.1);
      doubleArray1[2] = (-989.7622490339);
      doubleArray1[3] = (-2427.655);
      doubleArray1[4] = (-895.225183826);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-989.7622490339);
      doubleArray2[1] = (-895.225183826);
      doubleArray2[2] = (-2396.2899104);
      doubleArray2[3] = (-989.7622490339);
      doubleArray2[4] = (-1124.1);
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1474.63177754);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-171.0);
      doubleArray1[5] = (-1011.0);
      doubleArray0[0] = doubleArray1;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 1 rows and 6 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = false;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance((double[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      boolean boolean0 = true;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix1).getColumnDimension();
      try { 
        covariance0.computeCovarianceMatrix(realMatrix1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance((RealMatrix) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 0 rows and 0 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1125.6203118220342;
      doubleArray0[1] = (-1.0);
      double double0 = covariance0.covariance(doubleArray0, doubleArray0, false);
      assertArrayEquals(new double[] {1125.6203118220342, (-1.0)}, doubleArray0, 0.01);
      assertEquals(317318.3317524944, double0, 0.01);
      assertEquals(0, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2001.041836074953;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1399.9873220369946;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-855.5579735431749);
      doubleArray1[8] = (-2055.52705669);
      double double1 = covariance0.covariance(doubleArray1, doubleArray1, true);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 2001.041836074953, 1.0, 1399.9873220369946, 0.0, (-855.5579735431749), (-2055.52705669)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1361829.2705241325, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, covariance0.getN());
      assertEquals(9, doubleArray1.length);
      
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      double double0 = 3874.5945;
      doubleArray1[1] = 3874.5945;
      double double1 = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      double double2 = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3874.5945;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3874.5945;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      boolean boolean0 = false;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      double double0 = 286.7437805816;
      doubleArray1[0] = 286.7437805816;
      double double1 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      boolean boolean0 = true;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 1 rows and 2 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1497.24;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 709.3702526;
      doubleArray1[3] = 10.9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 10.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 10.9;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 10.9;
      doubleArray4[1] = 709.3702526;
      doubleArray4[2] = 709.3702526;
      doubleArray4[3] = 709.3702526;
      doubleArray4[4] = 10.9;
      doubleArray4[5] = 709.3702526;
      doubleArray4[6] = 709.3702526;
      doubleArray0[3] = doubleArray4;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      boolean boolean0 = false;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(realMatrix0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 0 rows and 0 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1033.37534879871);
      doubleArray1[2] = 444.704355089756;
      doubleArray0[0] = doubleArray1;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 1 rows and 3 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      boolean boolean0 = true;
      Covariance covariance0 = null;
      try {
        covariance0 = new Covariance(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1502.861617062056);
      doubleArray1[1] = 46.9;
      doubleArray1[2] = (-2118.463848);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-452.55635306379);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2118.463848);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-452.55635306379);
      doubleArray0[1] = doubleArray2;
      Covariance covariance0 = new Covariance(doubleArray0);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = covariance0.covariance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-1502.861617062056), 46.9, (-2118.463848), Double.NaN, (-452.55635306379)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(doubleArray0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertEquals(2, covariance0.getN());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = covariance0.getN();
      assertEquals(2, int0);
      assertEquals(2, covariance0.getN());
      assertEquals(2, doubleArray0.length);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)covariance0.computeCovarianceMatrix(blockRealMatrix0);
      assertFalse(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      assertFalse(blockRealMatrix0.isTransposable());
      assertEquals(5, blockRealMatrix0.getRowDimension());
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(5, blockRealMatrix0.getColumnDimension());
      assertTrue(blockRealMatrix1.isSquare());
      assertEquals(Double.NaN, blockRealMatrix1.getFrobeniusNorm(), 0.01);
      assertFalse(blockRealMatrix1.isTransposable());
      assertEquals(5, blockRealMatrix1.getColumnDimension());
      assertEquals(5, blockRealMatrix1.getRowDimension());
      assertEquals(2, covariance0.getN());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1474.078;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-65.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 642.8967592;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-7391.820531654);
      doubleArray0[7] = (-1213.54);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1474.078;
      doubleArray1[1] = (-7391.820531654);
      doubleArray1[2] = 146.7644;
      doubleArray1[3] = 642.8967592;
      try { 
        covariance0.covariance(doubleArray0, doubleArray1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 964.053408015593;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 1237.0970664818;
      double double0 = covariance0.covariance(doubleArray2, doubleArray2, false);
      assertArrayEquals(new double[] {964.053408015593, (-1.0), 1237.0970664818}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(282085.02953132894, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, covariance0.getN());
      assertEquals(3, doubleArray2.length);
      
      doubleArray0[1] = doubleArray2;
      try { 
        covariance0.computeCovarianceMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      boolean boolean0 = false;
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      // Undeclared exception!
      try { 
        covariance0.computeCovarianceMatrix((double[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      int int0 = covariance0.getN();
      assertEquals(0, int0);
      assertEquals(0, covariance0.getN());
      
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      Covariance covariance1 = null;
      try {
        covariance1 = new Covariance(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 0 rows and 0 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1157.0);
      doubleArray0[6] = 1855.0693953;
      doubleArray0[7] = 1733.8296725605437;
      doubleArray0[8] = 1.0;
      covariance0.covariance(doubleArray0, doubleArray0, false);
      covariance0.getN();
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      try { 
        covariance0.computeCovarianceMatrix(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      covariance0.getCovarianceMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-327.3327781);
      doubleArray0[1] = 1292.3090316;
      doubleArray0[2] = (-3433.653);
      doubleArray0[2] = 1166.0;
      doubleArray0[4] = 1392.2056;
      doubleArray0[5] = 932.0;
      doubleArray0[6] = 1516.9332;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        covariance0.covariance((double[]) null, doubleArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      doubleArray0[0] = (-941.31430519);
      try { 
        covariance0.covariance(doubleArray0, doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }
}

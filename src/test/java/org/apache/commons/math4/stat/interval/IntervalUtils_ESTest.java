/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:10:20 GMT 2019
 */

package org.apache.commons.math4.stat.interval;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.interval.ConfidenceInterval;
import org.apache.commons.math4.stat.interval.IntervalUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntervalUtils_ESTest extends IntervalUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getClopperPearsonInterval(1, 1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 1, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getAgrestiCoullInterval(1215, 1215, (-379.778559));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level -379.779, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getClopperPearsonInterval(2705, 0, 2705);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 2,705, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalUtils.checkParameters(3364, 2255, 5.669184079525E-24);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfidenceInterval confidenceInterval0 = IntervalUtils.getNormalApproximationInterval(2105, 591, 0.9745423074310493);
      assertEquals(0.2588755909074336, confidenceInterval0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfidenceInterval confidenceInterval0 = IntervalUtils.getClopperPearsonInterval(928, 928, 0.4814255574509361);
      assertEquals(1.0, confidenceInterval0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfidenceInterval confidenceInterval0 = IntervalUtils.getAgrestiCoullInterval(1442, 139, 0.5);
      assertEquals(0.10176557563023728, confidenceInterval0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getWilsonScoreInterval(77, 77, 5.206150291559893E-8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower bound (1) must be strictly less than upper bound (1)
         //
         verifyException("org.apache.commons.math4.stat.interval.ConfidenceInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getNormalApproximationInterval(591, 591, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower bound (1) must be strictly less than upper bound (1)
         //
         verifyException("org.apache.commons.math4.stat.interval.ConfidenceInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getNormalApproximationInterval(293, 22, 22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 22, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getAgrestiCoullInterval((-332), 1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of trials (-332)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.checkParameters(0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of trials (0)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.checkParameters(131, 131, 269.14665510216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 269.147, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getClopperPearsonInterval(258, 258, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 0, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getWilsonScoreInterval(658, 2447, 658);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of successes (2,447) must be less than or equal to population size (658)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getWilsonScoreInterval(108, (-1), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of successes must be non-negative (-1)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfidenceInterval confidenceInterval0 = IntervalUtils.getWilsonScoreInterval(627, 627, 0.5);
      assertEquals(1.0, confidenceInterval0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getClopperPearsonInterval(0, 0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of trials (0)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalUtils.getNormalApproximationInterval((-30), (-30), (-30));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of trials (-30)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:48:23 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.rank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.rank.Min;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Min_ESTest extends Min_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(0);
      min0.getResult();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(4596.905075224248);
      min0.getResult();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Min min0 = new Min();
      min0.increment((-1208.19379));
      min0.getResult();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 2505.0;
      min0.evaluate(doubleArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2952.978352634685);
      min0.incrementAll(doubleArray0);
      min0.copy();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[3];
      min0.incrementAll(doubleArray0);
      min0.copy();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Min min0 = new Min();
      // Undeclared exception!
      try { 
        min0.evaluate((double[]) null, 0, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[3];
      try { 
        min0.evaluate(doubleArray0, 297, (-1632));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-1,632)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[9];
      try { 
        min0.evaluate(doubleArray0, 981, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        min0.evaluate(doubleArray0, 2146569377, 2139639531);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2146569377
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Min", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Min min0 = new Min();
      try { 
        Min.copy((Min) null, min0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Min min0 = null;
      try {
        min0 = new Min((Min) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-1905.45758669);
      min0.evaluate(doubleArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      min0.evaluate(doubleArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[5];
      min0.evaluate(doubleArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4328.71346759);
      min0.incrementAll(doubleArray0);
      min0.increment((-1419.5));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Min min0 = new Min();
      min0.increment(3616.517126574703);
      min0.getN();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Min min0 = new Min();
      min0.getN();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Min min0 = new Min();
      Min.copy(min0, min0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-1115.064924221989);
      double double0 = min0.evaluate(doubleArray0);
      assertEquals(0L, min0.getN());
      assertEquals((-1115.064924221989), double0, 0.01);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[0];
      double double0 = min0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Min min0 = new Min();
      double[] doubleArray0 = new double[2];
      min0.incrementAll(doubleArray0);
      min0.increment((-1045.2203951391436));
      assertEquals((-1045.2203951391436), min0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Min min0 = new Min();
      Min min1 = new Min(min0);
      boolean boolean0 = min1.equals(min0);
      assertEquals(0L, min1.getN());
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Min min0 = new Min();
      Min min1 = min0.copy();
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      assertNotSame(min1, min0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Min min0 = new Min();
      min0.clear();
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:41:08 GMT 2019
 */

package org.apache.commons.math4.stat.inference;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math4.stat.descriptive.StatisticalSummary;
import org.apache.commons.math4.stat.inference.InferenceTestUtils;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.statistics.distribution.ContinuousDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InferenceTestUtils_ESTest extends InferenceTestUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray1, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      try { 
        InferenceTestUtils.kolmogorovSmirnovStatistic(doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 0 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[9];
      try { 
        InferenceTestUtils.gTestDataSetsComparison(longArray0, longArray1, (double) 237L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level 237, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = InferenceTestUtils.rootLogLikelihoodRatio(679L, 3446L, 65535L, 65535L);
      assertEquals((-44.4092989512734), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[1];
      try { 
        InferenceTestUtils.gDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[0];
      try { 
        InferenceTestUtils.chiSquareTestDataSetsComparison(longArray0, longArray1, (-710.07405258));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level -710.074, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[1];
      try { 
        InferenceTestUtils.chiSquareTestDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      StatisticalSummary statisticalSummary1 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.tTest(statisticalSummary0, statisticalSummary1, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (-1)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      try { 
        InferenceTestUtils.tTest(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (0)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      StatisticalSummary statisticalSummary1 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.t(statisticalSummary0, statisticalSummary1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      StatisticalSummary statisticalSummary1 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.homoscedasticTTest(statisticalSummary0, statisticalSummary1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      try { 
        InferenceTestUtils.homoscedasticTTest(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(statisticalSummary0).getMean();
      doReturn(1583L, 1583L, 0L, 0L).when(statisticalSummary0).getN();
      doReturn(0.0, 0.0).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.tTest(statisticalSummary0, statisticalSummary0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(statisticalSummary0).getMean();
      doReturn(1905L, 1905L, 0L, 0L).when(statisticalSummary0).getN();
      doReturn(0.0, 0.0).when(statisticalSummary0).getVariance();
      // Undeclared exception!
      try { 
        InferenceTestUtils.homoscedasticTTest(statisticalSummary0, statisticalSummary0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -2 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.TDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[][] longArray1 = new long[2][1];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      double double0 = InferenceTestUtils.chiSquare(longArray1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-0.5);
      double double0 = InferenceTestUtils.tTest(doubleArray0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = InferenceTestUtils.tTest(2144.6014285581214, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      double double0 = InferenceTestUtils.tTest((-1.0), doubleArray0);
      assertEquals(0.004104715980053324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(statisticalSummary0).getMean();
      doReturn(2184L, 1237L).when(statisticalSummary0).getN();
      doReturn(0.0).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.tTest((-511.32611), statisticalSummary0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      doubleArray0[1] = 1.0;
      double double0 = InferenceTestUtils.t(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2553.41246098);
      double[] doubleArray1 = new double[9];
      double double0 = InferenceTestUtils.t(doubleArray0, doubleArray1);
      assertEquals((-1.0000000000000002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = InferenceTestUtils.t((-2461.2), doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(1327.0).when(statisticalSummary0).getMean();
      doReturn(2097L, 2185L).when(statisticalSummary0).getN();
      doReturn((double)4131L).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.t((double) 1327L, statisticalSummary0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(statisticalSummary0).getMean();
      doReturn(1399L, (-4097L)).when(statisticalSummary0).getN();
      doReturn(0.0).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.t(2291.4, statisticalSummary0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(statisticalSummary0).getMean();
      doReturn(1222L, 2862933555777941757L).when(statisticalSummary0).getN();
      doReturn(0.0).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.t((double) 1327L, statisticalSummary0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = InferenceTestUtils.rootLogLikelihoodRatio(49L, 49L, 49L, 49L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = InferenceTestUtils.rootLogLikelihoodRatio(1L, 1L, 1L, 910L);
      assertEquals(3.1763806472894305, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = InferenceTestUtils.kolmogorovSmirnovStatistic(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = InferenceTestUtils.homoscedasticTTest(doubleArray0, doubleArray0, 2.0776878313278689E-7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-0.5);
      double double0 = InferenceTestUtils.homoscedasticTTest(doubleArray0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      double double0 = InferenceTestUtils.homoscedasticT(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2158.038079;
      double[] doubleArray1 = new double[6];
      double double0 = InferenceTestUtils.homoscedasticT(doubleArray0, doubleArray1);
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 6364136223846793005L;
      longArray0[1] = 6364136223846793005L;
      double double0 = InferenceTestUtils.gDataSetsComparison(longArray0, longArray0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = InferenceTestUtils.exactP(0.0, 0, 0, true);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 6148914691236517205L;
      longArray0[1] = 6148914691236517205L;
      longArray0[2] = 6148914691236517205L;
      double double0 = InferenceTestUtils.chiSquareTestDataSetsComparison(longArray0, longArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = InferenceTestUtils.approximateP(2.0, 1032, 2131);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = InferenceTestUtils.approximateP(0.0, 0, (-1985));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        InferenceTestUtils.tTest((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.tTest(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 1
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      try { 
        InferenceTestUtils.tTest(statisticalSummary0, statisticalSummary0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        InferenceTestUtils.tTest(0.5778636748954609, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.tTest(2144.6014285581214, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 1
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(statisticalSummary0).getMean();
      doReturn(2935890503282001226L, 0L).when(statisticalSummary0).getN();
      doReturn(0.0).when(statisticalSummary0).getVariance();
      // Undeclared exception!
      try { 
        InferenceTestUtils.tTest((-3013.0), statisticalSummary0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -1 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.TDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      try { 
        InferenceTestUtils.tTest(0.0, statisticalSummary0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        InferenceTestUtils.t((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        InferenceTestUtils.t((StatisticalSummary) null, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        InferenceTestUtils.t((-2827.23898626), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.t(2015.242, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 1
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        InferenceTestUtils.t(2.0500353979930155E-8, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      try { 
        InferenceTestUtils.t((-1835.7828253599962), statisticalSummary0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        InferenceTestUtils.rootLogLikelihoodRatio(942L, 942L, 942L, (-442L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -442 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        InferenceTestUtils.rootLogLikelihoodRatio(0L, 0L, 0L, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // observed counts are both zero for entry 0
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[3];
      try { 
        InferenceTestUtils.pairedTTest(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        InferenceTestUtils.pairedTTest(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient dimension {0}, must be at least {1}
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.pairedTTest((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.StatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      try { 
        InferenceTestUtils.pairedT(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.pairedT(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 1
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(uniformRandomProvider0).nextInt(anyInt());
      // Undeclared exception!
      InferenceTestUtils.monteCarloP(0.0, 626, 626, false, 626, uniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        InferenceTestUtils.monteCarloP(1392.042374171232, (-633066204), (-633066204), true, 0, uniformRandomProvider0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NaN is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest((double[]) null, (double[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NaN is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(continuousDistribution0, (double[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest((ContinuousDistribution) null, doubleArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(continuousDistribution0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.kolmogorovSmirnovStatistic(continuousDistribution0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      try { 
        InferenceTestUtils.kolmogorovSmirnovStatistic(continuousDistribution0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sample contains 1 observed points, at least 2 are required
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovStatistic((ContinuousDistribution) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        InferenceTestUtils.homoscedasticTTest((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        InferenceTestUtils.homoscedasticTTest((StatisticalSummary) null, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        InferenceTestUtils.homoscedasticT((StatisticalSummary) null, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTestIntrinsic(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -0.5 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[6];
      try { 
        InferenceTestUtils.gTestIntrinsic(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[7];
      try { 
        InferenceTestUtils.gTestIntrinsic(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      try { 
        InferenceTestUtils.gTestDataSetsComparison(longArray0, longArray0, 0.2983669638633728);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -0.5 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-3453L);
      try { 
        InferenceTestUtils.gTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -3,453 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[2];
      try { 
        InferenceTestUtils.gTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // observed counts are both zero for entry 0
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      long[] longArray0 = new long[1];
      try { 
        InferenceTestUtils.gTest(doubleArray0, longArray0, 3347.746378014);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level 3,347.746, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[6];
      try { 
        InferenceTestUtils.gTest(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[3];
      try { 
        InferenceTestUtils.gTest(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTest((double[]) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-1043L);
      try { 
        InferenceTestUtils.gDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,043 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.gDataSetsComparison((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[6];
      try { 
        InferenceTestUtils.g(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        InferenceTestUtils.g(doubleArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      InferenceTestUtils.exactP((-1659.0), 10000, 767, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number -0.5 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1523L);
      try { 
        InferenceTestUtils.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,523 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[][] longArray0 = new long[8][8];
      try { 
        InferenceTestUtils.chiSquareTest(longArray0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level 1, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[][] longArray0 = new long[8][1];
      try { 
        InferenceTestUtils.chiSquareTest(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      try { 
        InferenceTestUtils.chiSquareTest(doubleArray0, longArray0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      try { 
        InferenceTestUtils.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[0];
      try { 
        InferenceTestUtils.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTest((double[]) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2124L);
      try { 
        InferenceTestUtils.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,124 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareDataSetsComparison((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquare((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[5];
      try { 
        InferenceTestUtils.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[7];
      try { 
        InferenceTestUtils.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        InferenceTestUtils.homoscedasticTTest(doubleArray0, doubleArray0, 3644.41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (3,644.41)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(statisticalSummary0).getN();
      StatisticalSummary statisticalSummary1 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      try { 
        InferenceTestUtils.homoscedasticT(statisticalSummary0, statisticalSummary1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      try { 
        InferenceTestUtils.pairedTTest(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (0)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, (-1.0), 0.0, 0.0).when(continuousDistribution0).cumulativeProbability(anyDouble());
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(continuousDistribution0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[1];
      try { 
        InferenceTestUtils.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StatisticalSummary statisticalSummary0 = mock(StatisticalSummary.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(statisticalSummary0).getMean();
      doReturn((long)14, (long)14, 0L, 0L).when(statisticalSummary0).getN();
      doReturn(0.0, 0.0).when(statisticalSummary0).getVariance();
      double double0 = InferenceTestUtils.t(statisticalSummary0, statisticalSummary0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTest((double[]) null, (long[]) null, 1.0E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.exactP(1.0, 0, (-1937), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        InferenceTestUtils.kolmogorovSmirnovTest(continuousDistribution0, doubleArray0, 433.81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level 433.81, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.KolmogorovSmirnovTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(continuousDistribution0).cumulativeProbability(anyDouble());
      double[] doubleArray0 = new double[9];
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(continuousDistribution0, doubleArray0, false);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTestIntrinsic(doubleArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTestDataSetsComparison((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0, false);
      assertEquals(0.33333333333333337, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      try { 
        InferenceTestUtils.chiSquare(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      try { 
        InferenceTestUtils.tTest(0.0, doubleArray0, (-732.273748419441));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (-732.274)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      double double0 = InferenceTestUtils.monteCarloP((-54.880183204416795), 0, 3650, false, (-1806), uniformRandomProvider0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        InferenceTestUtils.tTest(Double.NaN, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = InferenceTestUtils.kolmogorovSmirnovTest(doubleArray0, doubleArray0);
      assertEquals(0.3517071164129988, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquare((double[]) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        InferenceTestUtils.tTest(1.0, (StatisticalSummary) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // significance level (0)
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = InferenceTestUtils.pairedTTest(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      long[] longArray0 = new long[5];
      try { 
        InferenceTestUtils.chiSquareTest(doubleArray0, longArray0, (double) 2428L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds significance level 2,428, must be between 0 and 0.5
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTest((long[][]) null, 1.0E-9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTest((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        InferenceTestUtils.oneWayAnovaPValue((Collection<double[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ContinuousDistribution continuousDistribution0 = mock(ContinuousDistribution.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(continuousDistribution0).cumulativeProbability(anyDouble());
      double[] doubleArray0 = new double[2];
      double double0 = InferenceTestUtils.kolmogorovSmirnovStatistic(continuousDistribution0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = InferenceTestUtils.pairedT(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        InferenceTestUtils.homoscedasticT(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data for t statistic, needs at least 2, got 0
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTestDataSetsComparison((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.inference.ChiSquareTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = InferenceTestUtils.t((double) 14, doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        InferenceTestUtils.gTest(doubleArray0, (long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number 0 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.GammaDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      long[] longArray0 = new long[3];
      try { 
        InferenceTestUtils.g(doubleArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math4.stat.inference.GTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        InferenceTestUtils.tTest((StatisticalSummary) null, (StatisticalSummary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.stat.inference.TTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        InferenceTestUtils.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number 0 is negative
         //
         verifyException("org.apache.commons.statistics.distribution.GammaDistribution", e);
      }
  }
}

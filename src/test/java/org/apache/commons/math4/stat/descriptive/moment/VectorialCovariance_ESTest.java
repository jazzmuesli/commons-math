/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:08:42 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.stat.descriptive.moment.VectorialCovariance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VectorialCovariance_ESTest extends VectorialCovariance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[1];
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1L, vectorialCovariance0.getN());
      
      vectorialCovariance0.hashCode();
      assertEquals(1L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[1];
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1L, vectorialCovariance0.getN());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)vectorialCovariance0.getResult();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1L, vectorialCovariance0.getN());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1L, vectorialCovariance0.getN());
      
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(2L, vectorialCovariance0.getN());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)vectorialCovariance0.getResult();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2L, vectorialCovariance0.getN());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(2, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[2];
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(2, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[4];
      try { 
        vectorialCovariance0.increment(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.VectorialCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(69, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)vectorialCovariance0.getResult();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(69, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertTrue(blockRealMatrix0.isSquare());
      assertEquals(69, blockRealMatrix0.getColumnDimension());
      assertFalse(blockRealMatrix0.isTransposable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[1];
      vectorialCovariance0.increment(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1L, vectorialCovariance0.getN());
      
      long long0 = vectorialCovariance0.getN();
      assertEquals(1L, long0);
      assertEquals(1L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1231, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      // Undeclared exception!
      try { 
        vectorialCovariance0.increment((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.VectorialCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(0, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      // Undeclared exception!
      try { 
        vectorialCovariance0.getResult();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = null;
      try {
        vectorialCovariance0 = new VectorialCovariance((-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.VectorialCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(484, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      VectorialCovariance vectorialCovariance1 = new VectorialCovariance(1237, true);
      assertFalse(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotNull(vectorialCovariance1);
      assertEquals(0L, vectorialCovariance1.getN());
      
      boolean boolean0 = vectorialCovariance0.equals(vectorialCovariance1);
      assertFalse(boolean0);
      assertFalse(vectorialCovariance0.equals((Object)vectorialCovariance1));
      assertFalse(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotSame(vectorialCovariance0, vectorialCovariance1);
      assertNotSame(vectorialCovariance1, vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(0L, vectorialCovariance1.getN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(0, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      VectorialCovariance vectorialCovariance1 = new VectorialCovariance(0, false);
      assertTrue(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotNull(vectorialCovariance1);
      assertEquals(0L, vectorialCovariance1.getN());
      
      boolean boolean0 = vectorialCovariance0.equals(vectorialCovariance1);
      assertTrue(boolean0);
      assertTrue(vectorialCovariance0.equals((Object)vectorialCovariance1));
      assertTrue(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotSame(vectorialCovariance0, vectorialCovariance1);
      assertNotSame(vectorialCovariance1, vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(0L, vectorialCovariance1.getN());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1344, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      VectorialCovariance vectorialCovariance1 = new VectorialCovariance(1344, false);
      assertFalse(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotNull(vectorialCovariance1);
      assertEquals(0L, vectorialCovariance1.getN());
      
      boolean boolean0 = vectorialCovariance0.equals(vectorialCovariance1);
      assertFalse(boolean0);
      assertFalse(vectorialCovariance0.equals((Object)vectorialCovariance1));
      assertFalse(vectorialCovariance1.equals((Object)vectorialCovariance0));
      assertNotSame(vectorialCovariance0, vectorialCovariance1);
      assertNotSame(vectorialCovariance1, vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(0L, vectorialCovariance1.getN());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(0, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      boolean boolean0 = vectorialCovariance0.equals(vectorialCovariance0);
      assertTrue(boolean0);
      assertEquals(0L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1344, true);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      vectorialCovariance0.hashCode();
      assertEquals(0L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)vectorialCovariance0.getResult();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
      
      boolean boolean0 = vectorialCovariance0.equals(array2DRowRealMatrix0);
      assertFalse(boolean0);
      assertEquals(0L, vectorialCovariance0.getN());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(32, false);
      assertNotNull(vectorialCovariance0);
      assertEquals(0L, vectorialCovariance0.getN());
      
      double[] doubleArray0 = new double[9];
      try { 
        vectorialCovariance0.increment(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 32
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.VectorialCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(1, false);
      double[] doubleArray0 = new double[1];
      vectorialCovariance0.increment(doubleArray0);
      vectorialCovariance0.increment(doubleArray0);
      vectorialCovariance0.getResult();
      assertEquals(2L, vectorialCovariance0.getN());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(0, false);
      long long0 = vectorialCovariance0.getN();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VectorialCovariance vectorialCovariance0 = new VectorialCovariance(0, false);
      vectorialCovariance0.clear();
      assertEquals(0L, vectorialCovariance0.getN());
  }
}

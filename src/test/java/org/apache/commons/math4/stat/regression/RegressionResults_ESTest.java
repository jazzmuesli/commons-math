/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:09:54 GMT 2019
 */

package org.apache.commons.math4.stat.regression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.regression.RegressionResults;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RegressionResults_ESTest extends RegressionResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 380.06404;
      doubleArray0[2] = Double.NaN;
      double[][] doubleArray1 = new double[7][6];
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 380.06404;
      doubleArray2[1] = 380.06404;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 380.06404;
      doubleArray2[4] = 380.06404;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-1811L), 3, (-137.728), (-137.728), 0.0, true, true);
      regressionResults0.getStdErrorOfEstimates();
      try { 
        regressionResults0.getCovarianceOfParameters(3, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 out of [0, 2] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.036;
      doubleArray0[1] = (-3041.14258970365);
      doubleArray0[2] = (-1039.0768);
      doubleArray0[3] = (-891.1967115);
      doubleArray0[4] = 1310.9517038897955;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 2.718281828459045;
      double[][] doubleArray1 = new double[0][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 2348L, 4, (-124.0502), 2348L, (-3041.14258970365), true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(4, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1277.5920770290627;
      doubleArray0[1] = (-3304.4770168031);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3474.62;
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = 2;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1476L), 2, (-0.16666666666666666), 1277.5920770290627, 3474.62, true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-746L), 1454, 0.0, 0.0, 1347.7140738, true, true);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getAdjustedRSquared();
      try { 
        regressionResults0.getStdErrorOfEstimate(1454);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,454 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2326.2665953496985);
      doubleArray0[1] = 1218.0;
      doubleArray0[2] = (-136.9);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      int int0 = 0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 1L, 0, 3085.7, (-2242.38066), (-1888.0620003707277), true, true);
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getParameterEstimate(0);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, 3552L, 0, 0, (-1609.0), 0.0, true, false);
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getParameterEstimates();
      regressionResults0.getNumberOfParameters();
      regressionResults0.getNumberOfParameters();
      regressionResults0.getParameterEstimates();
      regressionResults0.getCovarianceOfParameters((-2789), 0);
      regressionResults0.getErrorSumSquares();
      regressionResults0.hasIntercept();
      regressionResults0.getMeanSquareError();
      regressionResults0.getCovarianceOfParameters(0, 0);
      regressionResults0.getParameterEstimates();
      regressionResults0.getParameterEstimates();
      regressionResults0.getStdErrorOfEstimate((-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      int int0 = 0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 3015L, 0, 0, 3015L, (-1275.3735889), false, false);
      regressionResults0.getParameterEstimates();
      try { 
        regressionResults0.getParameterEstimate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 out of [0, -1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-180.974086081408);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1231.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-180.974086081408);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-180.974086081408);
      doubleArray1[1] = doubleArray2;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 1L, 2100, (-1.0), (-1.0), 2100, false, false);
      regressionResults0.getRegressionSumSquares();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, (-1501), (-1501), 0L, 0L, true, true);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getParameterEstimates();
      regressionResults0.getParameterEstimates();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimates();
      try { 
        regressionResults0.getStdErrorOfEstimate((-1501));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,501 out of [0, -1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3019.694221;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      int int0 = 2904;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 2904, (-451.8044), 3019.694221, 1881.9970235475762, false, false);
      regressionResults0.getStdErrorOfEstimates();
      try { 
        regressionResults0.getParameterEstimate(2904);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2,904 out of [0, 3] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2549.561503582785;
      doubleArray0[3] = (-1186.21);
      doubleArray0[4] = 2249.8739;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 4.9E-324;
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-2442L), (-4043), 0.0, 0.0, 1278.988214, true, true);
      regressionResults0.getMeanSquareError();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3479.024);
      doubleArray0[2] = (-249.49853);
      doubleArray0[3] = 1456.0;
      doubleArray0[4] = (-2356.1);
      doubleArray0[5] = (-3517.0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 249L, 31, (-3479.024), (-1525.0), (-2356.1), false, false);
      regressionResults0.getRegressionSumSquares();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3929.38;
      doubleArray0[2] = 3063.987;
      doubleArray0[3] = (-1156.8585);
      doubleArray0[4] = 3698.2;
      doubleArray0[5] = 866.91155116;
      doubleArray0[6] = 915.1;
      doubleArray0[7] = Double.NaN;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, (-1), Double.NaN, (-1.0), 1382.894818369, true, true);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][2];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 1560L, (-839), 1560L, 0.0, (-2110.6724385), true, false);
      regressionResults0.getRSquared();
      regressionResults0.getStdErrorOfEstimates();
      try { 
        regressionResults0.getCovarianceOfParameters((-722), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -722 out of [0, -1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-982.865997878);
      int int0 = 0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, (-712L), 0, (-982.865997878), 0.0, 0.0, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 866.7;
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 1L, 0, 2368.581563367518, 0, 0, false, false);
      regressionResults0.getParameterEstimate(0);
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getParameterEstimates();
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getN();
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getRSquared();
      regressionResults0.getParameterEstimate(0);
      regressionResults0.getCovarianceOfParameters(0, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 520.404336403426;
      doubleArray0[1] = 6597.15328901;
      double[][] doubleArray1 = new double[3][7];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 520.404336403426;
      doubleArray2[1] = 6597.15328901;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 543L, (-2154), 6597.15328901, 543L, 4.9E-324, false, false);
      regressionResults0.getRegressionSumSquares();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-822.1);
      doubleArray0[1] = 3755.55931;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 602.275930958902;
      doubleArray0[4] = Double.NaN;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, true, 0L, 0, 0.0, (-3004.5543024934377), (-2256.89631051), true, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 0L, (-1122), 1573.07269650323, (-1122), (-1.0), true, false);
      regressionResults0.getErrorSumSquares();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2988.0);
      doubleArray0[1] = (-2335.0);
      doubleArray0[2] = (-1728.9426381201);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2086.64965;
      doubleArray0[5] = 500.71458061276;
      doubleArray0[6] = (-4.069168176599);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 2037.0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 370, 500.71458061276, 1.0, (-1728.9426381201), true, true);
      try { 
        regressionResults0.getCovarianceOfParameters(0, (-571));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -571 out of [0, 8] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-14.10856113441);
      doubleArray0[2] = 1927.891873504;
      doubleArray0[3] = (-4219.7323348);
      doubleArray0[4] = 1100.025350123876;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-901L), (-770), (-14.10856113441), 1100.025350123876, (-901L), false, true);
      try { 
        regressionResults0.getCovarianceOfParameters(0, (-770));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -770 out of [0, 4] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3677.8064);
      doubleArray0[1] = (-1852.1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2416.2743475617385;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2781.7745274);
      doubleArray0[6] = (-1.0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 1L, 700, 1L, 0.0, (-261.8026707498), true, false);
      regressionResults0.getTotalSumSquares();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1038.6);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 2, 0.0, 0.0, 1955.1, false, false);
      regressionResults0.getRSquared();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, true, 1287L, 0, 4.9E-324, (-1.0), 1287L, true, false);
      try { 
        regressionResults0.getStdErrorOfEstimate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 out of [0, -1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-5312.300395604);
      doubleArray0[3] = (-2140.8272522);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1272.346584;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2907.5);
      double[][] doubleArray1 = new double[0][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1L), 3, 0.0, Double.NaN, 0.0, false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimate(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2090.040180938);
      doubleArray0[2] = (-1934.2858585861);
      doubleArray0[3] = 1917.54212210003;
      doubleArray0[4] = (-2908.5351);
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 1, 0.0, 0.0, 1, false, true);
      regressionResults0.getTotalSumSquares();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 989.286073528082;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = 276;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 424L, 276, 0.0, 1441.0, 0.0, false, false);
      regressionResults0.getParameterEstimate(1);
      try { 
        regressionResults0.getCovarianceOfParameters(510, (-1891));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 510 out of [0, 2] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-224.8929);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      int int0 = 0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 0, 0, 1874.023356519, (-604.19224774135), false, true);
      regressionResults0.getParameterEstimates();
      regressionResults0.hasIntercept();
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = (-1918);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-327L), (-1918), 0.0, 395.048293, (-1522.4838249138986), true, true);
      regressionResults0.getCovarianceOfParameters(0, 0);
      regressionResults0.getParameterEstimate(0);
      regressionResults0.getN();
      regressionResults0.getN();
      regressionResults0.getParameterEstimates();
      int int1 = (-1148);
      try { 
        regressionResults0.getParameterEstimate((-1918));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,918 out of [0, 0] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-55.62078);
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 2080, 0L, (-55.62078), 2080, false, true);
      regressionResults0.getNumberOfParameters();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-311L), (-1844), Double.NaN, 0.0, 0.0, false, true);
      regressionResults0.getNumberOfParameters();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 25.1976620333;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 436.3902356642147;
      doubleArray0[4] = (-1.0);
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 0, 0.0, 1788.81, 0, false, false);
      regressionResults0.getStdErrorOfEstimates();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-219.7763036);
      doubleArray0[2] = 1254.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1924.861350689148;
      doubleArray0[6] = (-1147.79);
      doubleArray0[7] = 819.23632285;
      doubleArray0[8] = 4.9E-324;
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, (-2915), (-4068.657238910337), 1254.0, (-1147.79), true, true);
      regressionResults0.getParameterEstimate(0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      double[] doubleArray1 = new double[0];
      doubleArray0[7] = doubleArray1;
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, (-3421L), 2298, 0.0, 0.0, 0.0, false, false);
      regressionResults0.getParameterEstimates();
      regressionResults0.getRegressionSumSquares();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1454.469126);
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[0][9];
      int int0 = (-2105);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, (-2105), 0L, Double.NaN, (-2105), false, true);
      regressionResults0.getN();
      try { 
        regressionResults0.getParameterEstimate((-2105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,105 out of [0, 2] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1765.213699280705;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1167.08263);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-2726.0);
      doubleArray0[7] = (-1170.88180714);
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[0][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 1L, 1, 812.8471, 774.355270049857, 0.0, true, true);
      regressionResults0.getParameterEstimate(1);
      try { 
        regressionResults0.getParameterEstimate(5339);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5,339 out of [0, 8] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3359.53515);
      doubleArray0[1] = (-2216.566602);
      doubleArray0[2] = (-1512.2246362079345);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, true, 1L, 2, 0.0, (-1.0), (-1580.075934), false, false);
      // Undeclared exception!
      try { 
        regressionResults0.getCovarianceOfParameters(2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, (-300L), 2272, 0.0, 2272, 0.0, false, false);
      regressionResults0.getParameterEstimate(2272);
      regressionResults0.getParameterEstimate(2272);
      regressionResults0.hasIntercept();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getCovarianceOfParameters(2272, 2272);
      regressionResults0.hasIntercept();
      regressionResults0.hasIntercept();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getParameterEstimate(2272);
      regressionResults0.getCovarianceOfParameters((-1), (-1));
      regressionResults0.getRSquared();
      regressionResults0.getParameterEstimate(3645);
      regressionResults0.getParameterEstimate(2625);
      regressionResults0.getCovarianceOfParameters(3645, 3645);
      regressionResults0.getTotalSumSquares();
      regressionResults0.getAdjustedRSquared();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2746.64577;
      doubleArray0[1] = (-1557.2762498999);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      int int0 = 635;
      RegressionResults regressionResults0 = null;
      try {
        regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, true, (-1369L), 635, 881.3482359, Double.NaN, Double.NaN, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 751.23391996;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1702.45;
      doubleArray0[4] = 2161.3140950184047;
      doubleArray0[5] = 3311.8031173037;
      doubleArray0[6] = (-2399.656003736123);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[0][7];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-992L), (-291), 0.0, 0.0, (-1.0), false, false);
      regressionResults0.getParameterEstimate(0);
      try { 
        regressionResults0.getCovarianceOfParameters((-291), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -291 out of [0, 8] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-14.30148);
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      int int0 = 0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-3324L), 0, 0.0, (-14.30148), 0, true, false);
      regressionResults0.getStdErrorOfEstimates();
      int int1 = 2;
      regressionResults0.getStdErrorOfEstimates();
      int int2 = (-127);
      regressionResults0.getParameterEstimates();
      try { 
        regressionResults0.getStdErrorOfEstimate((-2470));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,470 out of [0, 0] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, (-2146560898), (-224.8929), (-2146560898), (-4171.099546388172), false, false);
      regressionResults0.getRSquared();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, (-5018L), 0, 0, 2132.0, 1.0, false, false);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getCovarianceOfParameters(0, 0);
      regressionResults0.getParameterEstimate(0);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getTotalSumSquares();
      regressionResults0.getParameterEstimate((-4600));
      regressionResults0.getMeanSquareError();
      regressionResults0.getErrorSumSquares();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, 1L, 5, 1L, 5, 0.0, false, false);
      int int0 = (-995);
      try { 
        regressionResults0.getCovarianceOfParameters((-995), (-995));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -995 out of [0, 0] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 4.9E-324;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-3L), (-1), (-1422.3977235610992), 0.0, 4.9E-324, false, false);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimates();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, 632L, 0, 0.0, 0.0, 0, false, false);
      regressionResults0.getErrorSumSquares();
      regressionResults0.getStdErrorOfEstimate(0);
      regressionResults0.getRegressionSumSquares();
      regressionResults0.getN();
      regressionResults0.getTotalSumSquares();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getAdjustedRSquared();
      regressionResults0.getRegressionSumSquares();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, (-1L), 4, 691.3, 691.3, 0.0, false, false);
      try { 
        regressionResults0.getStdErrorOfEstimate(1209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,209 out of [0, -1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.2860509143963117E-8;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1451.5766;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2038.61;
      doubleArray1[6] = (-3096.932958422);
      doubleArray0[4] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 2038.61;
      doubleArray0[5] = doubleArray2;
      RegressionResults regressionResults0 = new RegressionResults((double[]) null, doubleArray0, false, (-586L), 600, 1.0, 3208.27601, 2038.61, false, false);
      regressionResults0.getRSquared();
      regressionResults0.getCovarianceOfParameters(730, 2552);
      regressionResults0.getStdErrorOfEstimates();
      regressionResults0.getStdErrorOfEstimate(497);
      regressionResults0.getAdjustedRSquared();
      regressionResults0.getParameterEstimate(497);
      regressionResults0.getRSquared();
      regressionResults0.getAdjustedRSquared();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (-141.064831664355);
      doubleArray0[2] = 2635.281556;
      doubleArray0[3] = 1293.515661;
      doubleArray0[4] = (-1782.2);
      double[][] doubleArray1 = new double[1][8];
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 2L, 3694, 1293.515661, 4.9E-324, 0.0875862700108075, false, true);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(4.9E-324, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(0.0875862700108075, regressionResults0.getErrorSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-2.372325839946032E-5), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals((-0.0875862700108075), regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(2L, regressionResults0.getN());
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(5, regressionResults0.getNumberOfParameters());
      assertArrayEquals(new double[] {4.9E-324, (-141.064831664355), 2635.281556, 1293.515661, (-1782.2)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-3512299194304650054L), 34, (-1.0), 0.0, (-1.0), false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = regressionResults0.getParameterEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double[] doubleArray5 = regressionResults0.getParameterEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray5.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray5, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      double[] doubleArray6 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray6.length);
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray6, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      double double0 = regressionResults0.getRSquared();
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(2.847137856653968E-19, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getRegressionSumSquares(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-3512299194304650054L), regressionResults0.getN());
      assertEquals(0.0, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      
      try { 
        regressionResults0.getCovarianceOfParameters(34, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 34 out of [0, 0] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 794.3641530537999;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2037.846844);
      doubleArray0[3] = (-1514.81205792);
      doubleArray0[4] = (-1144.7185437589);
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-1162L), 0, (-1144.7185437589), 794.3641530537999, (-1.0), false, true);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals((-1162L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(5, regressionResults0.getNumberOfParameters());
      assertEquals(8.605851979345956E-4, regressionResults0.getMeanSquareError(), 0.01);
      assertArrayEquals(new double[] {794.3641530537999, (-1.0), (-2037.846844), (-1514.81205792), (-1144.7185437589)}, doubleArray0, 0.01);
      
      double double0 = regressionResults0.getParameterEstimate(0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(794.3641530537999, double0, 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals((-1162L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(5, regressionResults0.getNumberOfParameters());
      assertEquals(8.605851979345956E-4, regressionResults0.getMeanSquareError(), 0.01);
      assertArrayEquals(new double[] {794.3641530537999, (-1.0), (-2037.846844), (-1514.81205792), (-1144.7185437589)}, doubleArray0, 0.01);
      
      try { 
        regressionResults0.getCovarianceOfParameters(0, 1115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,115 out of [0, 4] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1238.848;
      doubleArray0[1] = 2418.0;
      doubleArray0[2] = 673.0629428;
      doubleArray0[3] = 2315.272655125776;
      doubleArray0[4] = 4.9E-324;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, (-1), 0L, (-1), (-1), false, false);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(5, regressionResults0.getNumberOfParameters());
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1238.848, 2418.0, 673.0629428, 2315.272655125776, 4.9E-324}, doubleArray0, 0.01);
      
      double double0 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(35.1972726216109, double0, 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1.0), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals((-1.0), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(5, regressionResults0.getNumberOfParameters());
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1238.848, 2418.0, 673.0629428, 2315.272655125776, 4.9E-324}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 545.2797;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 105.16;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, (-3303L), 0, 545.2797, (-3303L), 1608.37222043, false, false);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      
      double[] doubleArray2 = regressionResults0.getParameterEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.35122480727724, Double.NaN, 10.254754994635416}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = regressionResults0.getParameterEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double double0 = regressionResults0.getRSquared();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double1 = regressionResults0.getRSquared();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double2 = regressionResults0.getAdjustedRSquared();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray5 = regressionResults0.getParameterEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray5.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray5, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      double double3 = regressionResults0.getTotalSumSquares();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double[] doubleArray6 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray6.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray6);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.35122480727724, Double.NaN, 10.254754994635416}, doubleArray6, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      double double4 = regressionResults0.getRegressionSumSquares();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      
      double double5 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(23.35122480727724, double5, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(23.35122480727724, double6, 0.01);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      
      double[] doubleArray7 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray7.length);
      assertNotNull(doubleArray7);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray3);
      assertEquals((-3303L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(1608.37222043, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals((-0.4869428460278535), regressionResults0.getMeanSquareError(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {545.2797, (-1.0), 105.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.35122480727724, Double.NaN, 10.254754994635416}, doubleArray7, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      try { 
        regressionResults0.getParameterEstimate(261);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 261 out of [0, 2] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 350.0129308057;
      double[][] doubleArray2 = new double[0][7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      RegressionResults regressionResults0 = new RegressionResults(doubleArray1, doubleArray2, true, (-1L), 0, (-1157), (-2037.846844), (-2037.846844), false, false);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(regressionResults0);
      assertEquals(2037.846844, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-2037.846844), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals((-1L), regressionResults0.getN());
      assertFalse(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertArrayEquals(new double[] {350.0129308057}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        regressionResults0.getStdErrorOfEstimates();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 535.925;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4, 647.9027883784703, 1.0, (-826.5282288962624), true, true);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(206.6320572240656, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertEquals((-826.5282288962624), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(1.0, regressionResults0.getRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(8, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {535.925, 0.0, (-1.0), 0.0, 0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double double0 = regressionResults0.getMeanSquareError();
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(206.6320572240656, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(206.6320572240656, regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertEquals((-826.5282288962624), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(1.0, regressionResults0.getRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(8, regressionResults0.getNumberOfParameters());
      assertEquals(1.0, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRegressionSumSquares(), 0.01);
      assertArrayEquals(new double[] {535.925, 0.0, (-1.0), 0.0, 0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      try { 
        regressionResults0.getStdErrorOfEstimate((-2213));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,213 out of [0, 7] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-926.0886271653745);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, (double[][]) null, false, (-1368L), 0, 0.0, (-926.0886271653745), 487.68991057, false, false);
      assertEquals(3, doubleArray0.length);
      assertNotNull(regressionResults0);
      assertEquals((-1368L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(487.68991057, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-0.3564984726388889), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-926.0886271653745)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = regressionResults0.getParameterEstimates();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1368L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(487.68991057, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-0.3564984726388889), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-926.0886271653745)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-926.0886271653745)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = regressionResults0.getAdjustedRSquared();
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1368L), regressionResults0.getN());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(487.68991057, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertFalse(regressionResults0.hasIntercept());
      assertEquals((-0.3564984726388889), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(3, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-926.0886271653745)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        regressionResults0.getParameterEstimate((-2381));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,381 out of [0, 2] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 0, 1.0, 0.0, 9.9, true, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double0 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double1 = regressionResults0.getStdErrorOfEstimate(0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1.0, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      boolean boolean0 = regressionResults0.hasIntercept();
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double2 = regressionResults0.getRSquared();
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray3 = regressionResults0.getStdErrorOfEstimates();
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(Double.POSITIVE_INFINITY, regressionResults0.getMeanSquareError(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(2, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(9.9, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      try { 
        regressionResults0.getStdErrorOfEstimate(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 30 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2717.41224247;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 932.3159975106462;
      doubleArray0[4] = (-1182.3837706675);
      doubleArray0[5] = 1428.58;
      doubleArray0[6] = (-4575.38895);
      doubleArray0[7] = 1285.36243853782;
      doubleArray0[8] = 1780.86987152;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, false, 0L, 4959, (-1.0), 0.0, 0.0, true, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals(1.0, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(1.0, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(9, regressionResults0.getNumberOfParameters());
      assertEquals(-0.0, regressionResults0.getMeanSquareError(), 0.01);
      assertArrayEquals(new double[] {2717.41224247, (-1.0), (-1.0), 932.3159975106462, (-1182.3837706675), 1428.58, (-4575.38895), 1285.36243853782, 1780.86987152}, doubleArray0, 0.01);
      
      double[] doubleArray2 = regressionResults0.getParameterEstimates();
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1.0, regressionResults0.getAdjustedRSquared(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals(0.0, regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(1.0, regressionResults0.getRSquared(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRegressionSumSquares(), 0.01);
      assertEquals(0L, regressionResults0.getN());
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals(9, regressionResults0.getNumberOfParameters());
      assertEquals(-0.0, regressionResults0.getMeanSquareError(), 0.01);
      assertArrayEquals(new double[] {2717.41224247, (-1.0), (-1.0), 932.3159975106462, (-1182.3837706675), 1428.58, (-4575.38895), 1285.36243853782, 1780.86987152}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2717.41224247, (-1.0), (-1.0), 932.3159975106462, (-1182.3837706675), 1428.58, (-4575.38895), 1285.36243853782, 1780.86987152}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = (-1918);
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, (-325L), (-1918), 0.0, 395.048293, (-1522.4838249138986), true, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(regressionResults0);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = regressionResults0.getCovarianceOfParameters(0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = regressionResults0.getParameterEstimate(0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      long long0 = regressionResults0.getN();
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals((-325L), long0);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long long1 = regressionResults0.getN();
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals((-325L), long1);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(long1 == long0);
      
      double[] doubleArray2 = regressionResults0.getParameterEstimates();
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-0.9557337256207775), regressionResults0.getMeanSquareError(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getTotalSumSquares(), 0.01);
      assertEquals((-1522.4838249138986), regressionResults0.getErrorSumSquares(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getAdjustedRSquared(), 0.01);
      assertEquals(Double.NaN, regressionResults0.getRSquared(), 0.01);
      assertEquals(1, regressionResults0.getNumberOfParameters());
      assertEquals(Double.NaN, regressionResults0.getRegressionSumSquares(), 0.01);
      assertTrue(regressionResults0.hasIntercept());
      assertEquals((-325L), regressionResults0.getN());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int int1 = (-1148);
      try { 
        regressionResults0.getParameterEstimate((-1918));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,918 out of [0, 0] range
         //
         verifyException("org.apache.commons.math4.stat.regression.RegressionResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 268.4;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3247.8363);
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      RegressionResults regressionResults0 = new RegressionResults(doubleArray0, doubleArray1, true, 0L, 2, 268.4, 2, 0.0, true, false);
      double double0 = regressionResults0.getStdErrorOfEstimate(2);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = regressionResults0.getMeanSquareError();
      assertEquals(-0.0, double1, 0.01);
      
      double double2 = regressionResults0.getParameterEstimate(0);
      assertEquals(268.4, double2, 0.01);
      
      boolean boolean0 = regressionResults0.hasIntercept();
      assertTrue(boolean0);
      
      double[] doubleArray2 = regressionResults0.getParameterEstimates();
      assertNotNull(doubleArray2);
      assertEquals(Double.NEGATIVE_INFINITY, regressionResults0.getRegressionSumSquares(), 0.01);
  }
}

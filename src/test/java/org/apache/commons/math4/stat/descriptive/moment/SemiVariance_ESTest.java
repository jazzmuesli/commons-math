/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:31:36 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.moment.SemiVariance;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SemiVariance_ESTest extends SemiVariance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      semiVariance0.setVarianceDirection(semiVariance0.UPSIDE_VARIANCE);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      
      SemiVariance.Direction semiVariance_Direction1 = semiVariance0.getVarianceDirection();
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance_Direction1);
      assertSame(semiVariance_Direction0, semiVariance_Direction1);
      assertSame(semiVariance_Direction1, semiVariance_Direction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[4];
      double double0 = semiVariance0.evaluate(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(1.3333333333333333, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[3];
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      double double0 = semiVariance0.evaluate(doubleArray0, semiVariance_Direction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      
      SemiVariance semiVariance1 = new SemiVariance(semiVariance0);
      assertFalse(semiVariance1.equals((Object)semiVariance0));
      assertNotNull(semiVariance1);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance1.getVarianceDirection());
      assertTrue(semiVariance1.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      boolean boolean0 = semiVariance_Direction0.getDirection();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      boolean boolean0 = semiVariance0.isBiasCorrected();
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[6];
      double double0 = semiVariance0.evaluate(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1964.9;
      double double0 = semiVariance0.evaluate(doubleArray0, 2146237610, 2146237610);
      assertArrayEquals(new double[] {1964.9, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertEquals(1930416.0050000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[2];
      double double0 = semiVariance0.evaluate(doubleArray0, (-750.0), semiVariance0.DOWNSIDE_VARIANCE);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[5];
      double double0 = semiVariance0.evaluate(doubleArray0, 1714.4149156595868);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(3674023.1287950845, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      SemiVariance semiVariance1 = semiVariance0.copy();
      assertFalse(semiVariance1.equals((Object)semiVariance0));
      assertNotNull(semiVariance1);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance1.getVarianceDirection());
      assertTrue(semiVariance1.isBiasCorrected());
      assertNotSame(semiVariance0, semiVariance1);
      assertNotSame(semiVariance1, semiVariance0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, semiVariance0.DOWNSIDE_VARIANCE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, (-2761), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[3];
      try { 
        semiVariance0.evaluate(doubleArray0, 252, (-2893));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-2,893)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[3];
      try { 
        semiVariance0.evaluate(doubleArray0, 2221, 2221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, (-1.0), semiVariance_Direction0, true, (-2146665206), (-2146665206));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[2];
      try { 
        semiVariance0.evaluate(doubleArray0, 0.0, semiVariance0.DOWNSIDE_VARIANCE, false, (-1720), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1,720)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[8];
      try { 
        semiVariance0.evaluate(doubleArray0, (-2042.346046), semiVariance_Direction0, false, 0, 1688);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        semiVariance0.evaluate(doubleArray0, 446.0, semiVariance_Direction0, false, 2146193088, 2147468181);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2146193088
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.SemiVariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, 965.1183667, semiVariance_Direction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.SemiVariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      // Undeclared exception!
      try { 
        semiVariance0.evaluate((double[]) null, 2130.16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.SemiVariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      try { 
        SemiVariance.copy(semiVariance0, (SemiVariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SemiVariance semiVariance0 = null;
      try {
        semiVariance0 = new SemiVariance((SemiVariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[2];
      double double0 = semiVariance0.evaluate(doubleArray0, (-3821.691821), semiVariance0.DOWNSIDE_VARIANCE, false, 0, 1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[2];
      double double0 = semiVariance0.evaluate(doubleArray0, 397.04, semiVariance0.DOWNSIDE_VARIANCE, false, 0, 1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(157640.76160000003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.UPSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[1];
      double double0 = semiVariance0.evaluate(doubleArray0, 1958.7102975491077, semiVariance_Direction0, false, 0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(SemiVariance.Direction.UPSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[3];
      double double0 = semiVariance0.evaluate(doubleArray0, (-1607.937847102), semiVariance_Direction0, true, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(true);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      double[] doubleArray0 = new double[0];
      double double0 = semiVariance0.evaluate(doubleArray0, 0.0, semiVariance0.DOWNSIDE_VARIANCE, true, 0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
      
      SemiVariance.copy(semiVariance0, semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertTrue(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1374.85671;
      double double0 = semiVariance0.evaluate(doubleArray0, semiVariance0.UPSIDE_VARIANCE);
      assertArrayEquals(new double[] {1374.85671, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(280034.2182269665, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[1];
      double double0 = semiVariance0.evaluate(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      double[] doubleArray0 = new double[0];
      double double0 = semiVariance0.evaluate(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      boolean boolean0 = semiVariance0.isBiasCorrected();
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
      
      SemiVariance semiVariance1 = semiVariance0.copy();
      assertFalse(semiVariance1.equals((Object)semiVariance0));
      assertNotNull(semiVariance1);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
      assertFalse(semiVariance1.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance1.getVarianceDirection());
      assertNotSame(semiVariance0, semiVariance1);
      assertNotSame(semiVariance1, semiVariance0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(semiVariance_Direction0);
      assertNotNull(semiVariance0);
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      
      SemiVariance.Direction semiVariance_Direction1 = semiVariance0.getVarianceDirection();
      assertTrue(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance_Direction1);
      assertSame(semiVariance_Direction0, semiVariance_Direction1);
      assertSame(semiVariance_Direction1, semiVariance_Direction0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance(false);
      assertNotNull(semiVariance0);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
      
      semiVariance0.setVarianceDirection(semiVariance0.DOWNSIDE_VARIANCE);
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
      assertFalse(semiVariance0.isBiasCorrected());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SemiVariance.Direction semiVariance_Direction0 = SemiVariance.Direction.DOWNSIDE;
      SemiVariance semiVariance0 = new SemiVariance(false, semiVariance_Direction0);
      semiVariance0.setBiasCorrected(false);
      assertFalse(semiVariance0.isBiasCorrected());
      assertEquals(SemiVariance.Direction.DOWNSIDE, semiVariance0.getVarianceDirection());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SemiVariance semiVariance0 = new SemiVariance();
      double[] doubleArray0 = new double[3];
      double double0 = semiVariance0.evaluate(doubleArray0, 1467.878115122674, semiVariance0.DOWNSIDE_VARIANCE);
      assertEquals(3231999.2412841413, double0, 0.01);
  }
}

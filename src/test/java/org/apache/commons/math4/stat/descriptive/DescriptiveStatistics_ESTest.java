/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:08:49 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math4.stat.descriptive.UnivariateStatistic;
import org.apache.commons.math4.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math4.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math4.stat.descriptive.moment.Mean;
import org.apache.commons.math4.stat.descriptive.moment.Skewness;
import org.apache.commons.math4.stat.descriptive.moment.Variance;
import org.apache.commons.math4.stat.descriptive.rank.Max;
import org.apache.commons.math4.stat.descriptive.rank.Min;
import org.apache.commons.math4.stat.descriptive.rank.Percentile;
import org.apache.commons.math4.stat.descriptive.summary.Sum;
import org.apache.commons.math4.stat.descriptive.summary.SumOfSquares;
import org.apache.commons.math4.stat.ranking.NaNStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DescriptiveStatistics_ESTest extends DescriptiveStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (-0.322111769955327);
      doubleArray0[2] = (-1050.3483);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMean();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.setMaxImpl(univariateStatistic0);
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.setKurtosisImpl(univariateStatistic1);
      UnivariateStatistic univariateStatistic2 = null;
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.setVarianceImpl((UnivariateStatistic) null);
      descriptiveStatistics0.setSkewnessImpl((UnivariateStatistic) null);
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.getSum();
      descriptiveStatistics0.setSumImpl(univariateStatistic0);
      descriptiveStatistics0.setWindowSize((-1));
      // Undeclared exception!
      try { 
        DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1);
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.addValue(0L);
      descriptiveStatistics0.getSum();
      descriptiveStatistics0.getPercentile(1);
      UnivariateStatistic univariateStatistic0 = null;
      descriptiveStatistics0.setSkewnessImpl((UnivariateStatistic) null);
      descriptiveStatistics0.setSumImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.setPercentileImpl((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (-0.322111769955327);
      doubleArray0[2] = (-1050.3483);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMean();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.setMaxImpl(univariateStatistic0);
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.setKurtosisImpl(univariateStatistic1);
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.getSum();
      descriptiveStatistics1.setSumImpl(univariateStatistic0);
      descriptiveStatistics0.setWindowSize((-1));
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      DescriptiveStatistics descriptiveStatistics2 = descriptiveStatistics1.copy();
      descriptiveStatistics1.getSortedValues();
      descriptiveStatistics0.setMinImpl(univariateStatistic0);
      descriptiveStatistics1.setMinImpl(univariateStatistic1);
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics1.removeMostRecentValue();
      descriptiveStatistics1.getWindowSize();
      descriptiveStatistics1.setSkewnessImpl(univariateStatistic2);
      descriptiveStatistics1.getMin();
      descriptiveStatistics0.getMean();
      descriptiveStatistics1.getMinImpl();
      descriptiveStatistics2.replaceMostRecentValue((-0.322111769955327));
      descriptiveStatistics2.getN();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1);
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.addValue(0L);
      descriptiveStatistics0.getMin();
      try { 
        descriptiveStatistics0.getPercentile(0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(151);
      descriptiveStatistics0.toString();
      descriptiveStatistics0.toString();
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(151);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(50.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics1.getPercentileImpl();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      try { 
        DescriptiveStatistics.copy((DescriptiveStatistics) null, (DescriptiveStatistics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1);
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.getN();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics1.getPercentileImpl();
      descriptiveStatistics0.apply(univariateStatistic0);
      descriptiveStatistics1.getGeometricMean();
      descriptiveStatistics0.addValue(1);
      descriptiveStatistics1.getGeometricMean();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics1.getMean();
      descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.getStandardDeviation();
      descriptiveStatistics1.getSumsq();
      descriptiveStatistics0.getStandardDeviation();
      descriptiveStatistics1.getSumsqImpl();
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getStandardDeviation();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.addValue((-0.322111769955327));
      descriptiveStatistics0.getValues();
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getSkewness();
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      descriptiveStatistics0.setMinImpl((UnivariateStatistic) null);
      try { 
        descriptiveStatistics0.replaceMostRecentValue((-0.322111769955327));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-693.51805201387);
      doubleArray0[1] = 1642.4046388957324;
      doubleArray0[2] = (-873.301781769);
      doubleArray0[3] = 919.42118194;
      doubleArray0[4] = 127.8;
      doubleArray0[5] = 2911.1896;
      doubleArray0[6] = (-2249.9405250569725);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 50.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.setWindowSize(9);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2023.74930138318);
      doubleArray0[1] = 294.1797;
      doubleArray0[2] = 1.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.getStandardDeviation();
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.addValue(0.0);
      descriptiveStatistics0.getValues();
      descriptiveStatistics0.getElement(0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setSumImpl(univariateStatistic0);
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.getVariance();
      descriptiveStatistics0.getGeometricMeanImpl();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.addValue((-0.322111769955327));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1554.3115));
      doubleArray0[0] = double0;
      Double double1 = new Double((-331.33390518935));
      Double double2 = new Double((-331.33390518935));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1554.3115));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[2]);
      doubleArray0[5] = double5;
      Double double6 = new Double(3.4);
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double((-331.33390518935));
      doubleArray0[8] = double8;
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      DescriptiveStatistics.copy(descriptiveStatistics1, descriptiveStatistics0);
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.removeMostRecentValue();
      descriptiveStatistics1.getStandardDeviation();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics1.getSumsqImpl();
      descriptiveStatistics1.setSumImpl(univariateStatistic0);
      descriptiveStatistics1.setKurtosisImpl(univariateStatistic1);
      try { 
        descriptiveStatistics1.getPercentile(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(75.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(75.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(2640.16949);
      doubleArray0[2] = double2;
      Double double3 = new Double(2640.16949);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1829.0));
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      doubleArray0[5] = double5;
      Double double6 = new Double(Double.NaN);
      doubleArray0[6] = double6;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSortedValues();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics1.getElement(0);
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getPercentile(18.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      UnivariateStatistic univariateStatistic0 = null;
      descriptiveStatistics0.setGeometricMeanImpl((UnivariateStatistic) null);
      descriptiveStatistics0.setSumImpl((UnivariateStatistic) null);
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.getPercentileImpl();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.getSum();
      descriptiveStatistics0.setKurtosisImpl(univariateStatistic0);
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.getSum();
      descriptiveStatistics0.getSumsq();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.setMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getSumsq();
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.getMin();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.setMeanImpl(univariateStatistic1);
      descriptiveStatistics0.setMaxImpl(univariateStatistic1);
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.getKurtosis();
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.getStandardDeviation();
      descriptiveStatistics0.getWindowSize();
      descriptiveStatistics0.apply(univariateStatistic2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getQuadraticMean();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.getN();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSkewnessImpl();
      descriptiveStatistics0.setSumImpl(univariateStatistic1);
      descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.getWindowSize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((-917.3220334888587));
      doubleArray0[2] = double2;
      Double double3 = new Double((-917.3220334888587));
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[5] = double5;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setSumImpl(univariateStatistic0);
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.getWindowSize();
      descriptiveStatistics0.apply(univariateStatistic1);
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setPercentileImpl(univariateStatistic2);
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      descriptiveStatistics0.getMaxImpl();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.6666666666666666;
      doubleArray0[1] = 425.6169;
      double double0 = (-1495.1634125660012);
      doubleArray0[2] = (-1495.1634125660012);
      doubleArray0[3] = 1.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getMax();
      UnivariateStatistic univariateStatistic0 = null;
      descriptiveStatistics0.setGeometricMeanImpl((UnivariateStatistic) null);
      descriptiveStatistics0.clear();
      descriptiveStatistics0.toString();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1536.1284534;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getVariance();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getGeometricMeanImpl();
      descriptiveStatistics0.setMinImpl(univariateStatistic0);
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getGeometricMeanImpl();
      descriptiveStatistics0.removeMostRecentValue();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement((-1411));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.getKurtosis();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.setSumsqImpl(univariateStatistic0);
      descriptiveStatistics0.getWindowSize();
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getWindowSize();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setMaxImpl(univariateStatistic1);
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.addValue((-1));
      descriptiveStatistics0.apply(univariateStatistic0);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      descriptiveStatistics0.toString();
      descriptiveStatistics1.getSortedValues();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.setMaxImpl(univariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-4981.1701);
      doubleArray0[3] = (-1215.832);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getMax();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.apply(univariateStatistic0);
      descriptiveStatistics0.getSkewnessImpl();
      descriptiveStatistics0.copy();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMeanImpl();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      UnivariateStatistic univariateStatistic1 = null;
      descriptiveStatistics0.setMeanImpl((UnivariateStatistic) null);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.setSumsqImpl(univariateStatistic0);
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getMean();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic1);
      descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setWindowSize(84);
      descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.removeMostRecentValue();
      descriptiveStatistics0.setSumsqImpl(univariateStatistic1);
      descriptiveStatistics0.getSumsq();
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic1);
      descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getSum();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.getWindowSize();
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.apply(univariateStatistic2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.replaceMostRecentValue(0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3763.64);
      doubleArray0[1] = 3.5;
      doubleArray0[2] = 77.396393957;
      doubleArray0[3] = 2.4849066497880004;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2377.7010657537;
      doubleArray0[6] = (-1686.6846468930582);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      descriptiveStatistics1.removeMostRecentValue();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.getPercentile(50.0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getGeometricMeanImpl();
      descriptiveStatistics0.setMeanImpl(univariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.4;
      doubleArray0[1] = 1295.2999422;
      doubleArray0[2] = 3256.41587822819;
      doubleArray0[3] = 50.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      descriptiveStatistics1.getGeometricMean();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics1.getMinImpl();
      descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics1.setSumImpl(univariateStatistic0);
      descriptiveStatistics1.getSum();
      descriptiveStatistics1.toString();
      descriptiveStatistics1.toString();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.setWindowSize((-1));
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      descriptiveStatistics1.setSkewnessImpl(univariateStatistic0);
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics1.setSkewnessImpl(univariateStatistic1);
      descriptiveStatistics1.copy();
      descriptiveStatistics0.setSumsqImpl(univariateStatistic2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1880.526217);
      doubleArray0[0] = double0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.setSumImpl((UnivariateStatistic) null);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumsqImpl();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getGeometricMeanImpl();
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.setMaxImpl(univariateStatistic1);
      descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.getValues();
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      descriptiveStatistics0.getSumsq();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.apply((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3186.0195633364006);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getMin();
      descriptiveStatistics0.getValues();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.setSumImpl(univariateStatistic0);
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.getMean();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-687.267890798716));
      doubleArray0[0] = double0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setMaxImpl(univariateStatistic0);
      descriptiveStatistics0.getPopulationVariance();
      UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.setSumsqImpl(univariateStatistic1);
      descriptiveStatistics0.getSum();
      UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.toString();
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.setVarianceImpl(univariateStatistic2);
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      descriptiveStatistics0.getGeometricMeanImpl();
      try { 
        descriptiveStatistics0.getPercentile((double) doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: -687.268, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      descriptiveStatistics0.getValues();
      descriptiveStatistics1.getVariance();
      DescriptiveStatistics descriptiveStatistics2 = descriptiveStatistics1.copy();
      descriptiveStatistics2.getStandardDeviation();
      descriptiveStatistics2.getWindowSize();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics2.getSkewnessImpl();
      descriptiveStatistics2.setGeometricMeanImpl(univariateStatistic0);
      descriptiveStatistics1.getSkewness();
      descriptiveStatistics2.getSortedValues();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-5127.9283359829315);
      doubleArray0[2] = (-351.68926457827);
      doubleArray0[3] = (-796.6540914156);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.getSumsq();
      descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.getSkewness();
      descriptiveStatistics0.replaceMostRecentValue(335.518900176086);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((-458.99982732));
      doubleArray0[4] = double4;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics1.getMaxImpl();
      descriptiveStatistics1.apply(univariateStatistic0);
      descriptiveStatistics1.setWindowSize(2);
      descriptiveStatistics0.apply(univariateStatistic0);
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics1.setMinImpl(univariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.copy();
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.getKurtosis();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(557.947091470111);
      doubleArray0[0] = double0;
      Double double1 = new Double(3249.63564);
      doubleArray0[1] = double1;
      Double double2 = new Double(3249.63564);
      doubleArray0[2] = double2;
      Double double3 = new Double(557.947091470111);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      doubleArray0[4] = double4;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getSkewness();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.toString();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumImpl();
      descriptiveStatistics0.getMax();
      descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setMeanImpl(univariateStatistic0);
      descriptiveStatistics0.getMeanImpl();
      descriptiveStatistics0.getMin();
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getSkewnessImpl();
      descriptiveStatistics0.addValue(38.0);
      descriptiveStatistics0.getMin();
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.getWindowSize();
      descriptiveStatistics0.getMaxImpl();
      descriptiveStatistics0.getVarianceImpl();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getWindowSize();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement((-1922));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.clear();
      descriptiveStatistics0.getMax();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getSumsqImpl();
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.getSumsq();
      descriptiveStatistics0.getSortedValues();
      descriptiveStatistics0.setVarianceImpl((UnivariateStatistic) null);
      descriptiveStatistics0.setMinImpl((UnivariateStatistic) null);
      descriptiveStatistics0.getKurtosis();
      descriptiveStatistics0.getPopulationVariance();
      descriptiveStatistics0.apply(univariateStatistic0);
      // Undeclared exception!
      try { 
        descriptiveStatistics0.setPercentileImpl((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(922.620032);
      doubleArray0[0] = double0;
      Double double1 = new Double(2196.67048135);
      doubleArray0[1] = double1;
      Double double2 = new Double((-717.454393849988));
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      doubleArray0[4] = double4;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getN();
      descriptiveStatistics0.getSkewness();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      try { 
        descriptiveStatistics0.getPercentile(922.620032);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 922.62, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((Double[]) null);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics1.getSumsqImpl();
      descriptiveStatistics1.setMeanImpl(univariateStatistic0);
      DescriptiveStatistics descriptiveStatistics2 = new DescriptiveStatistics(descriptiveStatistics1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((Double[]) null);
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      descriptiveStatistics1.getGeometricMeanImpl();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.012086732064244697);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getKurtosis();
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(doubleArray0);
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getMinImpl();
      descriptiveStatistics0.setMaxImpl(univariateStatistic0);
      descriptiveStatistics0.setVarianceImpl(univariateStatistic0);
      descriptiveStatistics1.getQuadraticMean();
      descriptiveStatistics1.getGeometricMean();
      descriptiveStatistics1.getQuadraticMean();
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics1);
      descriptiveStatistics0.getWindowSize();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0E-14;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.removeMostRecentValue();
      descriptiveStatistics0.getQuadraticMean();
      descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.getValues();
      try { 
        descriptiveStatistics0.setWindowSize((-2322));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (-2,322)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      descriptiveStatistics0.getValues();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getPercentileImpl();
      descriptiveStatistics0.setKurtosisImpl(univariateStatistic0);
      descriptiveStatistics0.addValue((-1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2.4849066497880004);
      assertEquals(2.4849066497880004, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2.4849066497880004, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2.4849066497880004);
      assertEquals(2.4849066497880004, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals(2.4849066497880004, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[3] = double3;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(4, doubleArray0.length);
      
      double double4 = descriptiveStatistics0.getPopulationVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(4, doubleArray0.length);
      
      Kurtosis kurtosis0 = (Kurtosis)descriptiveStatistics0.getKurtosisImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, kurtosis0.getN());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertNotNull(kurtosis0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(4, doubleArray0.length);
      
      try { 
        descriptiveStatistics0.setWindowSize((-1279));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (-1,279)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(815.5353991);
      assertEquals(815.5353991, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(2, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getMin();
      assertEquals(1.0, double2, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setSkewnessImpl(geometricMean0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      int int0 = descriptiveStatistics0.getWindowSize();
      assertEquals((-1), int0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Min min0 = (Min)descriptiveStatistics0.getMinImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(904);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMeanImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double1 = descriptiveStatistics0.getSumsq();
      assertEquals(0.0, double1, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = descriptiveStatistics0.getSortedValues();
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(doubleArray0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getSumsq();
      assertEquals(0.0, double2, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      descriptiveStatistics0.setMaxImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setVarianceImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setGeometricMeanImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getPercentile(1.8612097182041991);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      
      UnivariateStatistic univariateStatistic0 = null;
      // Undeclared exception!
      try { 
        descriptiveStatistics1.apply((UnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.clear();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.setWindowSize(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (0)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((double[]) null);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double[] doubleArray0 = descriptiveStatistics0.getSortedValues();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(doubleArray0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics((-1));
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getSum();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.clear();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(2);
      assertEquals(2, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals(2, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setVarianceImpl(geometricMean0);
      assertEquals(2, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals(2, descriptiveStatistics0.getWindowSize());
      assertEquals(2, descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      
      try { 
        descriptiveStatistics1.replaceMostRecentValue((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (0)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(665);
      assertEquals(665, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      SumOfSquares sumOfSquares0 = (SumOfSquares)descriptiveStatistics0.getSumsqImpl();
      assertEquals(665, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMaxImpl(sumOfSquares0);
      assertEquals(665, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.replaceMostRecentValue((-3663.574845743));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics((DescriptiveStatistics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics((-748));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (-748)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getMax();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Min min0 = (Min)descriptiveStatistics0.getMinImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMaxImpl(min0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double1 = descriptiveStatistics0.getSkewness();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(double1, double0, 0.01);
      
      double double2 = descriptiveStatistics0.getPercentile(Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      try { 
        descriptiveStatistics0.removeMostRecentValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2564.358928705544;
      doubleArray0[1] = (-871.6455);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2768.754394;
      doubleArray0[4] = (-0.07495595384947631);
      doubleArray0[5] = (-2898.0);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      descriptiveStatistics0.setWindowSize(205);
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.replaceMostRecentValue(3833.3647);
      assertEquals((-2898.0), double0, 0.01);
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Min min0 = (Min)descriptiveStatistics0.getMinImpl();
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Kurtosis kurtosis0 = (Kurtosis)descriptiveStatistics0.getKurtosisImpl();
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertNotNull(kurtosis0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Sum sum0 = (Sum)descriptiveStatistics0.getSumImpl();
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.getVariance();
      assertEquals(3645844.246831361, double1, 0.01);
      assertEquals(205, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {2564.358928705544, (-871.6455), 0.0, 2768.754394, (-0.07495595384947631), (-2898.0)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.5;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1470.872724500246;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long long0 = descriptiveStatistics0.getN();
      assertEquals(3L, long0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.getQuadraticMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.getVariance();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Variance variance0 = (Variance)descriptiveStatistics0.getVarianceImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getQuadraticMean();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Max max0 = (Max)descriptiveStatistics0.getMaxImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {4.5, Double.NaN, 1470.872724500246}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        descriptiveStatistics0.setPercentileImpl(variance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // percentile implementation org.apache.commons.math4.stat.descriptive.moment.Variance does not support setQuantile
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 232.2447;
      doubleArray0[1] = (-3260.91775585);
      doubleArray0[2] = 1326.6895994;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 50.0;
      doubleArray0[5] = (-239.0);
      doubleArray0[6] = (-1589.249);
      doubleArray0[7] = 1.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {232.2447, (-3260.91775585), 1326.6895994, 0.0, 50.0, (-239.0), (-1589.249), 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Variance variance0 = (Variance)descriptiveStatistics0.getVarianceImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {232.2447, (-3260.91775585), 1326.6895994, 0.0, 50.0, (-239.0), (-1589.249), 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.apply(variance0);
      assertEquals(1931404.2253573048, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {232.2447, (-3260.91775585), 1326.6895994, 0.0, 50.0, (-239.0), (-1589.249), 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      DescriptiveStatistics descriptiveStatistics0 = null;
      try {
        descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.setPercentileImpl(geometricMean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // percentile implementation org.apache.commons.math4.stat.descriptive.moment.GeometricMean does not support setQuantile
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(75);
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getSkewness();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Sum sum0 = (Sum)descriptiveStatistics0.getSumImpl();
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertNotNull(sum0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMeanImpl(sum0);
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double1 = descriptiveStatistics0.getSkewness();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(double1, double0, 0.01);
      
      Max max0 = (Max)descriptiveStatistics0.getMaxImpl();
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.addValue(0.0);
      assertEquals(75, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement(75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Variance variance0 = (Variance)descriptiveStatistics0.getVarianceImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMinImpl(mean0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean1 = (Mean)descriptiveStatistics0.getMinImpl();
      assertSame(mean1, mean0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      assertNotNull(mean1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.setPercentileImpl(mean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // percentile implementation org.apache.commons.math4.stat.descriptive.moment.Mean does not support setQuantile
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Sum sum0 = (Sum)descriptiveStatistics0.getSumImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(872.17);
      assertEquals(872.17, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 1\nmin: 872.17\nmax: 872.17\nmean: 872.17\nstd dev: 0.0\nmedian: 872.17\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = descriptiveStatistics0.getSortedValues();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(doubleArray1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {872.17}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Variance variance0 = (Variance)descriptiveStatistics0.getVarianceImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      descriptiveStatistics0.setSumsqImpl(variance0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      Max max0 = (Max)descriptiveStatistics0.getMaxImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      assertNotNull(max0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      descriptiveStatistics0.addValue(0.0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      Kurtosis kurtosis0 = (Kurtosis)descriptiveStatistics0.getKurtosisImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertNotNull(kurtosis0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
      
      long long0 = descriptiveStatistics0.getN();
      assertEquals(2L, long0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1727.29519167355;
      doubleArray0[1] = (-1324.36146293);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      Percentile percentile0 = (Percentile)descriptiveStatistics1.getPercentileImpl();
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertEquals(NaNStrategy.REMOVED, percentile0.getNaNStrategy());
      assertEquals(Percentile.EstimationType.LEGACY, percentile0.getEstimationType());
      assertNotNull(percentile0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      descriptiveStatistics1.setSumImpl(percentile0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertEquals(NaNStrategy.REMOVED, percentile0.getNaNStrategy());
      assertEquals(Percentile.EstimationType.LEGACY, percentile0.getEstimationType());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      double double0 = descriptiveStatistics1.replaceMostRecentValue(350.196);
      assertEquals(1.0, double0, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = descriptiveStatistics1.getValues();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(doubleArray1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 350.196}, doubleArray1, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      DescriptiveStatistics.copy(descriptiveStatistics1, descriptiveStatistics1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      int int0 = descriptiveStatistics0.getWindowSize();
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(4, doubleArray0.length);
      
      Min min0 = (Min)descriptiveStatistics1.getMinImpl();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      descriptiveStatistics1.setGeometricMeanImpl(min0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.getMax();
      assertEquals(1727.29519167355, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(4, doubleArray0.length);
      
      Skewness skewness0 = (Skewness)descriptiveStatistics0.getSkewnessImpl();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals(0L, skewness0.getN());
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(skewness0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(4, doubleArray0.length);
      
      Percentile percentile1 = (Percentile)descriptiveStatistics1.getSumImpl();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(percentile1, percentile0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals(Percentile.EstimationType.LEGACY, percentile1.getEstimationType());
      assertEquals(50.0, percentile1.getQuantile(), 0.01);
      assertEquals(NaNStrategy.REMOVED, percentile1.getNaNStrategy());
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(percentile1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(percentile1.equals((Object)percentile0));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
      
      double double3 = descriptiveStatistics1.getSum();
      assertEquals(350.196, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {1727.29519167355, (-1324.36146293), Double.NaN, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.removeMostRecentValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.getSkewness();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.getSum();
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      descriptiveStatistics0.setWindowSize((-1));
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = descriptiveStatistics1.getValues();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(doubleArray1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = descriptiveStatistics1.getSortedValues();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(doubleArray2);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double2 = descriptiveStatistics1.getSumsq();
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double3 = descriptiveStatistics1.getSum();
      assertEquals(0.0, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long long0 = descriptiveStatistics1.getN();
      assertEquals(0L, long0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray3 = descriptiveStatistics1.getSortedValues();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(doubleArray3);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      Sum sum0 = (Sum)descriptiveStatistics0.getSumImpl();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(0, doubleArray0.length);
      
      descriptiveStatistics1.setVarianceImpl(sum0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      descriptiveStatistics0.setWindowSize((-1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(0, doubleArray0.length);
      
      double double4 = descriptiveStatistics1.getGeometricMean();
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String string0 = descriptiveStatistics1.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      double double5 = descriptiveStatistics0.getKurtosis();
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(0, doubleArray0.length);
      
      double double6 = descriptiveStatistics1.getQuadraticMean();
      assertEquals(Double.NaN, double6, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      descriptiveStatistics0.setGeometricMeanImpl(sum0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(0, doubleArray0.length);
      
      double double7 = descriptiveStatistics0.getVariance();
      assertEquals(Double.NaN, double7, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double8 = descriptiveStatistics0.getMin();
      assertEquals(Double.NaN, double8, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double9 = descriptiveStatistics1.getVariance();
      assertEquals(0.0, double9, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Sum sum1 = (Sum)descriptiveStatistics1.getVarianceImpl();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertSame(sum1, sum0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(0.0, sum1.getResult(), 0.01);
      assertEquals(0L, sum1.getN());
      assertNotNull(sum1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(0, doubleArray0.length);
      
      double double10 = descriptiveStatistics0.getKurtosis();
      assertEquals(Double.NaN, double10, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double11 = descriptiveStatistics1.getStandardDeviation();
      assertEquals(Double.NaN, double11, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(double11, double5, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double12 = descriptiveStatistics1.getStandardDeviation();
      assertEquals(Double.NaN, double12, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertNotEquals(double12, double1, 0.01);
      assertEquals(double12, double7, 0.01);
      assertEquals(double12, double6, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(double12, double5, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double8, 0.01);
      assertEquals(double12, double11, 0.01);
      assertEquals(double12, double4, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(double12, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray4 = descriptiveStatistics0.getValues();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(doubleArray4);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      
      Percentile percentile0 = (Percentile)descriptiveStatistics0.getPercentileImpl();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertEquals(NaNStrategy.REMOVED, percentile0.getNaNStrategy());
      assertEquals(Percentile.EstimationType.LEGACY, percentile0.getEstimationType());
      assertNotNull(percentile0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        descriptiveStatistics1.getElement(2311);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3720.838729);
      doubleArray0[1] = (-494.5085655576075);
      doubleArray0[2] = 2811.1754917811845;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.getQuadraticMean();
      assertEquals(2707.513448056929, double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.getMin();
      assertEquals((-3720.838729), double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      descriptiveStatistics0.setMeanImpl(mean0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getKurtosis();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      GeometricMean geometricMean0 = (GeometricMean)descriptiveStatistics0.getGeometricMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      descriptiveStatistics0.setSumsqImpl(geometricMean0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, geometricMean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-3720.838729);
      doubleArray1[1] = (Double) (-3720.838729);
      doubleArray1[2] = (Double) 2811.1754917811845;
      doubleArray1[3] = (Double) 2811.1754917811845;
      doubleArray1[4] = (Double) (-494.5085655576075);
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray1[5] = double3;
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(doubleArray1);
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(6, doubleArray1.length);
      
      Min min0 = (Min)descriptiveStatistics1.getMinImpl();
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(6, doubleArray1.length);
      
      descriptiveStatistics0.setSumsqImpl(min0);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int int0 = descriptiveStatistics0.getWindowSize();
      assertEquals((-1), int0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 3\nmin: -3720.838729\nmax: 2811.1754917811845\nmean: -468.0572675921409\nstd dev: 3266.087445016583\nmedian: -494.5085655576075\nskewness: 0.03644208417636257\nkurtosis: NaN\n", string0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      long long0 = descriptiveStatistics0.getN();
      assertEquals(3L, long0);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      Skewness skewness0 = (Skewness)descriptiveStatistics0.getSkewnessImpl();
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, skewness0.getN());
      assertNotNull(skewness0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      double double4 = descriptiveStatistics0.getStandardDeviation();
      assertEquals(3266.087445016583, double4, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double5 = descriptiveStatistics0.getKurtosis();
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double6 = descriptiveStatistics0.getMax();
      assertEquals(2811.1754917811845, double6, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Percentile percentile0 = (Percentile)descriptiveStatistics0.getPercentileImpl();
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(NaNStrategy.REMOVED, percentile0.getNaNStrategy());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertEquals(Percentile.EstimationType.LEGACY, percentile0.getEstimationType());
      assertNotNull(percentile0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-3720.838729), (-494.5085655576075), 2811.1754917811845}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      try { 
        descriptiveStatistics0.setWindowSize((-615));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // window size must be positive (-615)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getSkewness();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      long long0 = descriptiveStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double1 = descriptiveStatistics0.getPopulationVariance();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals(double1, double0, 0.01);
      
      descriptiveStatistics0.addValue(0L);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double2 = descriptiveStatistics0.getSum();
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        descriptiveStatistics0.getPercentile(0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: 0, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(1932);
      assertEquals(1932, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      SumOfSquares sumOfSquares0 = (SumOfSquares)descriptiveStatistics0.getSumsqImpl();
      assertEquals(1932, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setSumsqImpl(sumOfSquares0);
      assertEquals(1932, descriptiveStatistics0.getWindowSize());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics(descriptiveStatistics0);
      assertEquals(1932, descriptiveStatistics0.getWindowSize());
      assertEquals(1932, descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      
      double double0 = descriptiveStatistics1.getPopulationVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals(1932, descriptiveStatistics0.getWindowSize());
      assertEquals(1932, descriptiveStatistics1.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      
      // Undeclared exception!
      try { 
        descriptiveStatistics1.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (-0.322111769955327);
      doubleArray0[2] = (-1050.3483);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = descriptiveStatistics0.getMean();
      assertEquals((-350.22347058998514), double0, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Min min0 = (Min)descriptiveStatistics0.getMinImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Variance variance0 = (Variance)descriptiveStatistics0.getVarianceImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      descriptiveStatistics0.setKurtosisImpl(variance0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      UnivariateStatistic univariateStatistic0 = null;
      double double1 = descriptiveStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      DescriptiveStatistics descriptiveStatistics1 = descriptiveStatistics0.copy();
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertNotSame(descriptiveStatistics1, descriptiveStatistics0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), descriptiveStatistics1.getWindowSize());
      assertNotNull(descriptiveStatistics1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics1.equals((Object)descriptiveStatistics0));
      assertEquals(3, doubleArray0.length);
      
      descriptiveStatistics0.setSkewnessImpl((UnivariateStatistic) null);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertEquals(3, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getPopulationVariance();
      assertEquals(245087.4056708667, double2, 0.01);
      assertNotSame(descriptiveStatistics0, descriptiveStatistics1);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {0.0, (-0.322111769955327), (-1050.3483)}, doubleArray0, 0.01);
      assertFalse(descriptiveStatistics0.equals((Object)descriptiveStatistics1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        descriptiveStatistics0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(904);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double0 = descriptiveStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setMeanImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      double double1 = descriptiveStatistics0.getSumsq();
      assertEquals(0.0, double1, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = descriptiveStatistics0.getSortedValues();
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(doubleArray0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = descriptiveStatistics0.getSumsq();
      assertEquals(0.0, double2, 0.01);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      descriptiveStatistics0.setMaxImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      String string0 = descriptiveStatistics0.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertNotNull(string0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      descriptiveStatistics0.setVarianceImpl(mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Percentile percentile0 = (Percentile)descriptiveStatistics0.getPercentileImpl();
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Percentile.EstimationType.LEGACY, percentile0.getEstimationType());
      assertEquals(NaNStrategy.REMOVED, percentile0.getNaNStrategy());
      assertEquals(50.0, percentile0.getQuantile(), 0.01);
      assertNotNull(percentile0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean1 = (Mean)descriptiveStatistics0.getVarianceImpl();
      assertSame(mean1, mean0);
      assertEquals(904, descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      assertEquals(0L, mean1.getN());
      assertNotNull(mean1);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3159.78;
      double double0 = 2654.7560731103003;
      doubleArray0[1] = 2654.7560731103003;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 963.4389307;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      int int0 = 172;
      long long0 = descriptiveStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      Mean mean0 = (Mean)descriptiveStatistics0.getMeanImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      
      try { 
        descriptiveStatistics0.setPercentileImpl(mean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // percentile implementation org.apache.commons.math4.stat.descriptive.moment.Mean does not support setQuantile
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-97.41043);
      doubleArray0[1] = 0.16698443218942854;
      double double0 = (-224.9541557110797);
      doubleArray0[2] = (-224.9541557110797);
      doubleArray0[3] = (-97.1261158894);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertNotNull(descriptiveStatistics0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-97.41043), 0.16698443218942854, (-224.9541557110797), (-97.1261158894)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = descriptiveStatistics0.replaceMostRecentValue((-97.41043));
      assertEquals((-97.1261158894), double1, 0.01);
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-97.41043), 0.16698443218942854, (-224.9541557110797), (-97.1261158894)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Min min0 = (Min)descriptiveStatistics0.getMinImpl();
      assertEquals((-1), descriptiveStatistics0.getWindowSize());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertNotNull(min0);
      assertEquals((-1), DescriptiveStatistics.INFINITE_WINDOW);
      assertArrayEquals(new double[] {(-97.41043), 0.16698443218942854, (-224.9541557110797), (-97.1261158894)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      try { 
        descriptiveStatistics0.setPercentileImpl(min0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // percentile implementation org.apache.commons.math4.stat.descriptive.rank.Min does not support setQuantile
         //
         verifyException("org.apache.commons.math4.stat.descriptive.DescriptiveStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(3457.0397108943);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1223.28));
      doubleArray0[1] = double1;
      Double double2 = new Double((-1223.28));
      doubleArray0[2] = double2;
      Double double3 = new Double((-0.15595963093172435));
      doubleArray0[3] = double3;
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics(doubleArray0);
      descriptiveStatistics0.getGeometricMean();
      descriptiveStatistics0.getStandardDeviation();
      UnivariateStatistic univariateStatistic0 = descriptiveStatistics0.getKurtosisImpl();
      descriptiveStatistics0.getSumsq();
      descriptiveStatistics0.addValue((double) doubleArray0[0]);
      descriptiveStatistics0.setMinImpl(univariateStatistic0);
      descriptiveStatistics0.getMean();
      descriptiveStatistics0.setSkewnessImpl(univariateStatistic0);
      descriptiveStatistics0.getPercentileImpl();
      DescriptiveStatistics.copy(descriptiveStatistics0, descriptiveStatistics0);
      descriptiveStatistics0.getMax();
      try { 
        descriptiveStatistics0.getPercentile((-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds quantile value: -1, must be in (0, 100]
         //
         verifyException("org.apache.commons.math4.stat.descriptive.rank.Percentile", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:29:56 GMT 2019
 */

package org.apache.commons.math4.stat.interval;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.interval.AgrestiCoullInterval;
import org.apache.commons.math4.stat.interval.ConfidenceInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AgrestiCoullInterval_ESTest extends AgrestiCoullInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AgrestiCoullInterval agrestiCoullInterval0 = new AgrestiCoullInterval();
      ConfidenceInterval confidenceInterval0 = agrestiCoullInterval0.createInterval(266, 0, 1.7827257129423813E-8);
      assertEquals(2.265442173138994E-18, confidenceInterval0.getUpperBound(), 0.01);
      assertEquals(1.7827257129423813E-8, confidenceInterval0.getConfidenceLevel(), 0.01);
      assertEquals((-3.8868842736669693E-19), confidenceInterval0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AgrestiCoullInterval agrestiCoullInterval0 = new AgrestiCoullInterval();
      // Undeclared exception!
      try { 
        agrestiCoullInterval0.createInterval(2, (-269), 1076.1418876096566);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of successes must be non-negative (-269)
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AgrestiCoullInterval agrestiCoullInterval0 = new AgrestiCoullInterval();
      // Undeclared exception!
      try { 
        agrestiCoullInterval0.createInterval(717, 717, 4.9E-324);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower bound (1) must be strictly less than upper bound (1)
         //
         verifyException("org.apache.commons.math4.stat.interval.ConfidenceInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AgrestiCoullInterval agrestiCoullInterval0 = new AgrestiCoullInterval();
      // Undeclared exception!
      try { 
        agrestiCoullInterval0.createInterval(72, 72, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // out of bounds confidence level 72, must be between 0 and 1
         //
         verifyException("org.apache.commons.math4.stat.interval.IntervalUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AgrestiCoullInterval agrestiCoullInterval0 = new AgrestiCoullInterval();
      ConfidenceInterval confidenceInterval0 = agrestiCoullInterval0.createInterval(1700, 122, 0.5);
      assertEquals(0.5, confidenceInterval0.getConfidenceLevel(), 0.01);
      assertEquals(0.06765456543853739, confidenceInterval0.getLowerBound(), 0.01);
      assertEquals(0.07610398480997828, confidenceInterval0.getUpperBound(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:27:24 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.summary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.summary.Product;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      product0.increment(0.0);
      assertEquals(0.0, product0.getResult(), 0.01);
      assertEquals(1L, product0.getN());
      
      double double0 = product0.getResult();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, product0.getResult(), 0.01);
      assertEquals(1L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      product0.increment((-1616.233293010099));
      assertEquals((-1616.233293010099), product0.getResult(), 0.01);
      assertEquals(1L, product0.getN());
      
      double double0 = product0.getResult();
      assertEquals((-1616.233293010099), double0, 0.01);
      assertEquals((-1616.233293010099), product0.getResult(), 0.01);
      assertEquals(1L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      product0.increment(0.0);
      assertEquals(1L, product0.getN());
      assertEquals(0.0, product0.getResult(), 0.01);
      
      long long0 = product0.getN();
      assertEquals(1L, long0);
      assertEquals(1L, product0.getN());
      assertEquals(0.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = product0.evaluate(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2394.465922);
      doubleArray0[3] = 32.7981;
      double double0 = product0.evaluate(doubleArray0, 2, 2);
      assertEquals((-78533.9327563482), double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2394.465922), 32.7981, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      product0.increment((-4470.3152099278));
      assertEquals(1L, product0.getN());
      assertEquals((-4470.3152099278), product0.getResult(), 0.01);
      
      Product product1 = product0.copy();
      assertNotSame(product0, product1);
      assertNotSame(product1, product0);
      assertTrue(product1.equals((Object)product0));
      assertEquals(1L, product0.getN());
      assertEquals((-4470.3152099278), product0.getResult(), 0.01);
      assertEquals(1L, product1.getN());
      assertEquals((-4470.3152099278), product1.getResult(), 0.01);
      assertNotNull(product1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      product0.increment(0.0);
      assertEquals(1L, product0.getN());
      assertEquals(0.0, product0.getResult(), 0.01);
      
      Product product1 = product0.copy();
      assertNotSame(product0, product1);
      assertNotSame(product1, product0);
      assertTrue(product1.equals((Object)product0));
      assertEquals(1L, product0.getN());
      assertEquals(0.0, product0.getResult(), 0.01);
      assertEquals(0.0, product1.getResult(), 0.01);
      assertEquals(1L, product1.getN());
      assertNotNull(product1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      // Undeclared exception!
      try { 
        product0.evaluate((double[]) null, (double[]) null, (-4293), (-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[7];
      try { 
        product0.evaluate(doubleArray0, doubleArray0, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weigth array must contain at least one non-zero value
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        product0.evaluate(doubleArray0, doubleArray1, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        product0.evaluate(doubleArray0, doubleArray0, 337, 337);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 337
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        product0.evaluate(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[0];
      try { 
        product0.evaluate(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weigth array must contain at least one non-zero value
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        product0.evaluate(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      // Undeclared exception!
      try { 
        product0.evaluate((double[]) null, 1451, 1451);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[0];
      try { 
        product0.evaluate(doubleArray0, (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-1)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[2];
      try { 
        product0.evaluate(doubleArray0, 1475, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Product.copy((Product) null, (Product) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Product product0 = null;
      try {
        product0 = new Product((Product) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3584.843;
      double double0 = product0.evaluate(doubleArray0, doubleArray0, 0, 1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {3584.843, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[21];
      double double0 = product0.evaluate(doubleArray0, 6, 6);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(21, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double double0 = product0.getResult();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      Product.copy(product0, product0);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      long long0 = product0.getN();
      assertEquals(0L, long0);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Product product0 = new Product();
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = 2479.175974319092;
      double double0 = product0.evaluate(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0L, product0.getN());
      assertEquals(21, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[8];
      double double0 = product0.evaluate(doubleArray0);
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, product0.getN());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Product product0 = new Product();
      double[] doubleArray0 = new double[8];
      double double0 = product0.evaluate(doubleArray0, 0, 0);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.evaluate((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.summary.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Product product0 = new Product();
      product0.clear();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Product product0 = new Product();
      Product product1 = product0.copy();
      boolean boolean0 = product1.equals(product0);
      assertEquals(1.0, product1.getResult(), 0.01);
      assertEquals(0L, product1.getN());
      assertNotSame(product1, product0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Product product0 = new Product();
      Product product1 = new Product(product0);
      assertEquals(0L, product1.getN());
      assertEquals(1.0, product1.getResult(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:40:57 GMT 2019
 */

package org.apache.commons.math4.stat.descriptive.moment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math4.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math4.stat.descriptive.summary.SumOfLogs;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GeometricMean_ESTest extends GeometricMean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((-864L), (-864L), (-864L)).when(sumOfLogs0).getN();
      GeometricMean geometricMean1 = new GeometricMean(sumOfLogs0);
      GeometricMean geometricMean2 = geometricMean0.copy();
      geometricMean2.increment(0.0);
      GeometricMean geometricMean3 = geometricMean2.copy();
      GeometricMean.copy(geometricMean2, geometricMean2);
      geometricMean2.equals(geometricMean3);
      geometricMean1.equals(geometricMean3);
      geometricMean3.increment((-1274.6));
      geometricMean0.setSumLogImpl(geometricMean1);
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = geometricMean0.getSumLogImpl();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1274.6);
      doubleArray0[1] = 0.0;
      try { 
        storelessUnivariateStatistic0.incrementAll(doubleArray0, 3853, (-709));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // length (-709)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(sumOfLogs0).toString();
      doReturn((-1757.0), (-1757.0), 3701.929569209024).when(sumOfLogs0).evaluate(any(double[].class) , anyInt() , anyInt());
      doReturn((-804L), 9223372036854775807L, 9223372036854775807L, (-804L), (-804L)).when(sumOfLogs0).getN();
      doReturn(0.0).when(sumOfLogs0).getResult();
      SumOfLogs sumOfLogs1 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(sumOfLogs1).getN();
      SumOfLogs sumOfLogs2 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn(sumOfLogs0, sumOfLogs0, sumOfLogs1).when(sumOfLogs2).copy();
      doReturn(2222.21084211596).when(sumOfLogs2).evaluate(any(double[].class) , anyInt() , anyInt());
      doReturn(0L, 9223372036854775807L, 0L).when(sumOfLogs2).getN();
      doReturn(0.0).when(sumOfLogs2).getResult();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs2);
      geometricMean0.getN();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      geometricMean0.evaluate(doubleArray0, 536, (-2777));
      GeometricMean geometricMean1 = geometricMean0.copy();
      GeometricMean geometricMean2 = geometricMean0.copy();
      geometricMean1.getN();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      geometricMean1.evaluate(doubleArray1);
      geometricMean1.evaluate(doubleArray1, 741, 0);
      geometricMean0.getResult();
      geometricMean1.getResult();
      geometricMean1.evaluate(doubleArray0);
      geometricMean1.getSumLogImpl();
      geometricMean1.getN();
      geometricMean2.getSumLogImpl();
      geometricMean0.copy();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn(2233L, (-1L)).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      double[] doubleArray0 = new double[6];
      geometricMean0.increment(0.0);
      doubleArray0[0] = (-2411.4374147);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-83.82640673);
      doubleArray0[3] = 372.0;
      doubleArray0[4] = 0.0;
      geometricMean0.incrementAll(doubleArray0);
      geometricMean0.getN();
      geometricMean0.getResult();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      SumOfLogs sumOfLogs1 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn(sumOfLogs0).when(sumOfLogs1).copy();
      doReturn((-476.03558667)).when(sumOfLogs1).evaluate(any(double[].class) , anyInt() , anyInt());
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs1);
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.2610609958205195E-8);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.8019036618832785E141;
      geometricMean0.evaluate(doubleArray0, (-490), 0);
      geometricMean1.increment((-209.64290219699163));
      geometricMean0.increment(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((-1450L)).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      geometricMean0.getN();
      GeometricMean geometricMean1 = new GeometricMean();
      SumOfLogs sumOfLogs1 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      GeometricMean geometricMean2 = new GeometricMean(sumOfLogs1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1450L);
      doubleArray0[1] = (double) (-1450L);
      doubleArray0[2] = (double) (-1450L);
      geometricMean1.clear();
      doubleArray0[3] = (double) (-1450L);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1450L);
      try { 
        geometricMean2.incrementAll(doubleArray0, (-703), (-703));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-703)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((-1361L)).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      SumOfLogs sumOfLogs1 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      GeometricMean geometricMean1 = new GeometricMean(sumOfLogs1);
      geometricMean0.setSumLogImpl(geometricMean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      double double0 = 0.0;
      geometricMean1.increment(0.0);
      GeometricMean.copy(geometricMean0, geometricMean0);
      GeometricMean.copy(geometricMean1, geometricMean1);
      geometricMean1.getResult();
      geometricMean0.increment(0.0);
      geometricMean0.getResult();
      geometricMean0.getResult();
      geometricMean0.clear();
      geometricMean0.getN();
      GeometricMean geometricMean2 = geometricMean0.copy();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-1565.1409352691);
      doubleArray0[5] = 0.0;
      try { 
        geometricMean2.evaluate(doubleArray0, 2471, 2471);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(sumOfLogs0).toString();
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      doReturn(0L, 0L, 0L).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = geometricMean0.getSumLogImpl();
      geometricMean0.setSumLogImpl(storelessUnivariateStatistic0);
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = geometricMean0.getSumLogImpl();
      geometricMean0.setSumLogImpl(storelessUnivariateStatistic1);
      geometricMean0.getResult();
      geometricMean0.clear();
      GeometricMean.copy(geometricMean0, geometricMean0);
      // Undeclared exception!
      try { 
        geometricMean0.getN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      geometricMean0.getSumLogImpl();
      // Undeclared exception!
      try { 
        geometricMean0.getN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeometricMean geometricMean0 = null;
      GeometricMean geometricMean1 = null;
      try {
        geometricMean1 = new GeometricMean((GeometricMean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      geometricMean0.increment((-2.6993478083348727E-303));
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      geometricMean1.getN();
      geometricMean1.copy();
      GeometricMean geometricMean2 = new GeometricMean();
      GeometricMean.copy(geometricMean1, geometricMean2);
      geometricMean0.equals(geometricMean2);
      // Undeclared exception!
      try { 
        geometricMean2.evaluate((double[]) null, 0, 1230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      doReturn(0L, 0L).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      double[] doubleArray0 = new double[2];
      geometricMean0.getResult();
      doubleArray0[0] = 374.3;
      doubleArray0[1] = (-1.0);
      geometricMean0.incrementAll(doubleArray0);
      double[] doubleArray1 = new double[0];
      geometricMean0.incrementAll(doubleArray1);
      geometricMean0.getResult();
      GeometricMean.copy(geometricMean0, geometricMean0);
      GeometricMean geometricMean1 = null;
      try {
        geometricMean1 = new GeometricMean(geometricMean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      doReturn(0.0).when(sumOfLogs0).evaluate(any(double[].class) , anyInt() , anyInt());
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 672.54;
      doubleArray0[1] = 672.54;
      double double2 = 417.1784173;
      doubleArray0[2] = 417.1784173;
      double double3 = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 696.66609345;
      double double4 = 499.669293408;
      doubleArray0[6] = 499.669293408;
      doubleArray0[7] = 2843.5339517;
      geometricMean0.evaluate(doubleArray0);
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      // Undeclared exception!
      try { 
        geometricMean1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3115.6651349048448;
      doubleArray0[1] = 3467.8573881;
      doubleArray0[2] = (-412.67441706);
      doubleArray0[3] = (-4.279090925831093E-8);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-211.839135);
      doubleArray0[6] = 1.033464507572145E142;
      doubleArray0[7] = (-2762.83);
      // Undeclared exception!
      try { 
        geometricMean1.evaluate(doubleArray0, 342, 342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sumOfLogs0).toString();
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      doReturn(0L, 0L, 0L).when(sumOfLogs0).getN();
      GeometricMean geometricMean1 = new GeometricMean(sumOfLogs0);
      GeometricMean geometricMean2 = geometricMean0.copy();
      double double0 = 0.0;
      geometricMean2.increment(0.0);
      GeometricMean geometricMean3 = geometricMean2.copy();
      GeometricMean.copy(geometricMean2, geometricMean2);
      geometricMean2.equals(geometricMean3);
      double double1 = (-1274.6);
      geometricMean1.equals(geometricMean3);
      geometricMean3.increment((-1274.6));
      geometricMean0.setSumLogImpl(geometricMean1);
      geometricMean0.getSumLogImpl();
      geometricMean1.getSumLogImpl();
      geometricMean1.clear();
      geometricMean3.clear();
      geometricMean0.clear();
      GeometricMean geometricMean4 = geometricMean1.copy();
      // Undeclared exception!
      try { 
        GeometricMean.copy(geometricMean4, geometricMean4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      geometricMean1.getN();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 362.411;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      geometricMean0.evaluate(doubleArray0);
      GeometricMean geometricMean2 = geometricMean1.copy();
      geometricMean2.copy();
      geometricMean1.increment(0L);
      try { 
        geometricMean1.setSumLogImpl(geometricMean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null).when(sumOfLogs0).copy();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      // Undeclared exception!
      try { 
        geometricMean1.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SumOfLogs sumOfLogs0 = null;
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      geometricMean0.equals((Object) null);
      // Undeclared exception!
      try { 
        geometricMean0.setSumLogImpl((StorelessUnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeometricMean geometricMean0 = null;
      try { 
        GeometricMean.copy((GeometricMean) null, (GeometricMean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null, (SumOfLogs) null).when(sumOfLogs0).copy();
      doReturn(0.0).when(sumOfLogs0).evaluate(any(double[].class) , anyInt() , anyInt());
      doReturn(0L, 0L).when(sumOfLogs0).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1926.512);
      doubleArray1[2] = (-1.0);
      geometricMean0.incrementAll(doubleArray1);
      doubleArray0[0] = 1123.8;
      geometricMean0.getResult();
      doubleArray0[1] = 1.0386032577072378E209;
      doubleArray0[2] = 1824.7;
      GeometricMean geometricMean1 = geometricMean0.copy();
      doubleArray0[3] = 4.7613641572445654E170;
      int int0 = 155;
      int int1 = 894;
      geometricMean0.evaluate(doubleArray0, 155, 894);
      geometricMean0.clear();
      geometricMean0.getResult();
      GeometricMean.copy(geometricMean0, geometricMean0);
      // Undeclared exception!
      try { 
        geometricMean1.increment((-2925.2929434589455));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      GeometricMean geometricMean1 = new GeometricMean();
      GeometricMean geometricMean2 = new GeometricMean(geometricMean1);
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = geometricMean2.getSumLogImpl();
      geometricMean0.setSumLogImpl(storelessUnivariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      geometricMean0.increment(2.244414150254963E-158);
      geometricMean0.getResult();
      double[] doubleArray0 = new double[0];
      GeometricMean geometricMean1 = geometricMean0.copy();
      geometricMean1.getResult();
      try { 
        geometricMean0.evaluate(doubleArray0, 935, 935);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      GeometricMean geometricMean1 = geometricMean0.copy();
      geometricMean0.increment(Double.NaN);
      geometricMean0.clear();
      GeometricMean.copy(geometricMean0, geometricMean0);
      geometricMean0.getN();
      geometricMean1.getN();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1.347867098583136E42);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      int int0 = 0;
      try { 
        geometricMean0.evaluate(doubleArray0, 1675, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-975.8);
      doubleArray0[1] = 404.5670575224;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-480.963015);
      doubleArray0[4] = (-569.8469037);
      doubleArray0[5] = (-1706.79951459);
      doubleArray0[6] = (-2460.3585632);
      doubleArray0[7] = 0.0;
      try { 
        geometricMean0.evaluate(doubleArray0, (-3190), (-3190));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // start position (-3,190)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      // Undeclared exception!
      try { 
        geometricMean0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-482.82133141542704);
      geometricMean0.getN();
      GeometricMean.copy(geometricMean0, geometricMean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(sumOfLogs0).toString();
      doReturn(0.0, 0.0, 0.0).when(sumOfLogs0).evaluate(any(double[].class) , anyInt() , anyInt());
      doReturn(0L, 0L, 0L, 0L, 0L).when(sumOfLogs0).getN();
      SumOfLogs sumOfLogs1 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn(sumOfLogs0, sumOfLogs0, (SumOfLogs) null).when(sumOfLogs1).copy();
      doReturn(2222.21084211596).when(sumOfLogs1).evaluate(any(double[].class) , anyInt() , anyInt());
      doReturn(0L, 0L).when(sumOfLogs1).getN();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs1);
      geometricMean0.getN();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      geometricMean0.evaluate(doubleArray0, 536, (-2777));
      GeometricMean geometricMean1 = geometricMean0.copy();
      GeometricMean geometricMean2 = geometricMean0.copy();
      geometricMean1.getN();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      geometricMean1.evaluate(doubleArray1);
      geometricMean1.evaluate(doubleArray1, 741, 0);
      geometricMean0.getResult();
      geometricMean1.getResult();
      geometricMean1.evaluate(doubleArray0);
      geometricMean1.getSumLogImpl();
      geometricMean1.getN();
      geometricMean2.getSumLogImpl();
      geometricMean0.copy();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SumOfLogs sumOfLogs0 = mock(SumOfLogs.class, new ViolatedAssumptionAnswer());
      doReturn((SumOfLogs) null, (SumOfLogs) null).when(sumOfLogs0).copy();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      geometricMean0.equals("Oyvyi^cMda>d8gHv");
      geometricMean0.increment(251.4076200037625);
      GeometricMean geometricMean1 = geometricMean0.copy();
      geometricMean1.equals("Os");
      geometricMean0.copy();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GeometricMean geometricMean0 = new GeometricMean();
      GeometricMean geometricMean1 = new GeometricMean(geometricMean0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-320.263285965064);
      geometricMean1.evaluate(doubleArray0, 0, 0);
      doubleArray0[1] = (-2617.992037495783);
      doubleArray0[2] = 72.03550406682;
      double double0 = 225.712302747673;
      doubleArray0[3] = 225.712302747673;
      doubleArray0[4] = 0.0;
      GeometricMean.copy(geometricMean1, geometricMean0);
      doubleArray0[5] = (-133.3894569043);
      geometricMean0.setSumLogImpl(geometricMean1);
      geometricMean1.incrementAll(doubleArray0);
      GeometricMean geometricMean2 = geometricMean1.copy();
      geometricMean0.getSumLogImpl();
      geometricMean0.increment(0.0);
      geometricMean2.getResult();
      geometricMean0.clear();
      geometricMean2.getResult();
      geometricMean2.copy();
      GeometricMean.copy(geometricMean0, geometricMean1);
      try { 
        geometricMean2.setSumLogImpl(geometricMean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math4.stat.descriptive.moment.GeometricMean", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:24:45 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Set;
import org.apache.commons.math4.util.DefaultTransformer;
import org.apache.commons.math4.util.NumberTransformer;
import org.apache.commons.math4.util.TransformerMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformerMap_ESTest extends TransformerMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.hashCode();
      NumberTransformer numberTransformer0 = null;
      Class<Integer> class0 = Integer.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap1.putTransformer(class0, (NumberTransformer) null);
      // Undeclared exception!
      try { 
        transformerMap0.equals(transformerMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.clear();
      Class<DefaultTransformer> class0 = DefaultTransformer.class;
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap0.putTransformer(class0, transformerMap1);
      transformerMap0.transformers();
      transformerMap0.equals(transformerMap1);
      TransformerMap transformerMap2 = new TransformerMap();
      transformerMap0.equals(transformerMap2);
      Class<DefaultTransformer> class1 = DefaultTransformer.class;
      NumberTransformer numberTransformer0 = transformerMap0.putTransformer(class1, (NumberTransformer) null);
      transformerMap1.putTransformer(class0, numberTransformer0);
      NumberTransformer numberTransformer1 = transformerMap1.removeTransformer(class0);
      transformerMap2.equals(numberTransformer0);
      transformerMap1.transformers();
      Class<TransformerMap> class2 = TransformerMap.class;
      transformerMap2.putTransformer(class2, numberTransformer0);
      transformerMap2.equals(transformerMap0);
      Class<DefaultTransformer> class3 = DefaultTransformer.class;
      transformerMap2.putTransformer(class3, numberTransformer1);
      Class<String> class4 = String.class;
      transformerMap0.removeTransformer(class4);
      transformerMap1.equals(class1);
      Class<TransformerMap> class5 = TransformerMap.class;
      transformerMap1.equals(numberTransformer0);
      transformerMap0.getTransformer(class5);
      transformerMap2.equals(transformerMap0);
      transformerMap0.transformers();
      transformerMap1.classes();
      transformerMap2.hashCode();
      transformerMap0.transformers();
      transformerMap1.hashCode();
      transformerMap0.transformers();
      transformerMap0.transformers();
      Class<Long> class6 = Long.class;
      transformerMap2.removeTransformer(class6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Integer> class0 = Integer.class;
      transformerMap0.clear();
      transformerMap0.transform(class0);
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap1.hashCode();
      transformerMap0.putTransformer(class0, transformerMap1);
      transformerMap0.containsTransformer((NumberTransformer) null);
      transformerMap0.hashCode();
      transformerMap1.putTransformer(class0, transformerMap0);
      Class<Integer> class1 = Integer.class;
      transformerMap1.removeTransformer(class1);
      transformerMap1.clear();
      transformerMap1.removeTransformer(class0);
      Class<Integer> class2 = Integer.class;
      transformerMap0.getTransformer(class2);
      transformerMap0.transformers();
      transformerMap1.classes();
      TransformerMap transformerMap2 = new TransformerMap();
      transformerMap0.equals(transformerMap2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.transformers();
      transformerMap0.transformers();
      transformerMap0.hashCode();
      Class<DefaultTransformer> class0 = DefaultTransformer.class;
      transformerMap0.getTransformer(class0);
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.transformers();
      transformerMap0.containsClass(class0);
      transformerMap0.classes();
      transformerMap0.classes();
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.classes();
      Class<Float> class1 = Float.class;
      transformerMap0.putTransformer(class1, (NumberTransformer) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.hashCode();
      Class<Integer> class0 = Integer.class;
      transformerMap0.removeTransformer(class0);
      transformerMap0.clear();
      transformerMap0.hashCode();
      NumberTransformer numberTransformer0 = null;
      transformerMap0.clear();
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.containsTransformer((NumberTransformer) null);
      try { 
        transformerMap0.transform("org.apache.commons.math4.exception.MathIllegalArgumentException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Conversion Exception in Transformation: java.lang.String@0000000003
         //
         verifyException("org.apache.commons.math4.util.DefaultTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      try { 
        transformerMap0.transform("8A$m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Conversion Exception in Transformation: java.lang.String@0000000003
         //
         verifyException("org.apache.commons.math4.util.DefaultTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      Class<Integer> class0 = Integer.class;
      transformerMap0.putTransformer(class0, transformerMap1);
      transformerMap0.transform(transformerMap1);
      transformerMap0.equals(transformerMap1);
      Class<DefaultTransformer> class1 = DefaultTransformer.class;
      transformerMap0.removeTransformer(class1);
      transformerMap1.getTransformer(class0);
      TransformerMap transformerMap2 = new TransformerMap();
      transformerMap0.transform(transformerMap2);
      transformerMap0.classes();
      transformerMap1.transformers();
      transformerMap1.containsTransformer((NumberTransformer) null);
      transformerMap0.containsClass(class1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.hashCode();
      transformerMap0.containsTransformer((NumberTransformer) null);
      Class<Integer> class0 = Integer.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap1.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.clear();
      transformerMap0.equals(transformerMap1);
      transformerMap0.clear();
      // Undeclared exception!
      try { 
        transformerMap0.transform((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.TransformerMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Object> class0 = Object.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.containsTransformer((NumberTransformer) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Byte> class0 = Byte.class;
      transformerMap0.removeTransformer(class0);
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.getTransformer(class0);
      transformerMap0.transformers();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.containsTransformer((NumberTransformer) null);
      transformerMap0.transformers();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap0.hashCode();
      transformerMap0.transform(transformerMap1);
      transformerMap0.transform(transformerMap1);
      transformerMap0.clear();
      transformerMap0.clear();
      transformerMap0.transform(transformerMap1);
      Class<Short> class0 = Short.class;
      Class<Double> class1 = Double.class;
      transformerMap1.putTransformer(class1, transformerMap0);
      transformerMap1.clear();
      Class<Double> class2 = Double.class;
      transformerMap1.removeTransformer(class2);
      transformerMap1.transform(class0);
      Class<TransformerMap> class3 = TransformerMap.class;
      transformerMap0.putTransformer(class3, transformerMap1);
      transformerMap0.containsClass(class0);
      transformerMap0.equals(class0);
      transformerMap1.transform(class3);
      transformerMap0.hashCode();
      transformerMap1.hashCode();
      Class<TransformerMap> class4 = TransformerMap.class;
      transformerMap0.removeTransformer(class4);
      transformerMap1.hashCode();
      // Undeclared exception!
      try { 
        transformerMap1.transform((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.TransformerMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.clear();
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap0.containsTransformer(transformerMap1);
      TransformerMap transformerMap2 = new TransformerMap();
      Class<Double> class0 = Double.class;
      TransformerMap transformerMap3 = new TransformerMap();
      transformerMap0.putTransformer(class0, transformerMap3);
      Class<TransformerMap> class1 = TransformerMap.class;
      transformerMap2.hashCode();
      transformerMap2.putTransformer(class1, transformerMap1);
      transformerMap0.equals(transformerMap2);
      transformerMap2.classes();
      Class<String> class2 = String.class;
      transformerMap2.removeTransformer(class2);
      transformerMap0.classes();
      Class<String> class3 = String.class;
      transformerMap2.putTransformer(class3, (NumberTransformer) null);
      transformerMap3.removeTransformer(class1);
      transformerMap2.containsTransformer((NumberTransformer) null);
      transformerMap3.equals((Object) null);
      transformerMap3.containsClass(class3);
      transformerMap0.equals((Object) null);
      // Undeclared exception!
      try { 
        transformerMap2.transform((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.TransformerMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap0.equals(transformerMap1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<Long> class0 = Long.class;
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.clear();
      transformerMap0.containsClass(class0);
      Class<Object> class1 = Object.class;
      transformerMap0.putTransformer(class1, (NumberTransformer) null);
      Set<Class<?>> set0 = transformerMap0.classes();
      transformerMap0.equals(set0);
      Set<Class<?>> set1 = transformerMap0.classes();
      transformerMap0.containsTransformer((NumberTransformer) null);
      transformerMap0.containsClass(class1);
      transformerMap0.transform(set1);
      transformerMap0.containsTransformer((NumberTransformer) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      TransformerMap transformerMap1 = new TransformerMap();
      Class<TransformerMap> class0 = TransformerMap.class;
      transformerMap0.putTransformer(class0, transformerMap1);
      Class<Float> class1 = Float.class;
      transformerMap0.equals((Object) null);
      transformerMap1.removeTransformer(class1);
      transformerMap0.putTransformer(class0, transformerMap1);
      transformerMap0.transform(transformerMap1);
      transformerMap0.hashCode();
      transformerMap1.hashCode();
      transformerMap0.transform(transformerMap1);
      transformerMap0.removeTransformer(class0);
      transformerMap1.equals(class1);
      transformerMap0.hashCode();
      transformerMap0.removeTransformer(class1);
      Class<Byte> class2 = Byte.class;
      transformerMap0.clear();
      transformerMap0.containsClass(class2);
      transformerMap1.classes();
      transformerMap0.hashCode();
      transformerMap1.transformers();
      transformerMap1.clear();
      transformerMap1.putTransformer(class0, (NumberTransformer) null);
      transformerMap0.removeTransformer(class2);
      transformerMap1.hashCode();
      transformerMap0.containsClass(class0);
      transformerMap0.clear();
      transformerMap1.classes();
      transformerMap0.transformers();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.clear();
      Class<DefaultTransformer> class0 = DefaultTransformer.class;
      TransformerMap transformerMap1 = new TransformerMap();
      assertTrue(transformerMap1.equals((Object)transformerMap0));
      
      transformerMap0.putTransformer(class0, transformerMap1);
      transformerMap0.transformers();
      transformerMap0.equals(transformerMap1);
      TransformerMap transformerMap2 = new TransformerMap();
      transformerMap0.equals(transformerMap2);
      Class<DefaultTransformer> class1 = DefaultTransformer.class;
      NumberTransformer numberTransformer0 = transformerMap0.putTransformer(class1, (NumberTransformer) null);
      transformerMap1.putTransformer(class0, numberTransformer0);
      TransformerMap transformerMap3 = (TransformerMap)transformerMap1.removeTransformer(class0);
      transformerMap2.equals(numberTransformer0);
      transformerMap1.transformers();
      Class<TransformerMap> class2 = TransformerMap.class;
      transformerMap2.putTransformer(class2, numberTransformer0);
      transformerMap1.putTransformer(class0, (NumberTransformer) null);
      transformerMap2.equals(transformerMap0);
      TransformerMap transformerMap4 = new TransformerMap();
      Class<String> class3 = String.class;
      transformerMap0.removeTransformer(class3);
      boolean boolean0 = transformerMap1.equals(class1);
      assertFalse(boolean0);
      
      Class<TransformerMap> class4 = TransformerMap.class;
      transformerMap1.equals(numberTransformer0);
      transformerMap0.getTransformer(class4);
      transformerMap2.equals(transformerMap0);
      transformerMap0.transformers();
      transformerMap1.classes();
      transformerMap2.hashCode();
      transformerMap0.transformers();
      transformerMap1.hashCode();
      transformerMap0.transformers();
      transformerMap0.transformers();
      Class<Long> class5 = Long.class;
      transformerMap2.removeTransformer(class5);
      transformerMap3.containsTransformer((NumberTransformer) null);
      boolean boolean1 = transformerMap0.equals("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      transformerMap0.hashCode();
      transformerMap0.transformers();
      TransformerMap transformerMap1 = new TransformerMap();
      transformerMap1.clear();
      boolean boolean0 = transformerMap0.containsTransformer(transformerMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransformerMap transformerMap0 = new TransformerMap();
      Class<DefaultTransformer> class0 = DefaultTransformer.class;
      TransformerMap transformerMap1 = new TransformerMap();
      Class<Object> class1 = Object.class;
      transformerMap1.removeTransformer(class0);
      transformerMap1.putTransformer(class1, transformerMap0);
      transformerMap0.transform(transformerMap1);
      transformerMap0.putTransformer(class0, (NumberTransformer) null);
      Class<Integer> class2 = Integer.class;
      transformerMap0.transformers();
      transformerMap1.hashCode();
      Class<TransformerMap> class3 = TransformerMap.class;
      transformerMap1.removeTransformer(class3);
      transformerMap0.equals("org.apache.commons.math4.util.TransformerMap");
      transformerMap1.containsClass(class2);
      try { 
        transformerMap1.transform("org.apache.commons.math4.util.TransformerMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Conversion Exception in Transformation: java.lang.String@0000000005
         //
         verifyException("org.apache.commons.math4.util.DefaultTransformer", e);
      }
  }
}

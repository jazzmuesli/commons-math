/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:42:45 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math4.util.CompositeFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeFormat_ESTest extends CompositeFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      CompositeFormat.parseFixedstring("Ane%@VlI1\"", "O<RxUC) ", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      CompositeFormat.parseFixedstring("", "", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(1);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Number number0 = CompositeFormat.parseNumber("g#U=Xt", decimalFormat0, parsePosition0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getErrorIndex());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      char char0 = CompositeFormat.parseNextCharacter("", parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(11);
      assertEquals(11, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=11,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      CompositeFormat.parseAndIgnoreWhitespace("g]Ow/&saH^w}U", parsePosition0);
      assertEquals(11, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=11,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      char char0 = CompositeFormat.parseNextCharacter("8<NLm T.xP", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(5);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseNumber((String) null, decimalFormat0, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(76);
      assertEquals(76, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=76,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      parsePosition0.setIndex((-3996));
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-3996), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-3996,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseNextCharacter("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseNextCharacter((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      parsePosition0.setIndex((-471));
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-471), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-471,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseFixedstring("/)", "/)", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseFixedstring((String) null, "'Y0[e[=E>>^}G", parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-1743));
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-1743), parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=-1743,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.parseAndIgnoreWhitespace("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeFormat.parseAndIgnoreWhitespace("&", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.CompositeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeFormat.getDefaultNumberFormat((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("?U*>>N3m");
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertNotNull(choiceFormat0);
      
      FieldPosition fieldPosition0 = new FieldPosition((-979));
      assertEquals("java.text.FieldPosition[field=-979,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals((-979), fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.formatDouble(0.0, choiceFormat0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)CompositeFormat.getDefaultNumberFormat(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.##########", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.##########", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(10, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 11);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(11, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = CompositeFormat.formatDouble(Double.NEGATIVE_INFINITY, decimalFormat0, stringBuffer0, fieldPosition0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("(-Infinity)", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(11, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(11, stringBuffer1.length());
      assertEquals("(-Infinity)", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        CompositeFormat.formatDouble(0.0, decimalFormat0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.math4.util.CompositeFormat");
      assertEquals(45, stringBuffer0.length());
      assertEquals("org.apache.commons.math4.util.CompositeFormat", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(0);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = CompositeFormat.formatDouble(Double.NaN, decimalFormat0, stringBuffer0, fieldPosition0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("org.apache.commons.math4.util.CompositeFormat(NaN)", stringBuffer0.toString());
      assertEquals(50, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(50, stringBuffer1.length());
      assertEquals("org.apache.commons.math4.util.CompositeFormat(NaN)", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(2);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      boolean boolean0 = CompositeFormat.parseFixedstring("}hvy>%NM>.]{Pm^G2", "Wyr);", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=2]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getErrorIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      boolean boolean0 = CompositeFormat.parseFixedstring("ez,'n\"0tkT]3", "ez,'n\"0tkT]3", parsePosition0);
      assertEquals("java.text.ParsePosition[index=12,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(12, parsePosition0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      boolean boolean0 = CompositeFormat.parseFixedstring("o:PTC|D#h", "51RWHk&!Lx^M:]S1`", parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      parsePosition0.setIndex(456);
      assertEquals(456, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=456,errorIndex=-1]", parsePosition0.toString());
      
      boolean boolean0 = CompositeFormat.parseFixedstring("org.apache.commons.math4.util.CompositeFormat", "org.apache.commons.geometry.euclidean.twod.Vector2D", parsePosition0);
      assertEquals("java.text.ParsePosition[index=456,errorIndex=456]", parsePosition0.toString());
      assertEquals(456, parsePosition0.getErrorIndex());
      assertEquals(456, parsePosition0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      char char0 = CompositeFormat.parseNextCharacter("u~P}24", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals('u', char0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      Long long0 = (Long)CompositeFormat.parseNumber("|5T*le@$", decimalFormat0, parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(long0);
      assertEquals(5L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Number number0 = CompositeFormat.parseNumber("ABSOLUTE", decimalFormat0, parsePosition0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      char char0 = CompositeFormat.parseNextCharacter(" != ", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals('!', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(1);
      char char0 = CompositeFormat.parseNextCharacter("  ", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(456);
      char char0 = CompositeFormat.parseNextCharacter("org.apache.commons.geometry.euclidean.twod.Vector2D", parsePosition0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumberFormat numberFormat0 = CompositeFormat.getDefaultNumberFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1502));
      // Undeclared exception!
      try { 
        CompositeFormat.parseNumber("org.apache.commons.geometry.core.exception.IllegalNormException", numberFormat0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}

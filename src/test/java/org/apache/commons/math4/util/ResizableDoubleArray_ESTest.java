/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:05:10 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.util.MathArrays;
import org.apache.commons.math4.util.ResizableDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ResizableDoubleArray_ESTest extends ResizableDoubleArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(3317, 3317);
      resizableDoubleArray0.substituteMostRecentElement((-1.0));
      resizableDoubleArray0.setElement(2595, 3317.0);
      resizableDoubleArray0.getStartIndex();
      resizableDoubleArray0.getElement(3317);
      ResizableDoubleArray.ExpansionMode.values();
      resizableDoubleArray0.getElements();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.expand();
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      resizableDoubleArray1.checkContractExpand(2589, 16);
      resizableDoubleArray1.hashCode();
      resizableDoubleArray1.addElement(0.16698443218942854);
      resizableDoubleArray0.setNumElements(2589);
      resizableDoubleArray0.discardFrontElements(0);
      resizableDoubleArray0.hashCode();
      resizableDoubleArray0.hashCode();
      resizableDoubleArray1.addElement(0.16698443218942854);
      resizableDoubleArray1.setNumElements(3042);
      resizableDoubleArray0.getElement(5);
      resizableDoubleArray0.substituteMostRecentElement(16);
      resizableDoubleArray0.addElement(1934.0);
      resizableDoubleArray0.setElement(31, 524.143039);
      resizableDoubleArray0.addElement(524.143039);
      resizableDoubleArray0.contract();
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      resizableDoubleArray0.setNumElements(31);
      resizableDoubleArray0.getCapacity();
      resizableDoubleArray0.expand();
      resizableDoubleArray0.getElement(0);
      resizableDoubleArray0.addElement(2589);
      resizableDoubleArray1.getNumElements();
      resizableDoubleArray0.equals(resizableDoubleArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 925.66777827;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertEquals(6, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(7, resizableDoubleArray1.getCapacity());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(6, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setNumElements(346);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(346, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(346, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.addElementRolling((-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(925.66777827, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(346, resizableDoubleArray0.getNumElements());
      assertEquals(692, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(925.66777827);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(347, resizableDoubleArray0.getNumElements());
      assertEquals(692, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setNumElements(0);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(692, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = resizableDoubleArray0.getElements();
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(692, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray1.getElement(4314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(16);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      
      resizableDoubleArray1.checkContractExpand(2589, 16);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.hashCode();
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.addElement(0.16698443218942854);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray0.setNumElements(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.discardFrontElements(0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double0 = resizableDoubleArray0.getElement(5);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement(16);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2589;
      doubleArray0[1] = (double) 2589;
      doubleArray0[2] = 0.16698443218942854;
      doubleArray0[3] = 2535.5604210812;
      doubleArray0[4] = 614.5213775557697;
      doubleArray0[5] = 0.0;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2595, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2596, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {2589.0, 2589.0, 0.16698443218942854, 2535.5604210812, 614.5213775557697, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(1934.0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2596, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2596, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setElement(31, 524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2596, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2596, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5192, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2597, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.contract();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2598, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2597, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      doReturn((-25.55)).when(mathArrays_Function0).evaluate(any(double[].class) , anyInt() , anyInt());
      double double2 = resizableDoubleArray0.compute(mathArrays_Function0);
      assertEquals((-25.55), double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2598, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2597, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setNumElements(31);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2598, resizableDoubleArray0.getCapacity());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int0 = resizableDoubleArray0.getCapacity();
      assertEquals(2598, int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2598, resizableDoubleArray0.getCapacity());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.expand();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(5196, resizableDoubleArray0.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double3 = resizableDoubleArray0.addElementRolling(2.0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double4 = resizableDoubleArray0.getElement(0);
      assertEquals(0.0, double4, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int1 = resizableDoubleArray1.getNumElements();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      double double5 = resizableDoubleArray1.getExpansionFactor();
      assertEquals(2.0, double5, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      
      resizableDoubleArray1.checkContractExpand(2589, 16);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.hashCode();
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.addElement(0.16698443218942854);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray0.setNumElements(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.discardFrontElements(0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double0 = resizableDoubleArray0.getElement(5);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement(16);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(1934.0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setElement(31, 524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.contract();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(mathArrays_Function0).evaluate(any(double[].class) , anyInt() , anyInt());
      double double2 = resizableDoubleArray0.compute(mathArrays_Function0);
      assertEquals(5.0, double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setNumElements(31);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int0 = resizableDoubleArray0.getCapacity();
      assertEquals(2592, int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.expand();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5184, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double3 = resizableDoubleArray0.addElementRolling(2.0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double4 = resizableDoubleArray0.getElement(0);
      assertEquals(0.0, double4, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int1 = resizableDoubleArray1.getNumElements();
      assertEquals(1, int1);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertFalse(int1 == int0);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1521;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1521, 1521);
      assertEquals(1521.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1521, resizableDoubleArray0.getCapacity());
      assertEquals(1521.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotNull(resizableDoubleArray0);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray0.addElements((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 75;
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 75;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(75, 75, 75, resizableDoubleArray_ExpansionMode0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, doubleArray0.length);
      assertEquals(3, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setNumElements(0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(75);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, resizableDoubleArray0.getCapacity());
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      double double0 = (-1192.391);
      resizableDoubleArray0.setElement(2827, (-1192.391));
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.discardFrontElements(1);
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement((-1655.60960516));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1192.391), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.expand();
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(212100, resizableDoubleArray0.getCapacity());
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      double double2 = resizableDoubleArray0.substituteMostRecentElement((-1655.60960516));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1655.60960516), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(212100, resizableDoubleArray0.getCapacity());
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      double double3 = resizableDoubleArray0.addElementRolling(2.5);
      assertEquals(1, doubleArray0.length);
      assertEquals(75.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(75.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2827, resizableDoubleArray0.getNumElements());
      assertEquals(75.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2828, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ResizableDoubleArray.ExpansionMode.valueOf("H1ce7zx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math4.util.ResizableDoubleArray.ExpansionMode.H1ce7zx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1132.0;
      doubleArray0[1] = 2.5;
      doubleArray0[2] = 1499.00377;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.37445697625436497;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.discardMostRecentElements(0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.clear();
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.expand();
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setElement(0, (-2182.624309));
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement((-2182.624309));
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(6, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray_ExpansionMode0);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.hashCode();
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.clear();
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setElement(0, 1499.00377);
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setElement(0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(mathArrays_Function0).evaluate(any(double[].class) , anyInt() , anyInt());
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getNumElements());
      assertEquals(8, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.compute(mathArrays_Function0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getNumElements());
      assertEquals(8, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
      
      int int1 = resizableDoubleArray0.hashCode();
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getNumElements());
      assertEquals(8, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {1132.0, 2.5, 1499.00377, 0.5, 1.0, 0.37445697625436497}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray1);
      
      int int0 = resizableDoubleArray1.getNumElements();
      assertEquals(0, int0);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2830;
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2830;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2830, 2830, 2830, resizableDoubleArray_ExpansionMode0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2830.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.ADDITIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2830.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {2830.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.expand();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2830.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2832, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.ADDITIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2830.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertArrayEquals(new double[] {2830.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2830.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2832, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.ADDITIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2830.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.ADDITIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2832, resizableDoubleArray1.getCapacity());
      assertEquals(2830.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2830.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {2830.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(2830);
      assertEquals(1, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2, resizableDoubleArray0.getNumElements());
      assertEquals(2830.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2832, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.ADDITIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2830.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {2830.0}, doubleArray0, 0.01);
      
      int int1 = 806;
      try { 
        resizableDoubleArray1.discardFrontElements(806);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard 806 elements from a 1 elements array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      resizableDoubleArray0.expand();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(64, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(64, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(64, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      
      resizableDoubleArray0.setNumElements(27);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(27, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(64, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 43.25262991;
      doubleArray0[4] = (double) 27;
      doubleArray0[5] = (double) 27;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 27;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {27.0, 27.0, 0.0, 43.25262991, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.substituteMostRecentElement(0.0);
      assertEquals(27.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double[] doubleArray1 = resizableDoubleArray0.getElements();
      assertEquals(35, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotNull(doubleArray1);
      
      int int0 = resizableDoubleArray0.getNumElements();
      assertEquals(35, int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray1.setNumElements(35);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(64, resizableDoubleArray1.getCapacity());
      assertEquals(35, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      boolean boolean0 = resizableDoubleArray1.equals("e8M@RJ5ndOE4+k8");
      assertFalse(boolean0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(64, resizableDoubleArray1.getCapacity());
      assertEquals(35, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      ResizableDoubleArray resizableDoubleArray2 = resizableDoubleArray0.copy();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertFalse(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(35, resizableDoubleArray2.getNumElements());
      assertEquals(2.5, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertEquals(36, resizableDoubleArray2.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotNull(resizableDoubleArray2);
      
      int int1 = resizableDoubleArray2.getNumElements();
      assertEquals(35, int1);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertFalse(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertTrue(int1 == int0);
      assertEquals(36, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(35, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(35, resizableDoubleArray2.getNumElements());
      assertEquals(2.5, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertEquals(36, resizableDoubleArray2.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(717, 0.0, 717);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 717 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (0)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(99, 99, 99);
      assertEquals(99.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(99.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(99, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.discardMostRecentElements(0);
      assertEquals(99.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(99.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(0, int0);
      assertEquals(99.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(99.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      double double0 = resizableDoubleArray0.addElementRolling(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(99.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(99.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      double double1 = resizableDoubleArray0.getContractionCriterion();
      assertEquals(99.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(99.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(99.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      double[] doubleArray0 = null;
      int int0 = (-2571);
      try { 
        resizableDoubleArray0.setNumElements((-2571));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index (-2,571) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1361.43998217168);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, doubleArray0.length);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.substituteMostRecentElement((-1361.43998217168));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1361.43998217168), double0, 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setNumElements(2854);
      assertEquals(1, doubleArray0.length);
      assertEquals(2854, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2854, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, doubleArray0.length);
      assertEquals(2854, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement((-1361.43998217168));
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2855, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.clear();
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement((-1987.8449449764012));
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      int int0 = resizableDoubleArray0.getNumElements();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, int0);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(1, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray_ExpansionMode0);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertEquals(1, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2855, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray2 = resizableDoubleArray1.copy();
      assertEquals(1, doubleArray0.length);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2855, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertEquals(1, resizableDoubleArray2.getNumElements());
      assertEquals(2855, resizableDoubleArray2.getCapacity());
      assertEquals(2.5, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotNull(resizableDoubleArray2);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      double double1 = resizableDoubleArray1.addElementRolling((-2104.99));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1987.8449449764012), double1, 0.01);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2855, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2, resizableDoubleArray1.getCapacity());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray2);
      assertArrayEquals(new double[] {(-1361.43998217168)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ResizableDoubleArray.ExpansionMode.valueOf("-'n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math4.util.ResizableDoubleArray.ExpansionMode.-'n
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.setElement(0, 0.0);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      
      double[] doubleArray0 = resizableDoubleArray0.getArrayRef();
      assertEquals(16, doubleArray0.length);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertNotNull(doubleArray0);
      
      double double0 = resizableDoubleArray0.addElementRolling(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2, resizableDoubleArray0.getCapacity());
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement(1341.0184193048);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2, resizableDoubleArray0.getCapacity());
      
      double double2 = resizableDoubleArray0.getExpansionFactor();
      assertEquals(2.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      assertEquals(2, resizableDoubleArray0.getCapacity());
      
      resizableDoubleArray0.clear();
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement(975);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 857.47802294241;
      doubleArray0[3] = 1061.16;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.5;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {2.0, (-1.0), 857.47802294241, 1061.16, 0.0, 0.5}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.getElement(0);
      assertEquals(2.0, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      // Undeclared exception!
      try { 
        ResizableDoubleArray.ExpansionMode.valueOf("o-c}+xz' z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math4.util.ResizableDoubleArray.ExpansionMode.o-c}+xz' z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(16);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      
      resizableDoubleArray1.checkContractExpand(2589, 16);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.hashCode();
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.addElement(0.16698443218942854);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray0.setNumElements(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.discardFrontElements(0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double0 = resizableDoubleArray0.getElement(5);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement(16);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(1934.0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setElement(31, 524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.contract();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(mathArrays_Function0).evaluate(any(double[].class) , anyInt() , anyInt());
      double double2 = resizableDoubleArray0.compute(mathArrays_Function0);
      assertEquals(0.0, double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setNumElements(31);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int0 = resizableDoubleArray0.getCapacity();
      assertEquals(2592, int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.expand();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(5184, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double3 = resizableDoubleArray0.addElementRolling(2.0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double4 = resizableDoubleArray0.getElement(0);
      assertEquals(0.0, double4, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int1 = resizableDoubleArray1.getNumElements();
      assertEquals(1, int1);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertFalse(int1 == int0);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.5;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(1115, 0.5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (1).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 925.66777827;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertEquals(6, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(6, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(7, resizableDoubleArray1.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.addElementRolling((-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(925.66777827, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(925.66777827);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getNumElements());
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setNumElements(0);
      assertEquals(6, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(14, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {925.66777827, 3.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray1.getElement(4314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.contract();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      
      resizableDoubleArray0.setNumElements(0);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(9, resizableDoubleArray0.getNumElements());
      assertEquals(10, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
      
      double double0 = resizableDoubleArray0.getElement(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(9, resizableDoubleArray0.getNumElements());
      assertEquals(10, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 2008.65;
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1662;
      doubleArray0[1] = 2008.65;
      doubleArray0[2] = 2008.65;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(1662, 1662, 2008.65, resizableDoubleArray_ExpansionMode0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2008.65, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(4, resizableDoubleArray1.getCapacity());
      assertEquals(1662.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray1.getNumElements());
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray2 = resizableDoubleArray0.copy();
      assertEquals(3, doubleArray0.length);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1662.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray2.getNumElements());
      assertEquals(2008.65, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertEquals(4, resizableDoubleArray2.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray2);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      resizableDoubleArray2.expand();
      assertEquals(3, doubleArray0.length);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertFalse(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(6648, resizableDoubleArray2.getCapacity());
      assertEquals(1662.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray2.getNumElements());
      assertEquals(2008.65, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      double double1 = resizableDoubleArray1.substituteMostRecentElement(2008.65);
      assertEquals(3, doubleArray0.length);
      assertEquals(2008.65, double1, 0.01);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray2));
      assertEquals(double1, double0, 0.01);
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2008.65, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(4, resizableDoubleArray1.getCapacity());
      assertEquals(1662.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray2);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      int int0 = (-3006);
      double double2 = resizableDoubleArray0.addElementRolling((-359));
      assertEquals(3, doubleArray0.length);
      assertEquals(1662.0, double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1662.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2008.65, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {1662.0, 2008.65, 2008.65}, doubleArray0, 0.01);
      
      try { 
        resizableDoubleArray0.discardFrontElements((-359));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard a negative number of elements (-359)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      try { 
        resizableDoubleArray0.substituteMostRecentElement(0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(1094, 205.0676578368, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (1): contraction criteria (0) smaller than the expansion factor (205.068).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      try { 
        resizableDoubleArray0.discardFrontElements(2123884926);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard 2,123,884,926 elements from a 0 elements array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(95);
      assertEquals(95, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.setNumElements(95);
      assertEquals(95, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(95, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      
      double[] doubleArray0 = new double[2];
      resizableDoubleArray0.addElement(95);
      assertEquals(190, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(96, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      
      doubleArray0[0] = (double) 95;
      doubleArray0[1] = (double) 95;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(98, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(99, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertArrayEquals(new double[] {95.0, 95.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElement(977.252574315);
      assertEquals(99, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(99, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      
      resizableDoubleArray0.discardMostRecentElements(95);
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(5, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {95.0, 95.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray_ExpansionMode0);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        resizableDoubleArray0.substituteMostRecentElement((-202.518));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot substitute an element from an empty array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 163;
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[0];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(163, 163, 163, resizableDoubleArray_ExpansionMode0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(163, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray1.addElements(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray1.clear();
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray1.contract();
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray1.addElements(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray1.addElements(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(163, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = 264;
      resizableDoubleArray0.setNumElements(264);
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(264, resizableDoubleArray0.getCapacity());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(264, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.substituteMostRecentElement(163);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(264, resizableDoubleArray0.getCapacity());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(264, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      resizableDoubleArray0.setElement(0, (-0.322111769955327));
      assertEquals(0, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(264, resizableDoubleArray0.getCapacity());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(264, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = resizableDoubleArray1.addElementRolling(163);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(264, resizableDoubleArray0.getCapacity());
      assertEquals(163.0, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(264, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(163.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(1, resizableDoubleArray1.getCapacity());
      assertEquals(163.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(163.0, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray1.setElement((-689), 2785.0345135548);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getCapacity());
      
      double double0 = resizableDoubleArray0.getExpansionFactor();
      assertEquals(2.0, double0, 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getCapacity());
      
      double double1 = resizableDoubleArray0.addElementRolling(2.0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(1, resizableDoubleArray0.getCapacity());
      
      double[] doubleArray0 = resizableDoubleArray0.getElements();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = resizableDoubleArray0.addElementRolling(0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(4, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(3, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = resizableDoubleArray1.substituteMostRecentElement(4477.219178893143);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(4, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(3, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      resizableDoubleArray1.clear();
      assertEquals(3, doubleArray0.length);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(4, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = resizableDoubleArray0.substituteMostRecentElement(0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(4, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(3, resizableDoubleArray0.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double3 = 1943.0857;
      int int0 = (-367);
      try { 
        resizableDoubleArray0.discardMostRecentElements((-934));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard a negative number of elements (-934)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3886.9659);
      doubleArray0[1] = (-655.414027495);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1624.0062);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(5, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {(-3886.9659), (-655.414027495), (-1.0), (-1624.0062)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement((-3036));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-89.390230163);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 221.13381470971;
      doubleArray0[3] = (-1759.0);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(5, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {(-89.390230163), 0.0, 221.13381470971, (-1759.0)}, doubleArray0, 0.01);
      
      resizableDoubleArray0.hashCode();
      assertEquals(4, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(5, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertArrayEquals(new double[] {(-89.390230163), 0.0, 221.13381470971, (-1759.0)}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertEquals(4, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(4, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(5, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(5, resizableDoubleArray1.getCapacity());
      assertEquals(4, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {(-89.390230163), 0.0, 221.13381470971, (-1759.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray1.setElement((-1115), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(94, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1.5 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (1)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(0, int0);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      
      int int1 = resizableDoubleArray0.getCapacity();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      double[] doubleArray0 = resizableDoubleArray0.getElements();
      assertEquals(0, doubleArray0.length);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 237;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(237, 237, 2172.5494);
      assertEquals(2172.5494, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(237.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(237, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2172.5494, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(237.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(237, resizableDoubleArray0.getCapacity());
      assertEquals(237, resizableDoubleArray1.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(237.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2172.5494, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray1);
      
      try { 
        resizableDoubleArray1.discardMostRecentElements((-1446));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard a negative number of elements (-1,446)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.checkContractExpand(2.0, 2.0);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      int int0 = (-732);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.getElement((-732));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertEquals(0, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray1.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray2 = resizableDoubleArray0.copy();
      assertEquals(0, doubleArray0.length);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(2.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertEquals(0, resizableDoubleArray2.getNumElements());
      assertEquals(2.5, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray2.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        resizableDoubleArray0.discardMostRecentElements(2333);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard 2,333 elements from a 0 elements array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-3420), (-3420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 282;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(282);
      assertEquals(282, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      double[] doubleArray0 = new double[4];
      resizableDoubleArray0.setElement(282, 282);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(283, resizableDoubleArray0.getCapacity());
      assertEquals(283, resizableDoubleArray0.getNumElements());
      
      doubleArray0[0] = (double) 282;
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(287, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(288, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {282.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 1355.6762756435353;
      double double1 = 0.0;
      try { 
        resizableDoubleArray0.checkContractExpand(0.0, 282);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (1): contraction criteria (0) smaller than the expansion factor (282).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, 0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
      
      ResizableDoubleArray resizableDoubleArray0 = null;
      ResizableDoubleArray resizableDoubleArray1 = null;
      try {
        resizableDoubleArray1 = new ResizableDoubleArray((ResizableDoubleArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(184, 1293.02, 184, resizableDoubleArray_ExpansionMode0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 184 is smaller than the minimum (1): contraction criteria (184) smaller than the expansion factor (1,293.02).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(2849, 923.3239);
      assertEquals(2849, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.clear();
      assertEquals(2849, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.clear();
      assertEquals(2849, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.setElement(2849, 2849);
      assertEquals(2850, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2850, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.clear();
      assertEquals(2850, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.contract();
      assertEquals(1, resizableDoubleArray0.getCapacity());
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      resizableDoubleArray0.expand();
      assertEquals(923.3239, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(924, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(923.8239, resizableDoubleArray0.getContractionCriterion(), 0.01);
      
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray((double[]) null);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.clear();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      resizableDoubleArray0.hashCode();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = resizableDoubleArray0.getExpansionMode();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray_ExpansionMode0);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      resizableDoubleArray0.setNumElements(52);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(52, resizableDoubleArray0.getCapacity());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(52, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray1);
      
      double double0 = resizableDoubleArray1.getContractionCriterion();
      assertEquals(2.5, double0, 0.01);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 687.61964;
      doubleArray0[1] = 2742.1001;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2266.5656329;
      doubleArray0[4] = 1841.017605958;
      doubleArray0[5] = 2861.74541077638;
      doubleArray0[6] = 1924.8164;
      doubleArray0[7] = 0.0;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = new ResizableDoubleArray(resizableDoubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(8, resizableDoubleArray1.getNumElements());
      assertEquals(9, resizableDoubleArray1.getCapacity());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertNotNull(resizableDoubleArray1);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = resizableDoubleArray1.equals(resizableDoubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(8, resizableDoubleArray1.getNumElements());
      assertEquals(9, resizableDoubleArray1.getCapacity());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray resizableDoubleArray2 = resizableDoubleArray0.copy();
      assertEquals(8, doubleArray0.length);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray2.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray2.getExpansionMode());
      assertEquals(8, resizableDoubleArray2.getNumElements());
      assertEquals(9, resizableDoubleArray2.getCapacity());
      assertEquals(2.0, resizableDoubleArray2.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray2.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray2, resizableDoubleArray1);
      assertNotNull(resizableDoubleArray2);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
      
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
      
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = resizableDoubleArray1.getExpansionMode();
      assertEquals(8, doubleArray0.length);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray_ExpansionMode0);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray2));
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray2));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(8, resizableDoubleArray0.getNumElements());
      assertEquals(9, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(8, resizableDoubleArray1.getNumElements());
      assertEquals(9, resizableDoubleArray1.getCapacity());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray2);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray2);
      assertArrayEquals(new double[] {687.61964, 2742.1001, 0.0, 2266.5656329, 1841.017605958, 2861.74541077638, 1924.8164, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.setElement(3317, 3317);
      assertEquals(3318, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3318, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      double double0 = resizableDoubleArray0.substituteMostRecentElement((-1.0));
      assertEquals(3317.0, double0, 0.01);
      assertEquals(3318, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3318, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      resizableDoubleArray0.setElement(2595, 3317.0);
      assertEquals(3318, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3318, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      resizableDoubleArray0.hashCode();
      assertEquals(3318, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3318, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 3317;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3317.0;
      double double1 = resizableDoubleArray0.addElementRolling(3317);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3318, resizableDoubleArray0.getNumElements());
      assertEquals(6636, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      doubleArray0[4] = (-991.071375225);
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3323, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3324, resizableDoubleArray0.getCapacity());
      assertArrayEquals(new double[] {(-1.0), 3317.0, (-1.0), 3317.0, (-991.071375225)}, doubleArray0, 0.01);
      
      int int0 = resizableDoubleArray0.getStartIndex();
      assertEquals(0, int0);
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3323, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3324, resizableDoubleArray0.getCapacity());
      
      ResizableDoubleArray.ExpansionMode[] resizableDoubleArray_ExpansionModeArray0 = ResizableDoubleArray.ExpansionMode.values();
      assertEquals(2, resizableDoubleArray_ExpansionModeArray0.length);
      assertNotNull(resizableDoubleArray_ExpansionModeArray0);
      
      double[] doubleArray1 = resizableDoubleArray0.getElements();
      assertEquals(3323, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(3323, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(3324, resizableDoubleArray0.getCapacity());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (0) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertNotNull(resizableDoubleArray0);
      
      double double0 = resizableDoubleArray0.getContractionCriterion();
      assertEquals(2.5, double0, 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.5;
      doubleArray0[1] = (-645.3439);
      doubleArray0[2] = 2.5;
      resizableDoubleArray0.discardFrontElements(0);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(1, resizableDoubleArray0.getCapacity());
      
      doubleArray0[3] = 2.5;
      doubleArray0[4] = 2.5;
      doubleArray0[5] = 2.5;
      doubleArray0[6] = 2.5;
      doubleArray0[7] = 2.5;
      try { 
        resizableDoubleArray0.discardMostRecentElements((-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard a negative number of elements (-59)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      int int0 = 3236;
      try { 
        resizableDoubleArray0.discardMostRecentElements(3236);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot discard 3,236 elements from a 0 elements array
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1139);
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.ADDITIVE;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1139);
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((-1139), (-1139), 0.0, resizableDoubleArray_ExpansionMode0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // initial capacity (-1,139) is not positive
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 5448.0;
      doubleArray0[3] = 3.4;
      double double0 = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1.0;
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(6, resizableDoubleArray0.getNumElements());
      assertEquals(7, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertNotNull(resizableDoubleArray0);
      assertArrayEquals(new double[] {0.0, 2.0, 5448.0, 3.4, 2.0, 1.0}, doubleArray0, 0.01);
      
      resizableDoubleArray0.addElements(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(13, resizableDoubleArray0.getCapacity());
      assertEquals(12, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 5448.0, 3.4, 2.0, 1.0}, doubleArray0, 0.01);
      
      int int0 = (-1837);
      resizableDoubleArray0.addElement(0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(13, resizableDoubleArray0.getCapacity());
      assertEquals(13, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 5448.0, 3.4, 2.0, 1.0}, doubleArray0, 0.01);
      
      try { 
        resizableDoubleArray0.checkContractExpand((-1810.0735988533206), 2.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,810.074 is smaller than the minimum (1): contraction criteria (-1,810.074) smaller than the expansion factor (2).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray((double[]) null);
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.hashCode();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(0, resizableDoubleArray0.getNumElements());
      
      // Undeclared exception!
      try { 
        ResizableDoubleArray.ExpansionMode.valueOf("overflow: lcm({0}, {1}) is 2^31");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math4.util.ResizableDoubleArray.ExpansionMode.overflow: lcm({0}, {1}) is 2^31
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      assertEquals(16, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotNull(resizableDoubleArray0);
      
      resizableDoubleArray0.expand();
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      
      ResizableDoubleArray resizableDoubleArray1 = resizableDoubleArray0.copy();
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      assertNotNull(resizableDoubleArray1);
      
      resizableDoubleArray1.checkContractExpand(2589, 16);
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.hashCode();
      assertTrue(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertTrue(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertEquals(0, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.addElement(0.16698443218942854);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(1, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray0.setNumElements(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.discardFrontElements(0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.hashCode();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray1.addElement(0.16698443218942854);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2, resizableDoubleArray1.getNumElements());
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(32, resizableDoubleArray1.getCapacity());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      resizableDoubleArray1.setNumElements(3042);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(3042, resizableDoubleArray1.getCapacity());
      assertEquals(3042, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
      
      double double0 = resizableDoubleArray0.getElement(5);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double1 = resizableDoubleArray0.substituteMostRecentElement(16);
      assertEquals(0.0, double1, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(2589, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2589, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(1934.0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setElement(31, 524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2590, resizableDoubleArray0.getNumElements());
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(524.143039);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(5178, resizableDoubleArray0.getCapacity());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.contract();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      MathArrays.Function mathArrays_Function0 = mock(MathArrays.Function.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(mathArrays_Function0).evaluate(any(double[].class) , anyInt() , anyInt());
      double double2 = resizableDoubleArray0.compute(mathArrays_Function0);
      assertEquals(5.0, double2, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(2591, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.setNumElements(31);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int0 = resizableDoubleArray0.getCapacity();
      assertEquals(2592, int0);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(2592, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.expand();
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(5184, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double3 = resizableDoubleArray0.addElementRolling(2.0);
      assertEquals(0.0, double3, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      double double4 = resizableDoubleArray0.getElement(0);
      assertEquals(0.0, double4, 0.01);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(31, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      resizableDoubleArray0.addElement(2589);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      
      int int1 = resizableDoubleArray1.getNumElements();
      assertEquals(3042, int1);
      assertFalse(resizableDoubleArray0.equals((Object)resizableDoubleArray1));
      assertFalse(resizableDoubleArray1.equals((Object)resizableDoubleArray0));
      assertFalse(int1 == int0);
      assertEquals(32, resizableDoubleArray0.getCapacity());
      assertEquals(2.5, resizableDoubleArray0.getContractionCriterion(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray0.getExpansionMode());
      assertEquals(32, resizableDoubleArray0.getNumElements());
      assertEquals(2.0, resizableDoubleArray0.getExpansionFactor(), 0.01);
      assertEquals(ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, resizableDoubleArray1.getExpansionMode());
      assertEquals(2.0, resizableDoubleArray1.getExpansionFactor(), 0.01);
      assertEquals(2.5, resizableDoubleArray1.getContractionCriterion(), 0.01);
      assertEquals(3042, resizableDoubleArray1.getCapacity());
      assertEquals(3042, resizableDoubleArray1.getNumElements());
      assertNotSame(resizableDoubleArray0, resizableDoubleArray1);
      assertNotSame(resizableDoubleArray1, resizableDoubleArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResizableDoubleArray.ExpansionMode resizableDoubleArray_ExpansionMode0 = ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2097.135506230094);
      doubleArray0[4] = 2.5;
      doubleArray0[5] = 2.5;
      doubleArray0[6] = 2.5;
      doubleArray0[7] = 2.5;
      doubleArray0[8] = 2.5;
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(1, 1, 2.5, resizableDoubleArray_ExpansionMode0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2.5 is smaller than, or equal to, the minimum (1): expansion factor smaller than one (1)
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.hashCode();
      resizableDoubleArray0.clear();
      resizableDoubleArray0.addElement(0.0);
      resizableDoubleArray0.discardMostRecentElements(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      resizableDoubleArray0.contract();
      resizableDoubleArray0.hashCode();
      doubleArray0[1] = 0.0;
      resizableDoubleArray0.addElements(doubleArray0);
      resizableDoubleArray0.hashCode();
      try { 
        resizableDoubleArray0.checkContractExpand(0, (-0.012086732064244697));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1): contraction criteria smaller than one (0).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.
         //
         verifyException("org.apache.commons.math4.util.ResizableDoubleArray", e);
      }
  }
}

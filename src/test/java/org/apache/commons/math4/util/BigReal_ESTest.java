/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:58:14 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import org.apache.commons.math4.util.BigReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BigReal_ESTest extends BigReal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(1, roundingMode0);
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(1956.6995, mathContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1604;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null, 1604);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigReal bigReal0 = new BigReal(2150);
      BigReal bigReal1 = new BigReal((long) 2150);
      bigReal1.ZERO.hashCode();
      bigReal0.ONE.setScale(2666);
      BigReal bigReal2 = bigReal0.ONE.add(bigReal1);
      BigReal bigReal3 = bigReal2.negate();
      bigReal0.doubleValue();
      bigReal2.getField();
      bigReal2.setScale(2150);
      BigReal bigReal4 = bigReal1.subtract(bigReal0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigReal bigReal5 = new BigReal(bigInteger0, 2666);
      bigReal5.doubleValue();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(2666, roundingMode0);
      BigReal bigReal6 = new BigReal((long) 2150, mathContext0);
      bigReal5.ZERO.add(bigReal6);
      Object object0 = new Object();
      bigReal5.ZERO.equals(object0);
      bigReal4.equals(bigReal5);
      BigReal bigReal7 = bigReal4.divide(bigReal0);
      bigReal7.ONE.doubleValue();
      bigReal7.ONE.reciprocal();
      bigReal0.doubleValue();
      bigReal0.setScale(0);
      bigReal7.getScale();
      bigReal3.bigDecimalValue();
      BigReal bigReal8 = new BigReal("5");
      bigReal2.equals(bigReal8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      BigReal bigReal1 = bigReal0.negate();
      bigReal0.doubleValue();
      BigReal bigReal2 = bigReal0.subtract(bigReal1);
      bigReal1.equals(bigReal2);
      BigReal bigReal3 = bigReal2.multiply(bigReal0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      bigReal2.setRoundingMode(roundingMode0);
      bigReal1.setScale(0);
      bigReal1.getRoundingMode();
      bigReal0.hashCode();
      BigReal bigReal4 = bigReal3.add(bigReal0);
      BigReal bigReal5 = bigReal1.subtract(bigReal4);
      bigReal5.ZERO.doubleValue();
      BigReal bigReal6 = bigReal5.ONE.reciprocal();
      bigReal0.getRoundingMode();
      bigReal5.getRoundingMode();
      bigReal3.ZERO.getField();
      bigReal4.getScale();
      Object object0 = new Object();
      bigReal1.equals(object0);
      bigReal4.getRoundingMode();
      bigReal4.reciprocal();
      bigReal1.getField();
      bigReal6.setScale(0);
      bigReal6.getScale();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, 3431, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '3';
      charArray0[2] = 'V';
      charArray0[3] = 'p';
      charArray0[4] = '&';
      charArray0[5] = '+';
      charArray0[6] = '$';
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(charArray0, 1, 1, mathContext0);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1825;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1825, 714, mockRandom0);
      mockRandom0.ints();
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      BigReal bigReal0 = new BigReal(bigInteger0, mathContext0);
      BigReal bigReal1 = new BigReal((-1123L), mathContext0);
      // Undeclared exception!
      try { 
        bigReal1.ONE.add((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigReal bigReal0 = new BigReal(bigInteger0);
      bigReal0.ONE.getField();
      bigReal0.setScale((byte) (-30));
      RoundingMode roundingMode0 = bigReal0.getRoundingMode();
      bigReal0.getScale();
      bigReal0.equals(bigInteger0);
      MathContext mathContext0 = new MathContext(400, roundingMode0);
      BigReal bigReal1 = new BigReal((-1L), mathContext0);
      BigReal bigReal2 = bigReal0.multiply(bigReal1);
      bigReal2.setScale(0);
      RoundingMode roundingMode1 = RoundingMode.FLOOR;
      bigReal2.ZERO.setRoundingMode(roundingMode1);
      bigReal0.equals(bigReal2);
      bigReal1.compareTo(bigReal0);
      bigReal1.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(bigInteger0, 243, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigReal bigReal0 = new BigReal(1009L);
      int int0 = (-674);
      int int1 = 1572;
      BigReal bigReal1 = null;
      try {
        bigReal1 = new BigReal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 560;
      MathContext mathContext0 = null;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, 560, 0, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      RoundingMode roundingMode0 = bigReal0.getRoundingMode();
      bigReal0.ONE.equals(roundingMode0);
      BigReal bigReal1 = null;
      // Undeclared exception!
      try { 
        bigReal0.compareTo((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1838);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.toString();
      BigReal bigReal0 = new BigReal((-1838), mathContext0);
      BigReal bigReal1 = null;
      BigReal bigReal2 = bigReal0.multiply(0);
      bigReal2.setScale((-1838));
      // Undeclared exception!
      try { 
        bigReal0.ONE.divide((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal("~-,/.E[BTJXEp.f.", mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigReal bigReal0 = new BigReal(0.0);
      bigReal0.doubleValue();
      BigReal bigReal1 = new BigReal(0.0);
      bigReal0.ZERO.setScale(42);
      bigReal0.compareTo(bigReal1);
      bigReal0.multiply((-6473));
      RoundingMode roundingMode0 = RoundingMode.UP;
      bigReal1.ZERO.setRoundingMode(roundingMode0);
      bigReal0.ZERO.doubleValue();
      try { 
        bigReal0.ZERO.reciprocal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-733L));
      bigReal0.doubleValue();
      bigReal0.ZERO.getField();
      BigReal bigReal1 = bigReal0.ONE.negate();
      bigReal1.negate();
      // Undeclared exception!
      try { 
        bigReal0.subtract((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((String) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MathContext mathContext0 = null;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal("+!Md$;t[]}Z,1wQl>;", (MathContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((BigInteger) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigReal bigReal0 = BigReal.ZERO;
      BigReal bigReal1 = bigReal0.negate();
      BigReal bigReal2 = bigReal1.multiply(bigReal0);
      bigReal2.ZERO.doubleValue();
      bigReal2.ZERO.doubleValue();
      bigReal2.equals(bigReal0);
      bigReal2.doubleValue();
      BigReal bigReal3 = bigReal2.multiply(bigReal1);
      bigReal3.ZERO.compareTo(bigReal2);
      bigReal2.subtract(bigReal1);
      bigReal1.compareTo(bigReal2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigReal bigReal0 = BigReal.ZERO;
      BigReal bigReal1 = new BigReal(2016.3554);
      bigReal0.subtract(bigReal1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal((-1L), mathContext0);
      bigReal0.multiply(1);
      bigReal0.bigDecimalValue();
      bigReal0.getField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigReal bigReal0 = new BigReal(bigDecimal0);
      bigReal0.bigDecimalValue();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigReal bigReal0 = new BigReal(bigInteger0);
      BigReal bigReal1 = bigReal0.negate();
      bigReal1.ZERO.equals(bigReal0);
      bigReal1.ZERO.multiply(919);
      BigReal bigReal2 = bigReal1.multiply(0);
      bigReal2.multiply(0);
      bigReal0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigReal bigReal0 = new BigReal(0);
      bigReal0.ONE.getField();
      bigReal0.setScale(0);
      bigReal0.doubleValue();
      BigReal bigReal1 = bigReal0.multiply(0);
      bigReal1.doubleValue();
      bigReal0.setScale(0);
      bigReal1.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-1614));
      bigReal0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigReal bigReal0 = new BigReal(bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigReal bigReal1 = new BigReal(1067L, mathContext0);
      bigReal0.compareTo(bigReal1);
      BigReal bigReal2 = bigReal0.ONE.multiply((-1812));
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      bigReal0.setRoundingMode(roundingMode0);
      bigReal2.negate();
      bigReal0.equals((Object) null);
      bigReal0.multiply((-1812));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigReal bigReal0 = new BigReal(0L);
      Object object0 = new Object();
      int int0 = 0;
      bigReal0.ZERO.getField();
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigReal bigReal1 = null;
      try {
        bigReal1 = new BigReal((char[]) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '';
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigReal0.ONE.multiply(0);
      BigReal bigReal1 = null;
      try {
        bigReal1 = new BigReal(charArray0, 1069, 1069, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigReal bigReal0 = new BigReal(0.0, (MathContext) null);
      BigReal bigReal1 = bigReal0.multiply(57);
      bigReal1.hashCode();
      try { 
        bigReal1.ONE.divide(bigReal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, (-1), (-62), (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(0);
      BigReal bigReal0 = new BigReal(bigInteger0, (-794));
      BigReal bigReal1 = new BigReal((double) (-794));
      bigReal0.ZERO.compareTo(bigReal1);
      bigReal0.getField();
      bigReal0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      MathContext mathContext0 = MathContext.DECIMAL32;
      Object object0 = new Object();
      mathContext0.equals(object0);
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((char[]) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      MathContext mathContext0 = new MathContext(64, roundingMode0);
      BigReal bigReal0 = new BigReal(bigInteger0, mathContext0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      mathContext0.toString();
      mathContext0.getPrecision();
      mathContext0.getRoundingMode();
      BigReal bigReal0 = new BigReal(2212, mathContext0);
      bigReal0.ZERO.getField();
      bigReal0.hashCode();
      BigReal bigReal1 = bigReal0.reciprocal();
      bigReal1.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(2651, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MathContext mathContext0 = new MathContext(835);
      BigReal bigReal0 = new BigReal(835, mathContext0);
      bigReal0.setScale(835);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigReal bigReal0 = new BigReal(bigInteger0);
      bigReal0.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      charArray0[2] = '^';
      charArray0[3] = '7';
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 281;
      BigReal bigReal0 = new BigReal(281);
      BigReal bigReal1 = null;
      // Undeclared exception!
      try { 
        bigReal0.ZERO.multiply((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((-2847L), (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      Object object0 = new Object();
      mathContext0.equals(object0);
      BigReal bigReal0 = new BigReal((-357.55590938831), mathContext0);
      BigReal bigReal1 = null;
      try {
        bigReal1 = new BigReal("w}F7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'Z';
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigReal bigReal0 = new BigReal((-2758L), mathContext0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal("non square ({0}x{1}) linear operator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.toString();
      BigReal bigReal0 = new BigReal(1.0, mathContext0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[0];
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 0, (-2591));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = new BigReal(bigInteger0, mathContext0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      bigReal0.setRoundingMode(roundingMode0);
      BigReal bigReal1 = new BigReal(bigInteger0, 0, mathContext0);
      bigReal0.ONE.compareTo(bigReal1);
      BigReal bigReal2 = bigReal0.ONE.reciprocal();
      bigReal2.equals(bigInteger0);
      bigReal2.ONE.subtract(bigReal0);
      bigReal0.ONE.compareTo(bigReal2);
      bigReal2.doubleValue();
      bigReal2.ONE.getField();
      BigReal bigReal3 = bigReal0.negate();
      bigReal3.doubleValue();
      BigReal bigReal4 = bigReal2.multiply(0);
      bigReal0.getField();
      BigReal bigReal5 = bigReal2.ONE.subtract(bigReal3);
      Random.setNextRandom((-167));
      BigReal bigReal6 = bigReal5.negate();
      bigReal3.getRoundingMode();
      bigReal2.bigDecimalValue();
      BigReal bigReal7 = new BigReal(0);
      bigReal6.ZERO.compareTo(bigReal7);
      bigReal5.negate();
      BigReal bigReal8 = bigReal3.multiply(bigReal6);
      bigReal4.getField();
      try { 
        bigReal8.divide(bigReal7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigReal bigReal0 = BigReal.ONE;
      BigReal bigReal1 = new BigReal(7);
      bigReal1.ZERO.divide(bigReal0);
      BigReal bigReal2 = bigReal0.ZERO.add(bigReal1);
      bigReal2.equals(bigReal0);
      BigReal bigReal3 = BigReal.ONE;
      Object object0 = new Object();
      bigReal0.ZERO.multiply(bigReal1);
      bigReal3.equals(object0);
      bigReal3.ONE.hashCode();
      bigReal0.ONE.equals(bigReal3);
      BigReal bigReal4 = bigReal0.negate();
      bigReal4.ONE.hashCode();
      bigReal4.ONE.hashCode();
      try { 
        bigReal0.ZERO.reciprocal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'B';
      charArray0[2] = ',';
      charArray0[3] = 'D';
      charArray0[4] = '^';
      charArray0[5] = 'b';
      charArray0[6] = '.';
      charArray0[7] = 'p';
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, 249, 249);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal((String) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-346L));
      bigReal0.ZERO.doubleValue();
      BigReal bigReal1 = bigReal0.reciprocal();
      BigReal bigReal2 = bigReal1.divide(bigReal0);
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      bigReal1.ONE.setRoundingMode(roundingMode0);
      bigReal2.getField();
      RoundingMode roundingMode1 = RoundingMode.DOWN;
      bigReal1.ONE.setRoundingMode(roundingMode1);
      bigReal1.ZERO.getField();
      bigReal0.getRoundingMode();
      bigReal1.subtract(bigReal0);
      bigReal1.bigDecimalValue();
      bigReal0.multiply((-914));
      bigReal1.getScale();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigReal bigReal0 = new BigReal((-471.2));
      BigReal bigReal1 = null;
      // Undeclared exception!
      try { 
        bigReal0.ONE.compareTo((BigReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.BigReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.clearBit(0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(bigInteger1, 0, mathContext0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigReal bigReal0 = new BigReal(992, mathContext0);
      BigReal bigReal1 = new BigReal((-47));
      bigReal0.subtract(bigReal1);
      Random.setNextRandom(992);
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathContext mathContext1 = MathContext.DECIMAL32;
      BigReal bigReal2 = new BigReal(bigInteger0, mathContext1);
      BigReal bigReal3 = bigReal2.negate();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigReal bigReal4 = new BigReal((-47));
      bigReal2.multiply(bigReal4);
      bigReal3.getField();
      bigReal0.negate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.intValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '#';
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigReal bigReal0 = new BigReal(bigInteger0);
      bigReal0.ONE.negate();
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '$';
      charArray0[2] = '~';
      charArray0[3] = 'u';
      charArray0[4] = 'f';
      charArray0[5] = '!';
      charArray0[6] = '$';
      charArray0[7] = 'F';
      charArray0[8] = '!';
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      BigReal bigReal1 = null;
      try {
        bigReal1 = new BigReal(charArray0, (-432), 64, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Bad offset or len arguments for char[] input.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '#';
      charArray0[2] = '}';
      charArray0[3] = '#';
      charArray0[4] = '3';
      charArray0[5] = '@';
      charArray0[6] = '}';
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getPrecision();
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(charArray0, mathContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigReal bigReal0 = null;
      try {
        bigReal0 = new BigReal(1956.6995, (MathContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigReal bigReal0 = new BigReal(2150);
      BigReal bigReal1 = new BigReal((long) 2150);
      bigReal1.ZERO.hashCode();
      bigReal0.ONE.setScale(2666);
      BigReal bigReal2 = bigReal0.ONE.add(bigReal1);
      bigReal2.negate();
      bigReal0.doubleValue();
      bigReal2.getField();
      bigReal2.setScale(2150);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigReal bigReal3 = new BigReal(bigInteger0, 2666);
      bigReal3.doubleValue();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(2666, roundingMode0);
      BigReal bigReal4 = new BigReal((long) 2150, mathContext0);
      bigReal3.ZERO.add(bigReal4);
      Object object0 = new Object();
      bigReal3.ZERO.equals(object0);
      bigReal2.equals(bigReal3);
      BigReal bigReal5 = bigReal2.divide(bigReal0);
      bigReal5.ONE.doubleValue();
      bigReal5.ONE.reciprocal();
      bigReal0.setScale(2666);
      bigReal5.getScale();
      BigReal bigReal6 = null;
      try {
        bigReal6 = new BigReal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}

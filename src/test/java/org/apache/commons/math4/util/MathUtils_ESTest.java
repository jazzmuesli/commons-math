/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:39:13 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.exception.util.Localizable;
import org.apache.commons.math4.util.Decimal64;
import org.apache.commons.math4.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MathUtils.checkNotNull((Object) "");
      int int0 = MathUtils.hash(Double.POSITIVE_INFINITY);
      assertEquals(2146435072, int0);
      
      MathUtils.checkFinite((-2800.423612));
      MathUtils.checkNotNull((Object) "org.apache.commons.math4.util.MathUtils");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-2800.423612);
      try { 
        MathUtils.checkFinite(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value \u221E at index 0
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = (byte) (-125);
      byte byte1 = MathUtils.copySign((byte) (-125), (byte) (-125));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-125), byte1);
      
      int int0 = MathUtils.hash((double) (byte) (-125));
      assertEquals((-1067499520), int0);
      
      int int1 = MathUtils.copySign((-2027), (int) (byte) (-125));
      assertFalse(int1 == int0);
      assertEquals((-2027), int1);
      
      short short0 = MathUtils.copySign((short)0, (short)0);
      assertEquals((short)0, short0);
      
      short short1 = MathUtils.copySign((short)0, (short) (byte) (-125));
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathUtils.checkFinite((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)0, (byte)0);
      assertEquals((byte)0, byte0);
      
      double double0 = 0.0;
      double double1 = MathUtils.reduce(0.0, 0.0, 269.728658);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      short short0 = MathUtils.copySign((short) (byte)0, (short)2261);
      assertEquals((short)0, short0);
      
      int int0 = MathUtils.copySign(64, (-479));
      assertEquals((-64), int0);
      
      try { 
        MathUtils.checkNotNull((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = MathUtils.reduce(2472.240943363532, 2472.240943363532, (-2160.0612730234307));
      assertEquals(2160.0612730234307, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.copySign((byte)0, (byte)0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      Object object0 = null;
      try { 
        MathUtils.checkNotNull((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte byte0 = MathUtils.copySign((byte)0, (byte)0);
      assertEquals((byte)0, byte0);
      
      int int0 = MathUtils.hash((-290.7095679139));
      assertEquals((-1550799737), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1550799737);
      doubleArray0[3] = (-290.7095679139);
      doubleArray0[4] = (double) (byte)0;
      MathUtils.checkFinite(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.550799737E9), (-290.7095679139), 0.0}, doubleArray0, 0.01);
      
      short short0 = MathUtils.copySign((short) (byte)0, (short) (-1612));
      assertEquals((short)0, short0);
      
      double double0 = MathUtils.reduce((-1226.143047573833), 0.0, (-1482.754));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-131.78734158));
      assertNotNull(decimal64_0);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-131.78734158), decimal64_0.getReal(), 0.01);
      assertEquals((-131), decimal64_0.intValue());
      assertEquals((byte)125, decimal64_0.byteValue());
      assertEquals((-131L), decimal64_0.longValue());
      assertEquals("-131.78734158", decimal64_0.toString());
      assertEquals((-131.78734158), decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-131.78734F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-131), decimal64_0.shortValue());
      
      Decimal64 decimal64_1 = MathUtils.min(decimal64_0, decimal64_0);
      assertNotNull(decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-131.78734158), decimal64_0.getReal(), 0.01);
      assertEquals((-131), decimal64_0.intValue());
      assertEquals((byte)125, decimal64_0.byteValue());
      assertEquals((-131L), decimal64_0.longValue());
      assertEquals("-131.78734158", decimal64_0.toString());
      assertEquals((-131.78734158), decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-131.78734F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-131), decimal64_0.shortValue());
      assertEquals((byte)125, decimal64_1.byteValue());
      assertEquals((-131.78734158), decimal64_1.getReal(), 0.01);
      assertEquals((-131.78734158), decimal64_1.doubleValue(), 0.01);
      assertEquals((-131L), decimal64_1.longValue());
      assertEquals((-131), decimal64_1.intValue());
      assertEquals("-131.78734158", decimal64_1.toString());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-131.78734F), decimal64_1.floatValue(), 0.01F);
      assertEquals((short) (-131), decimal64_1.shortValue());
      assertFalse(decimal64_1.isInfinite());
      
      byte byte0 = MathUtils.copySign((byte)0, (byte) (-128));
      assertEquals((byte)0, byte0);
      
      short short0 = MathUtils.copySign((short) (-98), (short) (byte) (-128));
      assertEquals((short) (-98), short0);
      
      MathUtils.checkFinite((-1.0));
      MathUtils.checkNotNull((Object) decimal64_0);
      assertSame(decimal64_0, decimal64_1);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-131.78734158), decimal64_0.getReal(), 0.01);
      assertEquals((-131), decimal64_0.intValue());
      assertEquals((byte)125, decimal64_0.byteValue());
      assertEquals((-131L), decimal64_0.longValue());
      assertEquals("-131.78734158", decimal64_0.toString());
      assertEquals((-131.78734158), decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-131.78734F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-131), decimal64_0.shortValue());
      
      long long0 = MathUtils.copySign(0L, (long) (byte)0);
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (short) (-98);
      doubleArray0[3] = (-131.78734158);
      doubleArray0[4] = (-131.78734158);
      doubleArray0[5] = (double) (byte) (-128);
      doubleArray0[6] = (double) (byte)0;
      MathUtils.checkFinite(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-98.0), (-131.78734158), (-131.78734158), (-128.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = Double.NaN;
      try { 
        MathUtils.checkFinite(Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \uFFFD is not a finite number
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.copySign((byte)0, (byte)0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      try { 
        MathUtils.checkFinite(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -\u221E is not a finite number
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = (byte) (-128);
      byte byte1 = (byte)0;
      try { 
        MathUtils.copySign((byte) (-128), (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = MathUtils.copySign(0L, 0L);
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 1.0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1960196929, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      long long1 = MathUtils.copySign((long) 1960196929, (-528L));
      assertFalse(long1 == long0);
      assertEquals((-1960196929L), long1);
      
      MathUtils.checkNotNull((Object) "7:v[t7`!Y7AVu");
      MathUtils.checkFinite((double) (-1960196929L));
      Decimal64 decimal64_0 = new Decimal64(5161.1759);
      assertNotNull(decimal64_0);
      assertEquals((short)5161, decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(5161.1759, decimal64_0.getReal(), 0.01);
      assertEquals("5161.1759", decimal64_0.toString());
      assertEquals(5161.1759, decimal64_0.doubleValue(), 0.01);
      assertEquals(5161L, decimal64_0.longValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(5161.176F, decimal64_0.floatValue(), 0.01F);
      assertEquals(5161, decimal64_0.intValue());
      assertEquals((byte)41, decimal64_0.byteValue());
      
      MathUtils.checkNotNull((Object) decimal64_0);
      assertEquals((short)5161, decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(5161.1759, decimal64_0.getReal(), 0.01);
      assertEquals("5161.1759", decimal64_0.toString());
      assertEquals(5161.1759, decimal64_0.doubleValue(), 0.01);
      assertEquals(5161L, decimal64_0.longValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(5161.176F, decimal64_0.floatValue(), 0.01F);
      assertEquals(5161, decimal64_0.intValue());
      assertEquals((byte)41, decimal64_0.byteValue());
      
      int int1 = MathUtils.copySign(1960196929, Integer.MIN_VALUE);
      assertFalse(int1 == int0);
      assertEquals((-1960196929), int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(2664.4, 0.0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2664.4;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2664.4;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2664.4;
      doubleArray0[8] = 0.0;
      MathUtils.checkFinite(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2664.4, 0.0, 2664.4, 0.0, 2664.4, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathUtils.reduce(9.869604401089358, (-1996.389), 1940.258399068362);
      assertEquals(66.00020533272732, double0, 0.01);
      
      byte byte0 = MathUtils.copySign((byte) (-16), (byte) (-16));
      assertEquals((byte) (-16), byte0);
      
      int int0 = MathUtils.copySign((int) (byte) (-16), (int) (byte) (-16));
      assertEquals((-16), int0);
      
      byte byte1 = MathUtils.copySign((byte) (-67), (byte) (-16));
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-67), byte1);
      
      int int1 = MathUtils.copySign((int) (byte) (-67), (-16));
      assertFalse(int1 == int0);
      assertEquals((-67), int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(961, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathUtils.equals(3.141592653589793, (-1091.5965));
      assertFalse(boolean0);
      
      MathUtils.checkFinite(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short short0 = (short) (-32768);
      try { 
        MathUtils.copySign((short) (-32768), (short)603);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MathUtils.checkFinite(589.291124366);
      int int0 = MathUtils.copySign(4069, (-4018));
      assertEquals((-4069), int0);
      
      double double0 = MathUtils.reduce((-1045.8378276), (-1.0), 4069);
      assertEquals(0.16217239999969024, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathUtils.checkFinite((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = MathUtils.copySign(0, 0);
      assertEquals(0, int0);
      
      int int1 = MathUtils.copySign((-2087), (-2087));
      assertFalse(int1 == int0);
      assertEquals((-2087), int1);
      
      boolean boolean0 = MathUtils.equals(0.0, (double) 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      MathUtils.checkNotNull((Object) "b)0L%VKz^N)ff75fki9", (Localizable) null, objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1874.77;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 357.5564207;
      doubleArray0[3] = 0.0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1291138828), int0);
      assertArrayEquals(new double[] {1874.77, 0.0, 357.5564207, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathUtils.equals(3792.6877, 1309.3695);
      assertFalse(boolean0);
      
      boolean boolean1 = MathUtils.equals(3763.0, 357.5564207);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathUtils.checkFinite(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1874.77, 0.0, 357.5564207, 0.0}, doubleArray0, 0.01);
      
      int int1 = MathUtils.hash(doubleArray0);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1291138828), int1);
      assertArrayEquals(new double[] {1874.77, 0.0, 357.5564207, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertNotNull(decimal64_0);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals("0.0", decimal64_0.toString());
      
      Decimal64 decimal64_1 = MathUtils.max(decimal64_0, decimal64_0);
      assertNotNull(decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0L, decimal64_1.longValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0, decimal64_1.intValue());
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_1.toString());
      
      // Undeclared exception!
      try { 
        MathUtils.min((Decimal64) null, decimal64_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.0, 0.0);
      assertTrue(boolean0);
      
      long long0 = MathUtils.copySign(1143L, 0L);
      assertEquals(1143L, long0);
      
      int int0 = MathUtils.hash((double) 0L);
      assertEquals(0, int0);
      
      byte byte0 = MathUtils.copySign((byte)97, (byte)97);
      assertEquals((byte)97, byte0);
      
      long long1 = MathUtils.copySign(0L, (long) (byte)97);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      MathUtils.checkFinite(3367.7508052);
      short short0 = MathUtils.copySign((short)627, (short) (-1));
      assertEquals((short) (-627), short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2895.106282649;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(705393978, int0);
      assertArrayEquals(new double[] {2895.106282649}, doubleArray0, 0.01);
      
      long long0 = MathUtils.copySign((-2654L), (long) 705393978);
      assertEquals(2654L, long0);
      
      int int1 = MathUtils.copySign(0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long long1 = (-9223372036854775808L);
      try { 
        MathUtils.copySign((-9223372036854775808L), 2754L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        MathUtils.copySign((-9223372036854775808L), 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // overflow
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-91.75037054090738), (-1234.46254543));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-91.75037054090738);
      doubleArray0[1] = (-1234.46254543);
      doubleArray0[2] = (-1234.46254543);
      doubleArray0[3] = (-1234.46254543);
      doubleArray0[4] = (-91.75037054090738);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(643336411, int0);
      assertArrayEquals(new double[] {(-91.75037054090738), (-1234.46254543), (-1234.46254543), (-1234.46254543), (-91.75037054090738)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.checkFinite(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathUtils.reduce(341.371, (-1993.0), 341.371);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathUtils.reduce((-1993.0), 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      byte byte0 = MathUtils.copySign((byte)108, (byte)108);
      assertEquals((byte)108, byte0);
      
      byte byte1 = MathUtils.copySign((byte)108, (byte)94);
      assertTrue(byte1 == byte0);
      assertEquals((byte)108, byte1);
      
      int int0 = MathUtils.copySign(98, 55);
      assertEquals(98, int0);
      
      Decimal64 decimal64_0 = new Decimal64((-2211.469289683776));
      assertNotNull(decimal64_0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-2211), decimal64_0.intValue());
      assertEquals((-2211.469289683776), decimal64_0.getReal(), 0.01);
      assertEquals("-2211.469289683776", decimal64_0.toString());
      assertEquals((-2211.4692F), decimal64_0.floatValue(), 0.01F);
      assertEquals((byte)93, decimal64_0.byteValue());
      assertEquals((-2211L), decimal64_0.longValue());
      assertEquals((short) (-2211), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-2211.469289683776), decimal64_0.doubleValue(), 0.01);
      
      MathUtils.checkNotNull((Object) decimal64_0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-2211), decimal64_0.intValue());
      assertEquals((-2211.469289683776), decimal64_0.getReal(), 0.01);
      assertEquals("-2211.469289683776", decimal64_0.toString());
      assertEquals((-2211.4692F), decimal64_0.floatValue(), 0.01F);
      assertEquals((byte)93, decimal64_0.byteValue());
      assertEquals((-2211L), decimal64_0.longValue());
      assertEquals((short) (-2211), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-2211.469289683776), decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte byte0 = (byte) (-28);
      byte byte1 = (byte)0;
      byte byte2 = MathUtils.copySign((byte) (-28), (byte)0);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertEquals((byte)28, byte2);
      
      double double0 = 1564.5;
      Decimal64 decimal64_0 = new Decimal64(1564.5);
      assertNotNull(decimal64_0);
      assertEquals((short)1564, decimal64_0.shortValue());
      assertEquals(1564L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("1564.5", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1564.5, decimal64_0.doubleValue(), 0.01);
      assertEquals(1564.5, decimal64_0.getReal(), 0.01);
      assertEquals(1564, decimal64_0.intValue());
      assertEquals(1564.5F, decimal64_0.floatValue(), 0.01F);
      assertEquals((byte)28, decimal64_0.byteValue());
      
      Decimal64 decimal64_1 = MathUtils.max(decimal64_0, decimal64_0);
      assertNotNull(decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertEquals((short)1564, decimal64_0.shortValue());
      assertEquals(1564L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("1564.5", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1564.5, decimal64_0.doubleValue(), 0.01);
      assertEquals(1564.5, decimal64_0.getReal(), 0.01);
      assertEquals(1564, decimal64_0.intValue());
      assertEquals(1564.5F, decimal64_0.floatValue(), 0.01F);
      assertEquals((byte)28, decimal64_0.byteValue());
      assertEquals((byte)28, decimal64_1.byteValue());
      assertEquals(1564.5, decimal64_1.getReal(), 0.01);
      assertEquals(1564.5F, decimal64_1.floatValue(), 0.01F);
      assertEquals("1564.5", decimal64_1.toString());
      assertFalse(decimal64_1.isNaN());
      assertEquals(1564, decimal64_1.intValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(1564L, decimal64_1.longValue());
      assertEquals(1564.5, decimal64_1.doubleValue(), 0.01);
      assertEquals((short)1564, decimal64_1.shortValue());
      
      // Undeclared exception!
      try { 
        MathUtils.max((Dfp) null, (Dfp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((-1171.713421788241), (-1171.713421788241));
      assertTrue(boolean0);
      
      Decimal64 decimal64_0 = new Decimal64((-1171.713421788241));
      assertNotNull(decimal64_0);
      assertEquals((byte)109, decimal64_0.byteValue());
      assertEquals((-1171.713421788241), decimal64_0.getReal(), 0.01);
      assertEquals((-1171L), decimal64_0.longValue());
      assertEquals((-1171.7134F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-1171), decimal64_0.shortValue());
      assertEquals((-1171.713421788241), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1171.713421788241", decimal64_0.toString());
      assertEquals((-1171), decimal64_0.intValue());
      assertFalse(decimal64_0.isInfinite());
      assertFalse(decimal64_0.isNaN());
      
      Decimal64 decimal64_1 = MathUtils.max(decimal64_0, decimal64_0);
      assertNotNull(decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertEquals((byte)109, decimal64_0.byteValue());
      assertEquals((-1171.713421788241), decimal64_0.getReal(), 0.01);
      assertEquals((-1171L), decimal64_0.longValue());
      assertEquals((-1171.7134F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-1171), decimal64_0.shortValue());
      assertEquals((-1171.713421788241), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1171.713421788241", decimal64_0.toString());
      assertEquals((-1171), decimal64_0.intValue());
      assertFalse(decimal64_0.isInfinite());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1171.7134F), decimal64_1.floatValue(), 0.01F);
      assertEquals((byte)109, decimal64_1.byteValue());
      assertEquals((-1171.713421788241), decimal64_1.getReal(), 0.01);
      assertEquals((-1171L), decimal64_1.longValue());
      assertEquals((-1171), decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short) (-1171), decimal64_1.shortValue());
      assertEquals((-1171.713421788241), decimal64_1.doubleValue(), 0.01);
      assertEquals("-1171.713421788241", decimal64_1.toString());
      
      long long0 = MathUtils.copySign(0L, (-1073741824L));
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1171.713421788241);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1073741824L);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-540177596), int0);
      assertArrayEquals(new double[] {(-1171.713421788241), 0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      
      int int1 = MathUtils.hash((double) 0L);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = MathUtils.hash(doubleArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-540177596), int2);
      assertArrayEquals(new double[] {(-1171.713421788241), 0.0, (-1.073741824E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      short short0 = MathUtils.copySign((short)1, (short)325);
      assertEquals((short)1, short0);
      
      long long0 = MathUtils.copySign((long) (short)1, (long) (short)1);
      assertEquals(1L, long0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)325;
      doubleArray0[4] = (double) (short)325;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      MathUtils.checkFinite(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 325.0, 325.0, 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2405.1949);
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(155976119, int0);
      assertArrayEquals(new double[] {(-2405.1949)}, doubleArray0, 0.01);
      
      int int1 = MathUtils.copySign(290, 155976119);
      assertFalse(int1 == int0);
      assertEquals(290, int1);
      
      MathUtils.checkFinite(0.0);
      byte byte0 = MathUtils.copySign((byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = MathUtils.copySign((-863), 918);
      assertEquals(863, int0);
      
      short short0 = MathUtils.copySign((short) (-3565), (short)2110);
      assertEquals((short)3565, short0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-863);
      doubleArray0[2] = (double) (short)3565;
      doubleArray0[3] = (-335.025);
      doubleArray0[4] = (double) 863;
      doubleArray0[5] = (double) 918;
      doubleArray0[6] = (double) (short) (-3565);
      int int1 = MathUtils.hash(doubleArray0);
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(114285279, int1);
      assertArrayEquals(new double[] {1.0, (-863.0), 3565.0, (-335.025), 863.0, 918.0, (-3565.0)}, doubleArray0, 0.01);
      
      MathUtils.checkFinite(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-863.0), 3565.0, (-335.025), 863.0, 918.0, (-3565.0)}, doubleArray0, 0.01);
      
      int int2 = MathUtils.hash((double) (short) (-3565));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1062479360), int2);
      
      MathUtils.checkFinite(0.0);
      // Undeclared exception!
      try { 
        MathUtils.min((Decimal64) null, (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = MathUtils.hash(1042.3728);
      assertEquals((-2607439), int0);
      
      long long0 = MathUtils.copySign(0L, 1L);
      assertEquals(0L, long0);
      
      long long1 = MathUtils.copySign((long) (-2607439), 1341L);
      assertFalse(long1 == long0);
      assertEquals(2607439L, long1);
      
      double double0 = MathUtils.reduce(0.0, (-3.141592653589793), (-1128.33518));
      assertEquals(0.5034173612643826, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1.0);
      assertNotNull(decimal64_0);
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals(1, decimal64_0.intValue());
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      
      Decimal64 decimal64_1 = MathUtils.min(decimal64_0, decimal64_0);
      assertNotNull(decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals(1, decimal64_0.intValue());
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)1, decimal64_1.shortValue());
      assertEquals((byte)1, decimal64_1.byteValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(1.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
      assertEquals("1.0", decimal64_1.toString());
      assertEquals(1, decimal64_1.intValue());
      assertEquals(1.0, decimal64_1.getReal(), 0.01);
      assertFalse(decimal64_1.isNaN());
      assertEquals(1L, decimal64_1.longValue());
      
      short short0 = MathUtils.copySign((short)4522, (short)0);
      assertEquals((short)4522, short0);
      
      int int0 = MathUtils.hash(260.8679814629656);
      assertEquals(16220776, int0);
      
      MathUtils.checkNotNull((Object) "i+x_>(k");
      boolean boolean0 = MathUtils.equals((double) (short)0, (double) (short)0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 260.8679814629656;
      doubleArray0[3] = 260.8679814629656;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)4522;
      int int1 = MathUtils.hash(doubleArray0);
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1428352543, int1);
      assertArrayEquals(new double[] {0.0, 0.0, 260.8679814629656, 260.8679814629656, 0.0, 0.0, 1.0, 0.0, 4522.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MathUtils.checkNotNull((Object) "org.apache.commons.math4.util.MathUtils");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Decimal64 decimal64_0 = null;
      // Undeclared exception!
      try { 
        MathUtils.min((Decimal64) null, (Decimal64) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      short short0 = MathUtils.copySign((short)270, (short) (-279));
      assertEquals((short) (-270), short0);
      
      short short1 = MathUtils.copySign((short) (-4177), (short)270);
      assertFalse(short1 == short0);
      assertEquals((short)4177, short1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-4177);
      doubleArray0[1] = (double) (short)270;
      doubleArray0[2] = (double) (short) (-270);
      doubleArray0[3] = (double) (short) (-279);
      doubleArray0[4] = (double) (short) (-279);
      doubleArray0[5] = (double) (short) (-279);
      doubleArray0[6] = (double) (short) (-279);
      doubleArray0[7] = (double) (short)270;
      MathUtils.checkFinite(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-4177.0), 270.0, (-270.0), (-279.0), (-279.0), (-279.0), (-279.0), 270.0}, doubleArray0, 0.01);
      
      double double0 = (-2819.638959);
      boolean boolean0 = MathUtils.equals(1.0, (-2819.638959));
      assertFalse(boolean0);
      
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-482353663), int0);
      assertArrayEquals(new double[] {(-4177.0), 270.0, (-270.0), (-279.0), (-279.0), (-279.0), (-279.0), 270.0}, doubleArray0, 0.01);
      
      int int1 = MathUtils.hash(doubleArray0);
      assertTrue(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-482353663), int1);
      assertArrayEquals(new double[] {(-4177.0), 270.0, (-270.0), (-279.0), (-279.0), (-279.0), (-279.0), 270.0}, doubleArray0, 0.01);
      
      int int2 = MathUtils.hash(doubleArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-482353663), int2);
      assertArrayEquals(new double[] {(-4177.0), 270.0, (-270.0), (-279.0), (-279.0), (-279.0), (-279.0), 270.0}, doubleArray0, 0.01);
      
      boolean boolean1 = MathUtils.equals(0.0, (double) (short) (-270));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = MathUtils.hash(239.6380694);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1357465321, int3);
      
      byte byte0 = MathUtils.copySign((byte)60, (byte)60);
      assertEquals((byte)60, byte0);
      
      // Undeclared exception!
      try { 
        MathUtils.max((Dfp) null, (Dfp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = MathUtils.copySign((-831L), (-831L));
      assertEquals((-831L), long0);
      
      int int0 = MathUtils.copySign(0, 0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-831L);
      MathUtils.checkFinite(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-831.0)}, doubleArray0, 0.01);
      
      MathUtils.checkFinite(1853.92);
      short short0 = MathUtils.copySign((short)727, (short)0);
      assertEquals((short)727, short0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MathUtils.copySign((short) (-2956), (short) (-2956));
      MathUtils.checkFinite(0.0);
      MathUtils.reduce((short) (-2956), 0.0, (short) (-2956));
      MathUtils.copySign((int) (short) (-2956), 0);
      MathUtils.copySign((short) (-2956), (short) (-2956));
      MathUtils.copySign((byte)1, (byte) (-62));
      MathUtils.hash(0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-2956);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (short) (-2956);
      doubleArray0[4] = (double) (short) (-2956);
      try { 
        MathUtils.checkFinite(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // value \uFFFD at index 2
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      short short0 = MathUtils.copySign((short)0, (short)0);
      assertEquals((short)0, short0);
      
      byte byte0 = MathUtils.copySign((byte)66, (byte) (-104));
      assertEquals((byte) (-66), byte0);
      
      double double0 = MathUtils.reduce((-145.3481388), (short)0, (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathUtils.reduce((short)0, (-308.1789997488427), 0.0);
      assertEquals(0.0, double1, 0.01);
      
      byte byte1 = MathUtils.copySign((byte) (-2), (byte)0);
      assertEquals((byte)2, byte1);
  }
}

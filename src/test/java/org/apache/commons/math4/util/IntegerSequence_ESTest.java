/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:28:35 GMT 2019
 */

package org.apache.commons.math4.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.math4.util.IntegerSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntegerSequence_ESTest extends IntegerSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withIncrement(1922);
      try { 
        integerSequence_Incrementor1.increment(1922);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.increment((-1605));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,605 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withIncrement((-387));
      IntegerSequence.Incrementor integerSequence_Incrementor2 = integerSequence_Incrementor1.withMaximalCount(0);
      IntegerSequence.Incrementor.MaxCountExceededCallback integerSequence_Incrementor_MaxCountExceededCallback0 = mock(IntegerSequence.Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IntegerSequence.Incrementor integerSequence_Incrementor3 = integerSequence_Incrementor2.withCallback(integerSequence_Incrementor_MaxCountExceededCallback0);
      integerSequence_Incrementor3.canIncrement(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntegerSequence.range(1430, (-209), 1430);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withStart((-518));
      IntegerSequence.Incrementor integerSequence_Incrementor2 = integerSequence_Incrementor1.withIncrement(1);
      integerSequence_Incrementor2.next();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor.MaxCountExceededCallback integerSequence_Incrementor_MaxCountExceededCallback0 = mock(IntegerSequence.Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withCallback(integerSequence_Incrementor_MaxCountExceededCallback0);
      integerSequence_Incrementor1.increment(1922);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = new IntegerSequence.Range((-280), (-280), (-280));
      integerSequence_Range0.iterator();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      integerSequence_Incrementor0.hasNext();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntegerSequence.range(1922, 1146);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerSequence.range((-400), 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = new IntegerSequence.Range((-1), 833, (-1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withMaximalCount(2190);
      integerSequence_Incrementor1.increment();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.increment(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      IntegerSequence.Incrementor integerSequence_Incrementor1 = integerSequence_Incrementor0.withIncrement((-387));
      IntegerSequence.Incrementor integerSequence_Incrementor2 = integerSequence_Incrementor1.withMaximalCount((-387));
      IntegerSequence.Incrementor.MaxCountExceededCallback integerSequence_Incrementor_MaxCountExceededCallback0 = mock(IntegerSequence.Incrementor.MaxCountExceededCallback.class, new ViolatedAssumptionAnswer());
      IntegerSequence.Incrementor integerSequence_Incrementor3 = integerSequence_Incrementor2.withCallback(integerSequence_Incrementor_MaxCountExceededCallback0);
      integerSequence_Incrementor3.canIncrement((-387));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.withIncrement(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.withCallback((IntegerSequence.Incrementor.MaxCountExceededCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = IntegerSequence.range(249, 249, 249);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      integerSequence_Range0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = IntegerSequence.range(419, 1179, (-1));
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      integerSequence_Range0.forEach(consumer0);
      assertEquals(0, integerSequence_Range0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      int int0 = integerSequence_Incrementor0.getMaximalCount();
      assertEquals(0, integerSequence_Incrementor0.getCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      int int0 = integerSequence_Incrementor0.getCount();
      assertEquals(0, int0);
      assertEquals(0, integerSequence_Incrementor0.getMaximalCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      boolean boolean0 = integerSequence_Incrementor0.canIncrement();
      assertEquals(0, integerSequence_Incrementor0.getMaximalCount());
      assertFalse(boolean0);
      assertFalse(integerSequence_Incrementor0.hasNext());
      assertEquals(0, integerSequence_Incrementor0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerSequence.Incrementor integerSequence_Incrementor0 = IntegerSequence.Incrementor.create();
      // Undeclared exception!
      try { 
        integerSequence_Incrementor0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math4.util.IntegerSequence$Incrementor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = IntegerSequence.range(756, 2449);
      assertEquals(1694, integerSequence_Range0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerSequence.Range integerSequence_Range0 = new IntegerSequence.Range(0, 2, 2);
      int int0 = integerSequence_Range0.size();
      assertEquals(2, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:38:32 GMT 2019
 */

package org.apache.commons.math4.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.transform.TransformUtils;
import org.apache.commons.numbers.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformUtils_ESTest extends TransformUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      try { 
        TransformUtils.createComplexArray(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      try { 
        TransformUtils.createComplexArray(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2605.15423772465);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      Complex[] complexArray0 = TransformUtils.createComplexArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, complexArray0.length);
      assertNotNull(complexArray0);
      
      Complex[] complexArray1 = TransformUtils.scaleArray(complexArray0, 468.0);
      assertSame(complexArray0, complexArray1);
      assertSame(complexArray1, complexArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, complexArray0.length);
      assertEquals(6, complexArray1.length);
      assertNotNull(complexArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1073741824;
      double[] doubleArray1 = TransformUtils.scaleArray(doubleArray0, 900.0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {9.663676416E11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.663676416E11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex[] complexArray0 = new Complex[0];
      Complex[] complexArray1 = TransformUtils.scaleArray(complexArray0, 2.0);
      assertSame(complexArray0, complexArray1);
      assertSame(complexArray1, complexArray0);
      assertEquals(0, complexArray0.length);
      assertEquals(0, complexArray1.length);
      assertNotNull(complexArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = TransformUtils.scaleArray(doubleArray0, 0.0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = TransformUtils.exactLog2(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex[] complexArray0 = new Complex[0];
      double[][] doubleArray0 = TransformUtils.createRealImaginaryArray(complexArray0);
      assertEquals(0, complexArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Complex[] complexArray1 = TransformUtils.createComplexArray(doubleArray0);
      assertFalse(complexArray1.equals((Object)complexArray0));
      assertNotSame(complexArray0, complexArray1);
      assertNotSame(complexArray1, complexArray0);
      assertEquals(0, complexArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, complexArray1.length);
      assertNotNull(complexArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformUtils.scaleArray((Complex[]) null, 1650.200661483708);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformUtils.scaleArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformUtils.createRealImaginaryArray((Complex[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformUtils.createComplexArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        TransformUtils.exactLog2(2549);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2,549 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = TransformUtils.exactLog2(1073741824);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[1] = doubleArray0;
      try { 
        TransformUtils.createComplexArray(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      try { 
        TransformUtils.createComplexArray(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(complex0).getImaginary();
      doReturn(0.0, 0.0, 0.0, 0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      double[][] doubleArray0 = TransformUtils.createRealImaginaryArray(complexArray0);
      assertEquals(2, doubleArray0.length);
      
      Complex[] complexArray1 = TransformUtils.createComplexArray(doubleArray0);
      assertEquals(4, complexArray1.length);
  }
}

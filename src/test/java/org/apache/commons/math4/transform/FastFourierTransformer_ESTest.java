/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:04:15 GMT 2019
 */

package org.apache.commons.math4.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.transform.DftNormalization;
import org.apache.commons.math4.transform.FastFourierTransformer;
import org.apache.commons.math4.transform.TransformType;
import org.apache.commons.numbers.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastFourierTransformer_ESTest extends FastFourierTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-492.008631);
      doubleArray0[1] = (-767.5753405121594);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.7853981633974483;
      TransformType transformType0 = TransformType.INVERSE;
      Complex[] complexArray0 = fastFourierTransformer0.transform(doubleArray0, transformType0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType0);
      TransformType transformType1 = TransformType.INVERSE;
      fastFourierTransformer0.transform(complexArray0, transformType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(2547.58, (-1.0)).when(complex0).getImaginary();
      doReturn(4088.5297, (-26.82586876185122)).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(complexArray0, transformType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[6];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) null, (-1.0), 0.0, 3014, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[9];
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(univariateFunction0, 0.0, 426.21, 2, transformType0);
      doubleArray0[0] = (-0.049067674327418015);
      doubleArray0[1] = (-778.906219);
      doubleArray0[2] = 3213.7698;
      doubleArray0[3] = 0.5;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType1 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction1, 0.0, 0.5, (-89), transformType1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: -89
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double double0 = (-0.3826834323650898);
      double double1 = 0.0;
      int int0 = 732;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction0, (-0.3826834323650898), 0.0, 732, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 732 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][5];
      TransformType transformType0 = TransformType.FORWARD;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      int int0 = 2182;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction1, (-3.657295198167899E-10), 3.141592653589793, 2182, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2,182 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = null;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((double[]) null, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1938.55302003);
      double double0 = (-581.9);
      doubleArray1[1] = (-581.9);
      doubleArray1[2] = 6.283185307179586;
      double double1 = (-2001.80659051);
      doubleArray1[3] = (-2001.80659051);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3079.2472714;
      double double2 = (-1774.0);
      DftNormalization dftNormalization1 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization1, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[9];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(complex0).getImaginary();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      complexArray0[4] = complex0;
      complexArray0[5] = complex0;
      complexArray0[6] = complex0;
      complexArray0[7] = complex0;
      complexArray0[8] = complex0;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(complexArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[][] doubleArrayArray0 = null;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace((double[][]) null, dftNormalization0, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[4];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(complex0).getImaginary();
      doReturn(0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(complexArray0, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.TransformUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1074.0475);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1074.0475);
      doubleArray2[2] = (-1074.0475);
      doubleArray2[3] = (-1074.0475);
      double double0 = (-1891.8975049);
      doubleArray2[4] = (-1891.8975049);
      doubleArray2[5] = (-1074.0475);
      doubleArray2[6] = (-1074.0475);
      doubleArray2[7] = (-1074.0475);
      doubleArray2[8] = (-1074.0475);
      doubleArray0[1] = doubleArray2;
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.5707963267948966;
      doubleArray1[1] = 311.0172696196;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1715.0);
      doubleArray1[5] = (-278.0632);
      doubleArray1[6] = 0.9996988186962042;
      doubleArray1[7] = 954.1309592842398;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2272.33834630778;
      doubleArray2[2] = (-1715.0);
      doubleArray2[3] = (-1715.0);
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction0, 0.0, 0.0, 0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: 0
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[7];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = (-2701.273196105666);
      doubleArray0[1] = (-2701.273196105666);
      doubleArray0[2] = 0.0;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2478.381144;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1584.158947323);
      doubleArray0[4] = 671.1;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1169.24793);
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(doubleArray0, transformType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[0];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(complexArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1181.744899;
      double double0 = 2283.5706;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 4055;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction0, 1189.2797675554, (-2206.832155902015), 4055, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,189.28 is larger than, or equal to, the maximum (-2,206.832)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-838.56392694);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 43.0;
      doubleArray2[5] = 776.022375164399;
      doubleArray2[6] = (-147.633843905);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 43.0;
      doubleArray0[2] = doubleArray3;
      DftNormalization dftNormalization1 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization1, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform((UnivariateFunction) null, 0.0, 0.0, 16, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray0, dftNormalization0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[8];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(complex0).getImaginary();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      complexArray0[4] = complex0;
      complexArray0[5] = complex0;
      complexArray0[6] = complex0;
      complexArray0[7] = complex0;
      TransformType transformType0 = TransformType.FORWARD;
      fastFourierTransformer0.transform(complexArray0, transformType0);
      Complex[] complexArray1 = new Complex[1];
      Complex complex1 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(complex1).getImaginary();
      doReturn(0.0).when(complex1).getReal();
      complexArray1[0] = complex1;
      TransformType transformType1 = TransformType.FORWARD;
      fastFourierTransformer0.transform(complexArray1, transformType1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      Complex[] complexArray0 = new Complex[8];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      complexArray0[0] = complex0;
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 2774.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-259.3590770946092);
      doubleArray0[5] = 2.0;
      doubleArray0[6] = 0.9999247018391445;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2774.0;
      TransformType transformType0 = TransformType.FORWARD;
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      complexArray0[4] = complex0;
      complexArray0[5] = complex0;
      complexArray0[6] = complex0;
      complexArray0[7] = complex0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      TransformType transformType1 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2, consider padding for fix
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-255.7203986);
      doubleArray0[1] = 2063.949436236683;
      doubleArray0[2] = 5530.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-850.912);
      doubleArray0[5] = (-2.340668926827455E-8);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-666.2777132122158);
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(doubleArray0, transformType0);
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DftNormalization dftNormalization1 = DftNormalization.STANDARD;
      TransformType transformType1 = TransformType.INVERSE;
      FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization1, transformType1);
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(complex0).getImaginary();
      doReturn(0.0, 0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      fastFourierTransformer0.transform(complexArray0, transformType1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-492.008631);
      doubleArray0[1] = (-767.5753405121594);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.7853981633974483;
      TransformType transformType0 = TransformType.FORWARD;
      Complex[] complexArray0 = fastFourierTransformer0.transform(doubleArray0, transformType0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType0);
      TransformType transformType1 = TransformType.INVERSE;
      fastFourierTransformer0.transform(complexArray0, transformType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      double[] doubleArray0 = new double[9];
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.9315965175628662, 0.9315965175628662).when(univariateFunction0).value(anyDouble());
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(univariateFunction0, 0.0, 426.21, 2, transformType0);
      doubleArray0[0] = (-0.049067674327418015);
      doubleArray0[1] = (-778.906219);
      doubleArray0[2] = 3213.7698;
      doubleArray0[3] = 0.5;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType1 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastFourierTransformer0.transform(univariateFunction1, 0.0, 0.5, (-89), transformType1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: -89
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.UNITARY;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[9];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      complexArray0[2] = complex0;
      complexArray0[3] = complex0;
      complexArray0[4] = complex0;
      complexArray0[5] = complex0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-835.495555);
      TransformType transformType0 = TransformType.INVERSE;
      fastFourierTransformer0.transform(doubleArray0, transformType0);
      complexArray0[6] = complex0;
      complexArray0[7] = complex0;
      complexArray0[8] = complex0;
      TransformType transformType1 = TransformType.INVERSE;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      TransformType transformType2 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        FastFourierTransformer.transformInPlace(doubleArray1, dftNormalization0, transformType2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math4.transform.FastFourierTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DftNormalization dftNormalization0 = DftNormalization.STANDARD;
      FastFourierTransformer fastFourierTransformer0 = new FastFourierTransformer(dftNormalization0);
      Complex[] complexArray0 = new Complex[2];
      Complex complex0 = mock(Complex.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(complex0).getImaginary();
      doReturn(0.0, 0.0).when(complex0).getReal();
      complexArray0[0] = complex0;
      complexArray0[1] = complex0;
      TransformType transformType0 = TransformType.INVERSE;
      Complex[] complexArray1 = fastFourierTransformer0.transform(complexArray0, transformType0);
      assertEquals(2, complexArray1.length);
  }
}

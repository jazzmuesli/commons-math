/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:52:50 GMT 2019
 */

package org.apache.commons.math4.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.transform.FastHadamardTransformer;
import org.apache.commons.math4.transform.TransformType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastHadamardTransformer_ESTest extends FastHadamardTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double0 = 108.50878090436;
      int int0 = 290;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform((UnivariateFunction) null, (-849.903738673999), (-1.0), 290, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double0 = 932.2;
      double double1 = (-320.82511880196);
      int int0 = (-1775);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.fht((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 4.82208056345995;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-457.77218454824106);
      TransformType transformType0 = TransformType.FORWARD;
      fastHadamardTransformer0.transform(doubleArray1, transformType0);
      doubleArray0[0] = 1556.1881028346;
      TransformType transformType1 = TransformType.INVERSE;
      fastHadamardTransformer0.fht(doubleArray0);
      fastHadamardTransformer0.transform(doubleArray0, transformType1);
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2043.415519914;
      TransformType transformType0 = TransformType.FORWARD;
      fastHadamardTransformer0.transform(doubleArray0, transformType0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double[] doubleArray1 = fastHadamardTransformer0.transform(univariateFunction0, (-976.0), 3191.6570726529, 2, transformType0);
      TransformType transformType1 = TransformType.INVERSE;
      fastHadamardTransformer0.transform(doubleArray1, transformType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 3781;
      intArray0[2] = 0;
      intArray0[3] = 506;
      fastHadamardTransformer0.transform(intArray0);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform((double[]) null, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1313);
      intArray0[1] = (-946);
      intArray0[2] = 1092;
      intArray0[3] = (-2366);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 10;
      intArray0[7] = 1011;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      UnivariateFunction univariateFunction0 = null;
      int int0 = 1564;
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform((UnivariateFunction) null, 1146.4571641598, 0.0, 1564, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,146.457 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 186.96793837095;
      doubleArray0[1] = (-3394.111289);
      doubleArray0[2] = 1711.548015749;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1711.548015749;
      doubleArray1[2] = 1711.548015749;
      doubleArray1[3] = (-3394.111289);
      TransformType transformType0 = TransformType.INVERSE;
      fastHadamardTransformer0.transform(doubleArray1, transformType0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      TransformType transformType1 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(doubleArray0, transformType1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[1];
      TransformType transformType0 = TransformType.INVERSE;
      fastHadamardTransformer0.transform(doubleArray0, transformType0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1881;
      intArray0[1] = 4531;
      int int0 = 121;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      TransformType transformType1 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(univariateFunction0, (-315.9), 2113.228104173484, 4531, transformType1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4,531 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double double0 = (-353.0913762);
      double double1 = 0.0;
      int int0 = (-350);
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-350);
      doubleArray0[2] = 638.6;
      doubleArray0[3] = 1270.0;
      fastHadamardTransformer0.fht(doubleArray0);
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(univariateFunction1, 638.6, 0.0, (-1969), transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: -1,969
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[8];
      intArray0[0] = 1387;
      intArray0[1] = 2;
      intArray0[2] = 1308;
      intArray0[3] = (-1738);
      intArray0[4] = 0;
      intArray0[5] = (-844);
      intArray0[6] = (-1950);
      intArray0[7] = 339;
      fastHadamardTransformer0.transform(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 3037;
      intArray1[1] = 144;
      intArray1[2] = 158;
      try { 
        fastHadamardTransformer0.fht(intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform((UnivariateFunction) null, (-1.0), (-1.0), 837, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 is larger than, or equal to, the maximum (-1)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[2];
      intArray0[0] = (-408);
      intArray0[1] = 156;
      fastHadamardTransformer0.fht(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[3];
      intArray0[0] = 432;
      intArray0[1] = 0;
      intArray0[2] = 698;
      try { 
        fastHadamardTransformer0.fht(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      fastHadamardTransformer0.transform(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1706.57;
      doubleArray0[1] = (-1101.488);
      doubleArray0[2] = (-139.76587754);
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3156.10948510334);
      doubleArray0[6] = (-4469.94769902004);
      try { 
        fastHadamardTransformer0.fht(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 410.343;
      doubleArray0[2] = (-317.0981352);
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 334.1510742611361;
      doubleArray0[1] = 0.0;
      TransformType transformType0 = TransformType.INVERSE;
      fastHadamardTransformer0.transform(doubleArray0, transformType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.fht((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(univariateFunction0, (-1.0), (-1.0), (-1224), transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: -1,224
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      double[] doubleArray0 = new double[2];
      TransformType transformType0 = TransformType.INVERSE;
      fastHadamardTransformer0.transform(doubleArray0, transformType0);
      doubleArray0[1] = 0.0;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[9];
      intArray0[3] = (-1352);
      intArray0[5] = 129;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastHadamardTransformer fastHadamardTransformer0 = new FastHadamardTransformer();
      int[] intArray0 = new int[8];
      fastHadamardTransformer0.transform(intArray0);
      double[] doubleArray0 = new double[3];
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastHadamardTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 is not a power of 2
         //
         verifyException("org.apache.commons.math4.transform.FastHadamardTransformer", e);
      }
  }
}

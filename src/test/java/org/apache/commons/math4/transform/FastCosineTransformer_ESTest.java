/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:43:53 GMT 2019
 */

package org.apache.commons.math4.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.transform.DctNormalization;
import org.apache.commons.math4.transform.FastCosineTransformer;
import org.apache.commons.math4.transform.TransformType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FastCosineTransformer_ESTest extends FastCosineTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 793.151344;
      TransformType transformType0 = TransformType.INVERSE;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 793.151344}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {198.287836, (-198.287836), 198.287836, (-198.287836), 198.287836}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-4935.4805115);
      double[] doubleArray1 = fastCosineTransformer0.fct(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-4935.4805115)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2467.74025575), 2467.74025575}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[9];
      TransformType transformType0 = TransformType.INVERSE;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[2];
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      TransformType transformType0 = TransformType.INVERSE;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariateFunction0).value(anyDouble());
      double[] doubleArray0 = fastCosineTransformer0.transform(univariateFunction0, 0.0, 1529.02985950179, 2, transformType0);
      assertNotNull(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      TransformType transformType0 = TransformType.FORWARD;
      // Undeclared exception!
      try { 
        fastCosineTransformer0.transform((double[]) null, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType0 = TransformType.INVERSE;
      try { 
        fastCosineTransformer0.transform(univariateFunction0, 0.0, 4001.1055608805, (-1519), transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of sample is not positive: -1,519
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      TransformType transformType0 = TransformType.FORWARD;
      try { 
        fastCosineTransformer0.transform(univariateFunction0, 2829.46437, 2829.46437, 343, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2,829.464 is larger than, or equal to, the maximum (2,829.464)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      TransformType transformType0 = TransformType.INVERSE;
      // Undeclared exception!
      try { 
        fastCosineTransformer0.transform((UnivariateFunction) null, 0.0, 498.926649, 704, transformType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.analysis.FunctionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[6];
      try { 
        fastCosineTransformer0.fct(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      // Undeclared exception!
      try { 
        fastCosineTransformer0.fct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      assertNotNull(fastCosineTransformer0);
      
      double[] doubleArray0 = new double[6];
      TransformType transformType0 = TransformType.INVERSE;
      try { 
        fastCosineTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[5];
      TransformType transformType0 = TransformType.FORWARD;
      double[] doubleArray1 = fastCosineTransformer0.transform(doubleArray0, transformType0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.ORTHOGONAL_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      double[] doubleArray0 = new double[8];
      TransformType transformType0 = TransformType.FORWARD;
      try { 
        fastCosineTransformer0.transform(doubleArray0, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DctNormalization dctNormalization0 = DctNormalization.STANDARD_DCT_I;
      FastCosineTransformer fastCosineTransformer0 = new FastCosineTransformer(dctNormalization0);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1747), (double)(-1747), (-2.6033824355191673E-8), (-2.6033824355191673E-8), (double)(-1747)).when(univariateFunction0).value(anyDouble());
      TransformType transformType0 = TransformType.FORWARD;
      try { 
        fastCosineTransformer0.transform(univariateFunction0, (-1.0), 0.0, 259, transformType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 259 is not a power of 2 plus one
         //
         verifyException("org.apache.commons.math4.transform.FastCosineTransformer", e);
      }
  }
}

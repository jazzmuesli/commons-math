/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:25:48 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpDec;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEState;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldEquationsMapper_ESTest extends FieldEquationsMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[0];
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.extractEquationData(0, dfpArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[0];
      fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray0);
      assertEquals(0, dfpArray0.length);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Class<DfpDec> class0 = DfpDec.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(dfp0).when(fieldODEStateAndDerivative0).getTime();
      doReturn((RealFieldElement[]) null).when(fieldODEStateAndDerivative0).getDerivative();
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapDerivative(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      int int0 = 0;
      Dfp[] dfpArray0 = new Dfp[8];
      Class<Decimal10> class0 = Decimal10.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      Dfp[] dfpArray1 = new Dfp[1];
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      
      dfpArray1[0] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray1, dfpArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      int int0 = 0;
      Dfp[] dfpArray0 = new Dfp[8];
      Class<Dfp> class0 = Dfp.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0, (DfpField) null).when(dfp0).getField();
      dfpArray0[1] = dfpArray0[0];
      dfpArray0[2] = dfpArray0[1];
      dfpArray0[3] = dfpArray0[2];
      Dfp[] dfpArray1 = new Dfp[1];
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      
      dfpArray1[0] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfpArray0[1], dfpArray1, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[6];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      int int0 = fieldEquationsMapper0.getNumberOfEquations();
      assertEquals(1, int0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray1 = new Dfp[3];
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      try { 
        fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[8];
      Class<Dfp> class0 = Dfp.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      Dfp[] dfpArray1 = fieldEquationsMapper0.extractEquationData(0, dfpArray0);
      assertNotNull(dfpArray1);
      assertNotSame(dfpArray0, dfpArray1);
      assertNotSame(dfpArray1, dfpArray0);
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      assertEquals(8, dfpArray0.length);
      assertEquals(1, dfpArray1.length);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapDerivative(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[0];
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray0, dfpArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      int int0 = 0;
      Dfp[] dfpArray0 = new Dfp[8];
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(dfpField0).getRuntimeClass();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      Dfp[] dfpArray1 = new Dfp[1];
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      
      dfpArray1[0] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray1, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-646);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, (-646));
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals((-646), fieldEquationsMapper0.getTotalDimension());
      
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = new FieldEquationsMapper<Decimal64>(fieldEquationsMapper0, (-646));
      assertNotNull(fieldEquationsMapper1);
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals((-646), fieldEquationsMapper0.getTotalDimension());
      assertEquals(2, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals((-1292), fieldEquationsMapper1.getTotalDimension());
      
      Decimal64 decimal64_0 = new Decimal64((-1562.892));
      assertNotNull(decimal64_0);
      assertEquals((-1562.892), decimal64_0.getReal(), 0.01);
      assertEquals((byte) (-26), decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((short) (-1562), decimal64_0.shortValue());
      assertEquals((-1562.892F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1562.892), decimal64_0.doubleValue(), 0.01);
      assertEquals((-1562), decimal64_0.intValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("-1562.892", decimal64_0.toString());
      assertEquals((-1562L), decimal64_0.longValue());
      
      Decimal64[] decimal64Array0 = new Decimal64[3];
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64((-1562.892));
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals((-1562.892), decimal64_1.getReal(), 0.01);
      assertEquals((-1562L), decimal64_1.longValue());
      assertEquals((byte) (-26), decimal64_1.byteValue());
      assertEquals("-1562.892", decimal64_1.toString());
      assertEquals((short) (-1562), decimal64_1.shortValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-1562.892), decimal64_1.doubleValue(), 0.01);
      assertEquals((-1562.892F), decimal64_1.floatValue(), 0.01F);
      assertEquals((-1562), decimal64_1.intValue());
      assertFalse(decimal64_1.isInfinite());
      
      decimal64Array0[1] = decimal64_1;
      decimal64Array0[2] = decimal64_0;
      try { 
        fieldEquationsMapper1.insertEquationData(1, decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != -646
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 2430);
      assertNotNull(fieldEquationsMapper1);
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertEquals(2430, fieldEquationsMapper1.getTotalDimension());
      assertEquals(1, fieldEquationsMapper1.getNumberOfEquations());
      
      Decimal64 decimal64_0 = new Decimal64(0);
      assertNotNull(decimal64_0);
      assertEquals("0.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(0, decimal64_0.intValue());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0L, decimal64_0.longValue());
      
      Decimal64[] decimal64Array0 = new Decimal64[8];
      Decimal64 decimal64_1 = new Decimal64(0);
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals("0.0", decimal64_1.toString());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals((byte)0, decimal64_1.byteValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0, decimal64_1.intValue());
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals(0L, decimal64_1.longValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_1.shortValue());
      
      decimal64Array0[0] = decimal64_1;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      Decimal64 decimal64_2 = new Decimal64(1.0);
      assertNotNull(decimal64_2);
      assertFalse(decimal64_2.equals((Object)decimal64_0));
      assertFalse(decimal64_2.equals((Object)decimal64_1));
      assertEquals((short)1, decimal64_2.shortValue());
      assertEquals(1.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals(1.0, decimal64_2.doubleValue(), 0.01);
      assertFalse(decimal64_2.isInfinite());
      assertEquals("1.0", decimal64_2.toString());
      assertEquals(1.0, decimal64_2.getReal(), 0.01);
      assertEquals(1, decimal64_2.intValue());
      assertFalse(decimal64_2.isNaN());
      assertEquals(1L, decimal64_2.longValue());
      assertEquals((byte)1, decimal64_2.byteValue());
      
      decimal64Array0[4] = decimal64_2;
      decimal64Array0[5] = decimal64_0;
      Decimal64 decimal64_3 = new Decimal64(3160.691398625);
      assertNotNull(decimal64_3);
      assertFalse(decimal64_3.equals((Object)decimal64_0));
      assertFalse(decimal64_3.equals((Object)decimal64_1));
      assertFalse(decimal64_3.equals((Object)decimal64_2));
      assertEquals(3160.691398625, decimal64_3.getReal(), 0.01);
      assertEquals(3160, decimal64_3.intValue());
      assertFalse(decimal64_3.isInfinite());
      assertEquals(3160L, decimal64_3.longValue());
      assertFalse(decimal64_3.isNaN());
      assertEquals((byte)88, decimal64_3.byteValue());
      assertEquals(3160.691398625, decimal64_3.doubleValue(), 0.01);
      assertEquals((short)3160, decimal64_3.shortValue());
      assertEquals("3160.691398625", decimal64_3.toString());
      assertEquals(3160.6914F, decimal64_3.floatValue(), 0.01F);
      
      decimal64Array0[6] = decimal64_3;
      decimal64Array0[7] = decimal64_0;
      Decimal64[] decimal64Array1 = fieldEquationsMapper0.extractEquationData(0, decimal64Array0);
      assertNotNull(decimal64Array1);
      assertNotSame(fieldEquationsMapper0, fieldEquationsMapper1);
      assertNotSame(decimal64Array0, decimal64Array1);
      assertNotSame(decimal64Array1, decimal64Array0);
      assertFalse(fieldEquationsMapper0.equals((Object)fieldEquationsMapper1));
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      assertEquals(8, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Decimal64[] decimal64Array2 = new Decimal64[6];
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      assertFalse(decimal64Array2.equals((Object)decimal64Array1));
      
      decimal64Array2[0] = decimal64_0;
      decimal64Array2[1] = decimal64_0;
      decimal64Array2[2] = decimal64_0;
      decimal64Array2[3] = decimal64_0;
      decimal64Array2[4] = decimal64_0;
      decimal64Array2[5] = decimal64_0;
      try { 
        fieldEquationsMapper1.mapStateAndDerivative(decimal64_0, decimal64Array2, decimal64Array2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 2,430
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[6];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      try { 
        fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 2);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(2, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      int int0 = fieldEquationsMapper0.getTotalDimension();
      assertEquals(2, int0);
      assertEquals(2, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[2];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      Dfp[] dfpArray1 = new Dfp[1];
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      
      dfpArray1[0] = dfp0;
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray0, dfpArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 2463);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(2463, fieldEquationsMapper0.getTotalDimension());
      
      int int0 = fieldEquationsMapper0.getTotalDimension();
      assertEquals(2463, int0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(2463, fieldEquationsMapper0.getTotalDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 460);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(460, fieldEquationsMapper0.getTotalDimension());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[1];
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp1;
      try { 
        fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 460
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 281);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(281, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = new FieldEquationsMapper<Dfp>(fieldEquationsMapper0, 281);
      assertNotNull(fieldEquationsMapper1);
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertEquals(281, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(2, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals(562, fieldEquationsMapper1.getTotalDimension());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[2];
      FieldEquationsMapper<Dfp> fieldEquationsMapper2 = new FieldEquationsMapper<Dfp>(fieldEquationsMapper1, 3);
      assertNotNull(fieldEquationsMapper2);
      assertFalse(fieldEquationsMapper0.equals((Object)fieldEquationsMapper1));
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertFalse(fieldEquationsMapper2.equals((Object)fieldEquationsMapper0));
      assertFalse(fieldEquationsMapper2.equals((Object)fieldEquationsMapper1));
      assertEquals(281, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(2, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals(562, fieldEquationsMapper1.getTotalDimension());
      assertEquals(3, fieldEquationsMapper2.getNumberOfEquations());
      assertEquals(565, fieldEquationsMapper2.getTotalDimension());
      
      // Undeclared exception!
      try { 
        fieldEquationsMapper2.insertEquationData(10000, dfpArray0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument 10,000 outside domain [0 ; 2]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2215;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 2215);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(2215, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp[] dfpArray0 = null;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.insertEquationData(0, (Dfp[]) null, (Dfp[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2166;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 2166);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(2166, fieldEquationsMapper0.getTotalDimension());
      
      Decimal64[] decimal64Array0 = new Decimal64[4];
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertNotNull(decimal64_0);
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.0);
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals(0L, decimal64_1.longValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertFalse(decimal64_1.isInfinite());
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals("0.0", decimal64_1.toString());
      assertEquals(0, decimal64_1.intValue());
      
      decimal64Array0[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(0);
      assertNotNull(decimal64_2);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertTrue(decimal64_2.equals((Object)decimal64_0));
      assertFalse(decimal64_2.isInfinite());
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals((byte)0, decimal64_2.byteValue());
      assertEquals(0L, decimal64_2.longValue());
      assertFalse(decimal64_2.isNaN());
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
      assertEquals(0, decimal64_2.intValue());
      assertEquals((short)0, decimal64_2.shortValue());
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_2.toString());
      
      decimal64Array0[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(0.0);
      assertNotNull(decimal64_3);
      assertTrue(decimal64_3.equals((Object)decimal64_2));
      assertTrue(decimal64_3.equals((Object)decimal64_1));
      assertTrue(decimal64_3.equals((Object)decimal64_0));
      assertEquals(0.0, decimal64_3.getReal(), 0.01);
      assertFalse(decimal64_3.isNaN());
      assertEquals(0, decimal64_3.intValue());
      assertEquals((byte)0, decimal64_3.byteValue());
      assertEquals(0L, decimal64_3.longValue());
      assertEquals(0.0F, decimal64_3.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_3.doubleValue(), 0.01);
      assertEquals((short)0, decimal64_3.shortValue());
      assertFalse(decimal64_3.isInfinite());
      assertEquals("0.0", decimal64_3.toString());
      
      decimal64Array0[3] = decimal64_3;
      try { 
        fieldEquationsMapper0.extractEquationData(0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 2,166
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 308);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(308, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp[] dfpArray0 = new Dfp[8];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      try { 
        fieldEquationsMapper0.extractEquationData(0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 308
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      int int0 = fieldEquationsMapper0.getTotalDimension();
      assertEquals(0, int0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 0);
      assertNotNull(fieldEquationsMapper1);
      assertEquals(1, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper1.getTotalDimension());
      
      Decimal64 decimal64_0 = new Decimal64(0);
      assertNotNull(decimal64_0);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      
      Decimal64[] decimal64Array0 = new Decimal64[8];
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0);
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals(0, decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals(0L, decimal64_1.longValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals("0.0", decimal64_1.toString());
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      
      decimal64Array0[1] = decimal64_1;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      try { 
        fieldEquationsMapper1.mapStateAndDerivative(decimal64_0, decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, (-1775));
      assertNotNull(fieldEquationsMapper0);
      assertEquals((-1775), fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      int int0 = fieldEquationsMapper0.getTotalDimension();
      assertEquals((-1775), int0);
      assertEquals((-1775), fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp[] dfpArray0 = new Dfp[8];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.extractEquationData(0, dfpArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Decimal64[] decimal64Array0 = new Decimal64[6];
      Decimal64 decimal64_0 = new Decimal64(0);
      assertNotNull(decimal64_0);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals((short)0, decimal64_0.shortValue());
      
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.0);
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals(0, decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertFalse(decimal64_1.isInfinite());
      assertEquals(0L, decimal64_1.longValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals("0.0", decimal64_1.toString());
      
      decimal64Array0[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(0);
      assertNotNull(decimal64_2);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertTrue(decimal64_2.equals((Object)decimal64_0));
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_2.shortValue());
      assertEquals(0L, decimal64_2.longValue());
      assertFalse(decimal64_2.isNaN());
      assertEquals((byte)0, decimal64_2.byteValue());
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals(0, decimal64_2.intValue());
      assertEquals("0.0", decimal64_2.toString());
      assertFalse(decimal64_2.isInfinite());
      
      decimal64Array0[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(0.0);
      assertNotNull(decimal64_3);
      assertTrue(decimal64_3.equals((Object)decimal64_1));
      assertTrue(decimal64_3.equals((Object)decimal64_2));
      assertTrue(decimal64_3.equals((Object)decimal64_0));
      assertEquals(0.0F, decimal64_3.floatValue(), 0.01F);
      assertEquals((byte)0, decimal64_3.byteValue());
      assertFalse(decimal64_3.isInfinite());
      assertEquals((short)0, decimal64_3.shortValue());
      assertEquals(0, decimal64_3.intValue());
      assertEquals(0.0, decimal64_3.getReal(), 0.01);
      assertEquals(0L, decimal64_3.longValue());
      assertEquals("0.0", decimal64_3.toString());
      assertFalse(decimal64_3.isNaN());
      assertEquals(0.0, decimal64_3.doubleValue(), 0.01);
      
      decimal64Array0[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(0.0);
      assertNotNull(decimal64_4);
      assertTrue(decimal64_4.equals((Object)decimal64_0));
      assertTrue(decimal64_4.equals((Object)decimal64_2));
      assertTrue(decimal64_4.equals((Object)decimal64_3));
      assertTrue(decimal64_4.equals((Object)decimal64_1));
      assertFalse(decimal64_4.isNaN());
      assertEquals(0, decimal64_4.intValue());
      assertEquals("0.0", decimal64_4.toString());
      assertEquals((byte)0, decimal64_4.byteValue());
      assertFalse(decimal64_4.isInfinite());
      assertEquals(0.0F, decimal64_4.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_4.shortValue());
      assertEquals(0.0, decimal64_4.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_4.getReal(), 0.01);
      assertEquals(0L, decimal64_4.longValue());
      
      decimal64Array0[4] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64((-3218.35430504184));
      assertNotNull(decimal64_5);
      assertFalse(decimal64_5.equals((Object)decimal64_3));
      assertFalse(decimal64_5.equals((Object)decimal64_1));
      assertFalse(decimal64_5.equals((Object)decimal64_2));
      assertFalse(decimal64_5.equals((Object)decimal64_0));
      assertFalse(decimal64_5.equals((Object)decimal64_4));
      assertEquals((-3218.35430504184), decimal64_5.doubleValue(), 0.01);
      assertEquals("-3218.35430504184", decimal64_5.toString());
      assertEquals((-3218.3542F), decimal64_5.floatValue(), 0.01F);
      assertFalse(decimal64_5.isInfinite());
      assertEquals((-3218), decimal64_5.intValue());
      assertFalse(decimal64_5.isNaN());
      assertEquals((byte)110, decimal64_5.byteValue());
      assertEquals((-3218L), decimal64_5.longValue());
      assertEquals((-3218.35430504184), decimal64_5.getReal(), 0.01);
      assertEquals((short) (-3218), decimal64_5.shortValue());
      
      decimal64Array0[5] = decimal64_5;
      try { 
        fieldEquationsMapper0.insertEquationData(0, decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 3);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(3, fieldEquationsMapper0.getTotalDimension());
      
      Decimal64[] decimal64Array0 = new Decimal64[1];
      Decimal64 decimal64_0 = new Decimal64(3);
      assertNotNull(decimal64_0);
      assertEquals(3.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)3, decimal64_0.byteValue());
      assertEquals("3.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(3.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(3.0, decimal64_0.getReal(), 0.01);
      assertEquals(3L, decimal64_0.longValue());
      assertEquals(3, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)3, decimal64_0.shortValue());
      
      Decimal64[] decimal64Array1 = new Decimal64[6];
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      
      decimal64Array1[0] = decimal64_0;
      decimal64Array1[1] = decimal64_0;
      decimal64Array1[2] = decimal64_0;
      decimal64Array1[3] = decimal64_0;
      decimal64Array1[4] = decimal64_0;
      decimal64Array1[5] = decimal64_0;
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(decimal64_0, decimal64Array0, decimal64Array1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, (-3001));
      assertNotNull(fieldEquationsMapper0);
      assertEquals((-3001), fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Decimal64 decimal64_0 = new Decimal64((-3001));
      assertNotNull(decimal64_0);
      assertEquals((-3001.0), decimal64_0.getReal(), 0.01);
      assertEquals((-3001), decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("-3001.0", decimal64_0.toString());
      assertEquals((-3001.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-3001.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-3001L), decimal64_0.longValue());
      assertEquals((short) (-3001), decimal64_0.shortValue());
      assertEquals((byte)71, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      
      Decimal64[] decimal64Array0 = new Decimal64[7];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64((-1648.76936));
      assertNotNull(decimal64_1);
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertEquals((byte) (-112), decimal64_1.byteValue());
      assertEquals((-1648.7694F), decimal64_1.floatValue(), 0.01F);
      assertEquals((-1648), decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-1648.76936), decimal64_1.getReal(), 0.01);
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short) (-1648), decimal64_1.shortValue());
      assertEquals((-1648L), decimal64_1.longValue());
      assertEquals((-1648.76936), decimal64_1.doubleValue(), 0.01);
      assertEquals("-1648.76936", decimal64_1.toString());
      
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.extractEquationData(0, decimal64Array0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Decimal64[] decimal64Array0 = new Decimal64[8];
      Decimal64 decimal64_0 = new Decimal64(458);
      assertNotNull(decimal64_0);
      assertEquals(458.0, decimal64_0.doubleValue(), 0.01);
      assertEquals("458.0", decimal64_0.toString());
      assertEquals(458, decimal64_0.intValue());
      assertEquals((short)458, decimal64_0.shortValue());
      assertEquals((byte) (-54), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(458L, decimal64_0.longValue());
      assertEquals(458.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(458.0F, decimal64_0.floatValue(), 0.01F);
      
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.0);
      assertNotNull(decimal64_1);
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals(0L, decimal64_1.longValue());
      assertEquals((byte)0, decimal64_1.byteValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0, decimal64_1.intValue());
      assertEquals("0.0", decimal64_1.toString());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_1.shortValue());
      
      decimal64Array0[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(0);
      assertNotNull(decimal64_2);
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertFalse(decimal64_2.equals((Object)decimal64_0));
      assertEquals(0L, decimal64_2.longValue());
      assertFalse(decimal64_2.isNaN());
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
      assertEquals(0, decimal64_2.intValue());
      assertEquals("0.0", decimal64_2.toString());
      assertEquals((byte)0, decimal64_2.byteValue());
      assertFalse(decimal64_2.isInfinite());
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals((short)0, decimal64_2.shortValue());
      
      decimal64Array0[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(0);
      assertNotNull(decimal64_3);
      assertTrue(decimal64_3.equals((Object)decimal64_1));
      assertFalse(decimal64_3.equals((Object)decimal64_0));
      assertTrue(decimal64_3.equals((Object)decimal64_2));
      assertEquals(0.0F, decimal64_3.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_3.doubleValue(), 0.01);
      assertEquals((byte)0, decimal64_3.byteValue());
      assertFalse(decimal64_3.isNaN());
      assertEquals(0, decimal64_3.intValue());
      assertEquals(0.0, decimal64_3.getReal(), 0.01);
      assertEquals("0.0", decimal64_3.toString());
      assertEquals(0L, decimal64_3.longValue());
      assertFalse(decimal64_3.isInfinite());
      assertEquals((short)0, decimal64_3.shortValue());
      
      decimal64Array0[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(458);
      assertNotNull(decimal64_4);
      assertFalse(decimal64_4.equals((Object)decimal64_3));
      assertFalse(decimal64_4.equals((Object)decimal64_2));
      assertTrue(decimal64_4.equals((Object)decimal64_0));
      assertFalse(decimal64_4.equals((Object)decimal64_1));
      assertEquals((short)458, decimal64_4.shortValue());
      assertFalse(decimal64_4.isNaN());
      assertEquals("458.0", decimal64_4.toString());
      assertEquals((byte) (-54), decimal64_4.byteValue());
      assertEquals(458.0, decimal64_4.doubleValue(), 0.01);
      assertEquals(458, decimal64_4.intValue());
      assertEquals(458.0F, decimal64_4.floatValue(), 0.01F);
      assertEquals(458.0, decimal64_4.getReal(), 0.01);
      assertFalse(decimal64_4.isInfinite());
      assertEquals(458L, decimal64_4.longValue());
      
      decimal64Array0[4] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64((-442.9559458));
      assertNotNull(decimal64_5);
      assertFalse(decimal64_5.equals((Object)decimal64_0));
      assertFalse(decimal64_5.equals((Object)decimal64_2));
      assertFalse(decimal64_5.equals((Object)decimal64_3));
      assertFalse(decimal64_5.equals((Object)decimal64_4));
      assertFalse(decimal64_5.equals((Object)decimal64_1));
      assertFalse(decimal64_5.isNaN());
      assertEquals((byte)70, decimal64_5.byteValue());
      assertEquals((-442.9559458), decimal64_5.doubleValue(), 0.01);
      assertEquals("-442.9559458", decimal64_5.toString());
      assertEquals((short) (-442), decimal64_5.shortValue());
      assertEquals((-442.9559458), decimal64_5.getReal(), 0.01);
      assertEquals((-442.95593F), decimal64_5.floatValue(), 0.01F);
      assertEquals((-442), decimal64_5.intValue());
      assertFalse(decimal64_5.isInfinite());
      assertEquals((-442L), decimal64_5.longValue());
      
      decimal64Array0[5] = decimal64_5;
      Decimal64 decimal64_6 = new Decimal64(1315.0);
      assertNotNull(decimal64_6);
      assertFalse(decimal64_6.equals((Object)decimal64_1));
      assertFalse(decimal64_6.equals((Object)decimal64_3));
      assertFalse(decimal64_6.equals((Object)decimal64_5));
      assertFalse(decimal64_6.equals((Object)decimal64_4));
      assertFalse(decimal64_6.equals((Object)decimal64_2));
      assertFalse(decimal64_6.equals((Object)decimal64_0));
      assertEquals((byte)35, decimal64_6.byteValue());
      assertEquals(1315.0F, decimal64_6.floatValue(), 0.01F);
      assertFalse(decimal64_6.isInfinite());
      assertEquals("1315.0", decimal64_6.toString());
      assertEquals((short)1315, decimal64_6.shortValue());
      assertEquals(1315L, decimal64_6.longValue());
      assertFalse(decimal64_6.isNaN());
      assertEquals(1315.0, decimal64_6.getReal(), 0.01);
      assertEquals(1315, decimal64_6.intValue());
      assertEquals(1315.0, decimal64_6.doubleValue(), 0.01);
      
      decimal64Array0[6] = decimal64_6;
      Decimal64 decimal64_7 = new Decimal64(1315.0);
      assertNotNull(decimal64_7);
      assertFalse(decimal64_7.equals((Object)decimal64_4));
      assertFalse(decimal64_7.equals((Object)decimal64_2));
      assertTrue(decimal64_7.equals((Object)decimal64_6));
      assertFalse(decimal64_7.equals((Object)decimal64_0));
      assertFalse(decimal64_7.equals((Object)decimal64_3));
      assertFalse(decimal64_7.equals((Object)decimal64_5));
      assertFalse(decimal64_7.equals((Object)decimal64_1));
      assertEquals((short)1315, decimal64_7.shortValue());
      assertEquals(1315.0, decimal64_7.getReal(), 0.01);
      assertEquals(1315, decimal64_7.intValue());
      assertEquals((byte)35, decimal64_7.byteValue());
      assertEquals(1315.0, decimal64_7.doubleValue(), 0.01);
      assertFalse(decimal64_7.isNaN());
      assertEquals(1315L, decimal64_7.longValue());
      assertEquals(1315.0F, decimal64_7.floatValue(), 0.01F);
      assertEquals("1315.0", decimal64_7.toString());
      assertFalse(decimal64_7.isInfinite());
      
      decimal64Array0[7] = decimal64_7;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.insertEquationData(458, decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument 458 outside domain [0 ; 0]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 339);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(339, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      try { 
        fieldEquationsMapper0.extractEquationData(339, (Decimal64[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument 339 outside domain [0 ; 0]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      int int0 = fieldEquationsMapper0.getNumberOfEquations();
      assertEquals(1, int0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      try { 
        fieldEquationsMapper0.extractEquationData((-3369), (Dfp[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument -3,369 outside domain [0 ; 0]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      int int0 = 1791;
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = new FieldEquationsMapper<Dfp>(fieldEquationsMapper0, 1791);
      assertNotNull(fieldEquationsMapper1);
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1791, fieldEquationsMapper1.getTotalDimension());
      assertEquals(2, fieldEquationsMapper1.getNumberOfEquations());
      
      Dfp[] dfpArray0 = new Dfp[4];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      // Undeclared exception!
      try { 
        fieldEquationsMapper1.mapDerivative(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 3);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(3, fieldEquationsMapper0.getTotalDimension());
      
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapDerivative(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-5413);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, (-5413));
      assertNotNull(fieldEquationsMapper0);
      assertEquals((-5413), fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Decimal64 decimal64_0 = new Decimal64((-5413));
      assertNotNull(decimal64_0);
      assertEquals((-5413.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals("-5413.0", decimal64_0.toString());
      assertEquals((-5413), decimal64_0.intValue());
      assertEquals((-5413L), decimal64_0.longValue());
      assertEquals((-5413.0), decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-5413.0), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-5413), decimal64_0.shortValue());
      assertEquals((byte) (-37), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      
      Decimal64[] decimal64Array0 = null;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(decimal64_0, (Decimal64[]) null, (Decimal64[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[2];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 758);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(758, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapState((FieldODEState<Dfp>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = null;
      int int0 = (-1932);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, (-1932));
      assertNotNull(fieldEquationsMapper1);
      assertEquals(1, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals((-1932), fieldEquationsMapper1.getTotalDimension());
      
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = new FieldEquationsMapper<Decimal64>(fieldEquationsMapper1, (-1932));
      assertNotNull(fieldEquationsMapper2);
      assertFalse(fieldEquationsMapper2.equals((Object)fieldEquationsMapper1));
      assertEquals(1, fieldEquationsMapper1.getNumberOfEquations());
      assertEquals((-1932), fieldEquationsMapper1.getTotalDimension());
      assertEquals((-3864), fieldEquationsMapper2.getTotalDimension());
      assertEquals(2, fieldEquationsMapper2.getNumberOfEquations());
      
      Decimal64 decimal64_0 = new Decimal64(Double.NEGATIVE_INFINITY);
      assertNotNull(decimal64_0);
      assertFalse(decimal64_0.isNaN());
      assertEquals(Integer.MIN_VALUE, decimal64_0.intValue());
      assertEquals((-9223372036854775808L), decimal64_0.longValue());
      assertTrue(decimal64_0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_0.doubleValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, decimal64_0.getReal(), 0.01);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals("-Infinity", decimal64_0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, decimal64_0.floatValue(), 0.01F);
      
      Decimal64[] decimal64Array0 = new Decimal64[6];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper2.insertEquationData((-1932), decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument -1,932 outside domain [0 ; 1]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      int int0 = 0;
      Dfp[] dfpArray0 = new Dfp[8];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.extractEquationData(0, dfpArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Decimal64 decimal64_0 = new Decimal64(0);
      assertNotNull(decimal64_0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.0);
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertFalse(decimal64_1.isInfinite());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals(0L, decimal64_1.longValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(0, decimal64_1.intValue());
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_1.toString());
      
      decimal64Array0[1] = decimal64_1;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      Decimal64[] decimal64Array1 = fieldEquationsMapper0.extractEquationData(0, decimal64Array0);
      assertNotNull(decimal64Array1);
      assertNotSame(decimal64Array0, decimal64Array1);
      assertNotSame(decimal64Array1, decimal64Array0);
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      assertEquals(9, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      decimal64Array0[5] = decimal64_0;
      Decimal64[] decimal64Array2 = new Decimal64[9];
      assertFalse(decimal64Array2.equals((Object)decimal64Array1));
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      
      decimal64Array2[0] = decimal64_0;
      decimal64Array2[1] = decimal64_1;
      decimal64Array2[2] = decimal64_1;
      decimal64Array2[3] = decimal64_1;
      decimal64Array2[4] = decimal64_0;
      decimal64Array2[5] = decimal64_0;
      decimal64Array2[6] = decimal64_0;
      decimal64Array2[7] = decimal64_1;
      decimal64Array2[8] = decimal64_1;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.insertEquationData(1530, decimal64Array2, decimal64Array2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument 1,530 outside domain [0 ; 0]
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = new FieldEquationsMapper<Decimal64>((FieldEquationsMapper<Decimal64>) null, 321);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(321, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = new FieldEquationsMapper<Decimal64>(fieldEquationsMapper0, 321);
      assertNotNull(fieldEquationsMapper1);
      assertFalse(fieldEquationsMapper1.equals((Object)fieldEquationsMapper0));
      assertEquals(321, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(642, fieldEquationsMapper1.getTotalDimension());
      assertEquals(2, fieldEquationsMapper1.getNumberOfEquations());
      
      Decimal64 decimal64_0 = new Decimal64((-1226.0));
      assertNotNull(decimal64_0);
      assertEquals((byte)54, decimal64_0.byteValue());
      assertEquals("-1226.0", decimal64_0.toString());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1226.0), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-1226), decimal64_0.shortValue());
      assertEquals((-1226.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-1226), decimal64_0.intValue());
      assertEquals((-1226.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1226L), decimal64_0.longValue());
      assertFalse(decimal64_0.isInfinite());
      
      Decimal64[] decimal64Array0 = new Decimal64[5];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      try { 
        fieldEquationsMapper1.mapStateAndDerivative(decimal64_0, decimal64Array0, decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 642
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp[] dfpArray0 = new Dfp[0];
      fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray0);
      assertEquals(0, dfpArray0.length);
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(dfp0).when(fieldODEStateAndDerivative0).getTime();
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapDerivative(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 0);
      assertNotNull(fieldEquationsMapper0);
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      
      Dfp[] dfpArray0 = new Dfp[2];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      try { 
        fieldEquationsMapper0.insertEquationData(0, dfpArray0, dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = new FieldEquationsMapper<Dfp>((FieldEquationsMapper<Dfp>) null, 1);
      Dfp[] dfpArray0 = new Dfp[8];
      Class<Dfp> class0 = Dfp.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0, (DfpField) null).when(dfp0).getField();
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[3] = dfpArray0[2];
      Dfp[] dfpArray1 = new Dfp[1];
      dfpArray1[0] = dfp0;
      // Undeclared exception!
      try { 
        fieldEquationsMapper0.mapStateAndDerivative(dfp0, dfpArray1, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }
}

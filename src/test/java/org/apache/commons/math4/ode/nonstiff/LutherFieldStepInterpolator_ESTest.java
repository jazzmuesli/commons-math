/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:59:33 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.LutherFieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LutherFieldStepInterpolator_ESTest extends LutherFieldStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_0 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field0).getZero();
      Decimal64 decimal64_1 = new Decimal64((-4462.47465));
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field1).getRuntimeClass();
      doReturn(decimal64_0, decimal64_1).when(field1).getZero();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldODEStateAndDerivative1).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper3 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field1, true, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper2);
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator1 = lutherFieldStepInterpolator0.create(field0, false, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper3);
      Decimal64 decimal64_2 = new Decimal64((-50.666666666666664));
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator1.computeInterpolatedStateAndDerivatives(fieldEquationsMapper0, decimal64_0, decimal64_2, decimal64_1, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, (Object) null, (Object) null).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      decimal64Array2[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array2).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator1 = lutherFieldStepInterpolator0.create(field2, true, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_1 = new Decimal64(15.0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative2 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper3 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(true, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldEquationsMapper3);
      lutherFieldStepInterpolator0.getGlobalCurrentState();
      lutherFieldStepInterpolator1.getGlobalCurrentState();
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator1.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_1, decimal64_0, decimal64_0, decimal64_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, (Object) null).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array1).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_1, decimal64_1).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, true, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_2 = new Decimal64(15.0);
      lutherFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_1, decimal64_2, decimal64_0, decimal64_2);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative2 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper3 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.create(field1, true, decimal64Array0, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldEquationsMapper3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_1, decimal64_1).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, true, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_2 = new Decimal64(15.0);
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_1, decimal64_2, decimal64_0, decimal64_2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, (Object) null).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[0] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Class<Decimal64> class1 = Decimal64.class;
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field2).getRuntimeClass();
      doReturn(decimal64_0, decimal64_1).when(field2).getZero();
      lutherFieldStepInterpolator0.derivativeLinearCombination(decimal64Array2);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, false, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_0, decimal64_1, decimal64_1, decimal64_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_1, decimal64_1).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, true, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative2 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.create(field1, true, decimal64Array0, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldEquationsMapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      Decimal64 decimal64_2 = new Decimal64((-4462.47465));
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_1, decimal64_2).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, false, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative2 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.create(field1, true, decimal64Array0, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldEquationsMapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field2).getRuntimeClass();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.create(field2, false, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_0 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = null;
      try {
        lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.LutherFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][3];
      Dfp[] dfpArray1 = new Dfp[4];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[0];
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[4];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray3[2] = dfp0;
      dfpArray3[3] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[0];
      dfpArray0[3] = dfpArray4;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = null;
      LutherFieldStepInterpolator<Dfp> lutherFieldStepInterpolator0 = null;
      try {
        lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldEquationsMapper<Dfp>) null);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      boolean boolean0 = false;
      Dfp[][] dfpArray0 = new Dfp[1][2];
      Dfp[] dfpArray1 = new Dfp[6];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray1[5] = dfp0;
      dfpArray0[0] = dfpArray1;
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Dfp> lutherFieldStepInterpolator0 = null;
      try {
        lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      decimal64Array2[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array2).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field2).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0).when(field2).getZero();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator1 = lutherFieldStepInterpolator0.create(field2, true, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_1 = new Decimal64(15.0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative2 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper3 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(true, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative2, fieldODEStateAndDerivative2, fieldEquationsMapper3);
      lutherFieldStepInterpolator0.getGlobalCurrentState();
      lutherFieldStepInterpolator1.getGlobalCurrentState();
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator1.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_1, decimal64_0, decimal64_0, decimal64_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-50.666666666666664));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[2][8];
      Decimal64[] decimal64Array1 = new Decimal64[0];
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      Decimal64 decimal64_1 = new Decimal64(768.2470407);
      decimal64Array2[0] = decimal64_1;
      decimal64Array0[0] = decimal64Array2;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array2).when(fieldODEStateAndDerivative0).getState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Class<Decimal64> class1 = Decimal64.class;
      Field<Decimal64> field2 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(field2).getRuntimeClass();
      doReturn(decimal64_0, decimal64_1).when(field2).getZero();
      lutherFieldStepInterpolator0.derivativeLinearCombination(decimal64Array2);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = lutherFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      lutherFieldStepInterpolator0.create(field2, false, decimal64Array0, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldODEStateAndDerivative1, fieldEquationsMapper1);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        lutherFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper2, decimal64_0, decimal64_1, decimal64_1, decimal64Array2[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.Decimal64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Decimal64[][] decimal64Array0 = new Decimal64[8][2];
      Decimal64[] decimal64Array1 = new Decimal64[5];
      Decimal64 decimal64_0 = new Decimal64(0.9315965175628662);
      decimal64Array1[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.9315965175628662);
      decimal64Array1[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(1.986821492305628E-8);
      decimal64Array1[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(1868.46);
      decimal64Array1[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(922.434420962246);
      decimal64Array1[4] = decimal64_4;
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[1];
      decimal64Array2[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      Decimal64[] decimal64Array3 = new Decimal64[1];
      decimal64Array3[0] = decimal64_1;
      decimal64Array0[2] = decimal64Array3;
      Decimal64[] decimal64Array4 = new Decimal64[2];
      decimal64Array4[0] = decimal64_3;
      decimal64Array4[1] = decimal64_1;
      decimal64Array0[3] = decimal64Array4;
      Decimal64[] decimal64Array5 = new Decimal64[2];
      Decimal64 decimal64_5 = new Decimal64(15.0);
      decimal64Array5[0] = decimal64_5;
      decimal64Array5[1] = decimal64_2;
      decimal64Array0[4] = decimal64Array5;
      Decimal64[] decimal64Array6 = new Decimal64[5];
      decimal64Array6[0] = decimal64_0;
      decimal64Array6[1] = decimal64_1;
      decimal64Array6[2] = decimal64_5;
      decimal64Array6[3] = decimal64_1;
      decimal64Array6[4] = decimal64_1;
      decimal64Array0[5] = decimal64Array6;
      Decimal64[] decimal64Array7 = new Decimal64[3];
      decimal64Array7[0] = decimal64_3;
      decimal64Array7[1] = decimal64_0;
      decimal64Array7[2] = decimal64_5;
      decimal64Array0[6] = decimal64Array7;
      Decimal64[] decimal64Array8 = new Decimal64[7];
      decimal64Array8[0] = decimal64_2;
      decimal64Array8[1] = decimal64_0;
      decimal64Array8[2] = decimal64_3;
      decimal64Array8[3] = decimal64_1;
      decimal64Array8[4] = decimal64_3;
      decimal64Array8[5] = decimal64_2;
      decimal64Array8[6] = decimal64_0;
      decimal64Array0[7] = decimal64Array8;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      LutherFieldStepInterpolator<Decimal64> lutherFieldStepInterpolator0 = null;
      try {
        lutherFieldStepInterpolator0 = new LutherFieldStepInterpolator<Decimal64>(field0, true, decimal64Array0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldODEStateAndDerivative0, fieldEquationsMapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:14:12 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldExpandableODE;
import org.apache.commons.math4.ode.FieldSecondaryEquations;
import org.apache.commons.math4.ode.FirstOrderFieldDifferentialEquations;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldExpandableODE_ESTest extends FieldExpandableODE_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Decimal64 decimal64_0 = new Decimal64(1.0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals("1.0", decimal64_0.toString());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[4];
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(1.0);
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short)1, decimal64_1.shortValue());
      assertEquals(1.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals("1.0", decimal64_1.toString());
      assertEquals(1L, decimal64_1.longValue());
      assertEquals(1, decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
      assertEquals(1.0, decimal64_1.getReal(), 0.01);
      assertEquals((byte)1, decimal64_1.byteValue());
      assertNotNull(decimal64_1);
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      
      fieldExpandableODE0.init(decimal64_1, decimal64Array0, decimal64_0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_1.isInfinite());
      assertEquals((short)1, decimal64_1.shortValue());
      assertEquals(1.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals("1.0", decimal64_1.toString());
      assertEquals(1L, decimal64_1.longValue());
      assertEquals(1, decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals(1.0, decimal64_1.doubleValue(), 0.01);
      assertEquals(1.0, decimal64_1.getReal(), 0.01);
      assertEquals((byte)1, decimal64_1.byteValue());
      assertNotSame(decimal64_0, decimal64_1);
      assertNotSame(decimal64_1, decimal64_0);
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertEquals(4, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(307).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = fieldExpandableODE0.getMapper();
      assertEquals(307, fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertNotNull(fieldEquationsMapper0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((-22)).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = fieldExpandableODE0.getMapper();
      assertEquals((-22), fieldEquationsMapper0.getTotalDimension());
      assertEquals(1, fieldEquationsMapper0.getNumberOfEquations());
      assertNotNull(fieldEquationsMapper0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[0];
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array0).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      assertEquals(0, decimal64Array0.length);
      
      Decimal64 decimal64_0 = new Decimal64(Double.POSITIVE_INFINITY);
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertTrue(decimal64_0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertEquals(Float.POSITIVE_INFINITY, decimal64_0.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, decimal64_0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(Integer.MAX_VALUE, decimal64_0.intValue());
      assertEquals("Infinity", decimal64_0.toString());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array1 = new Decimal64[3];
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      
      decimal64Array1[0] = decimal64_0;
      Decimal64[] decimal64Array2 = fieldExpandableODE0.computeDerivatives(decimal64_0, decimal64Array1);
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertTrue(decimal64_0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertEquals(Float.POSITIVE_INFINITY, decimal64_0.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, decimal64_0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(Integer.MAX_VALUE, decimal64_0.intValue());
      assertEquals("Infinity", decimal64_0.toString());
      assertNotNull(decimal64Array2);
      assertNotSame(decimal64Array0, decimal64Array1);
      assertNotSame(decimal64Array0, decimal64Array2);
      assertNotSame(decimal64Array1, decimal64Array2);
      assertNotSame(decimal64Array1, decimal64Array0);
      assertNotSame(decimal64Array2, decimal64Array0);
      assertNotSame(decimal64Array2, decimal64Array1);
      assertFalse(decimal64Array0.equals((Object)decimal64Array1));
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      assertFalse(decimal64Array2.equals((Object)decimal64Array1));
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, decimal64Array2.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(909).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Dfp[] dfpArray0 = new Dfp[5];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fieldExpandableODE0.init(dfp0, dfpArray0, dfp1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 909
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Dfp[] dfpArray0 = new Dfp[2];
      // Undeclared exception!
      try { 
        fieldExpandableODE0.init((Dfp) null, dfpArray0, (Dfp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((-32767)).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("0.0", decimal64_0.toString());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[6];
      decimal64Array0[0] = decimal64_0;
      // Undeclared exception!
      try { 
        fieldExpandableODE0.init(decimal64_0, decimal64Array0, decimal64_0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Decimal64 decimal64_0 = new Decimal64(100.0);
      assertEquals((byte)100, decimal64_0.byteValue());
      assertEquals(100.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(100.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)100, decimal64_0.shortValue());
      assertEquals(100.0, decimal64_0.getReal(), 0.01);
      assertEquals(100, decimal64_0.intValue());
      assertEquals(100L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("100.0", decimal64_0.toString());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      // Undeclared exception!
      try { 
        fieldExpandableODE0.init(decimal64_0, decimal64Array0, decimal64_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[9];
      Decimal64 decimal64_0 = new Decimal64(3.141592653589793);
      assertEquals(3.1415927F, decimal64_0.floatValue(), 0.01F);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((short)3, decimal64_0.shortValue());
      assertEquals(3.141592653589793, decimal64_0.doubleValue(), 0.01);
      assertEquals(3L, decimal64_0.longValue());
      assertEquals((byte)3, decimal64_0.byteValue());
      assertEquals("3.141592653589793", decimal64_0.toString());
      assertEquals(3, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals(3.141592653589793, decimal64_0.getReal(), 0.01);
      assertNotNull(decimal64_0);
      
      decimal64Array0[0] = decimal64_0;
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array0).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(1).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      assertEquals(9, decimal64Array0.length);
      
      try { 
        fieldExpandableODE0.computeDerivatives(decimal64Array0[0], decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((-1104)).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Class<Dfp> class0 = Dfp.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[1];
      // Undeclared exception!
      try { 
        fieldExpandableODE0.computeDerivatives(dfp0, dfpArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      Decimal64 decimal64_0 = new Decimal64((-2396.315));
      assertEquals((-2396.315), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-2396), decimal64_0.shortValue());
      assertEquals("-2396.315", decimal64_0.toString());
      assertEquals((-2396.315F), decimal64_0.floatValue(), 0.01F);
      assertEquals((byte) (-92), decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-2396.315), decimal64_0.getReal(), 0.01);
      assertEquals((-2396L), decimal64_0.longValue());
      assertEquals((-2396), decimal64_0.intValue());
      assertFalse(decimal64_0.isInfinite());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      // Undeclared exception!
      try { 
        fieldExpandableODE0.computeDerivatives(decimal64_0, decimal64Array0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Dfp> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Dfp>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Dfp> fieldExpandableODE0 = new FieldExpandableODE<Dfp>(firstOrderFieldDifferentialEquations0);
      assertNotNull(fieldExpandableODE0);
      
      // Undeclared exception!
      try { 
        fieldExpandableODE0.addSecondaryEquations((FieldSecondaryEquations<Dfp>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldExpandableODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = null;
      try {
        fieldExpandableODE0 = new FieldExpandableODE<Decimal64>((FirstOrderFieldDifferentialEquations<Decimal64>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldExpandableODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[0];
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array0).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      Decimal64 decimal64_0 = new Decimal64(Double.POSITIVE_INFINITY);
      Decimal64[] decimal64Array1 = new Decimal64[3];
      FieldSecondaryEquations<Decimal64> fieldSecondaryEquations0 = (FieldSecondaryEquations<Decimal64>) mock(FieldSecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldSecondaryEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class) , any(org.apache.commons.math4.util.Decimal64[].class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(0).when(fieldSecondaryEquations0).getDimension();
      fieldExpandableODE0.addSecondaryEquations(fieldSecondaryEquations0);
      decimal64Array1[0] = decimal64_0;
      // Undeclared exception!
      try { 
        fieldExpandableODE0.computeDerivatives(decimal64_0, decimal64Array1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldEquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decimal64[] decimal64Array0 = new Decimal64[1];
      Decimal64 decimal64_0 = new Decimal64(1611.6431792288554);
      decimal64Array0[0] = decimal64_0;
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array0).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(1).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      Decimal64[] decimal64Array1 = fieldExpandableODE0.computeDerivatives(decimal64_0, decimal64Array0);
      assertNotSame(decimal64Array1, decimal64Array0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      FieldSecondaryEquations<Decimal64> fieldSecondaryEquations0 = (FieldSecondaryEquations<Decimal64>) mock(FieldSecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fieldSecondaryEquations0).getDimension();
      fieldExpandableODE0.addSecondaryEquations(fieldSecondaryEquations0);
      Decimal64 decimal64_0 = new Decimal64(1617.6076355719158);
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_0;
      fieldExpandableODE0.init(decimal64_0, decimal64Array0, decimal64_0);
      assertEquals(1617.6076355719158, decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(firstOrderFieldDifferentialEquations0).getDimension();
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = new FieldExpandableODE<Decimal64>(firstOrderFieldDifferentialEquations0);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = fieldExpandableODE0.getMapper();
      assertEquals(0, fieldEquationsMapper0.getTotalDimension());
  }
}

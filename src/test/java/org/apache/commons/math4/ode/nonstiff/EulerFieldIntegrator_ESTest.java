/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:07:45 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpDec;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.EulerFieldIntegrator;
import org.apache.commons.math4.ode.nonstiff.EulerFieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EulerFieldIntegrator_ESTest extends EulerFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Decimal64) null).when(field0).getOne();
      doReturn(class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn((Decimal64) null, (Decimal64) null, (Decimal64) null).when(field0).getZero();
      Decimal64 decimal64_0 = new Decimal64(1.0);
      EulerFieldIntegrator<Decimal64> eulerFieldIntegrator0 = new EulerFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      EulerFieldStepInterpolator<Decimal64> eulerFieldStepInterpolator0 = eulerFieldIntegrator0.createInterpolator(true, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      assertTrue(eulerFieldStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Decimal64 decimal64_0 = new Decimal64((-792.0944));
      EulerFieldIntegrator<Decimal64> eulerFieldIntegrator0 = null;
      try {
        eulerFieldIntegrator0 = new EulerFieldIntegrator<Decimal64>(field0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<DfpDec> class1 = DfpDec.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(dfp0).when(field0).getZero();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = null;
      try {
        eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:28:28 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.DormandPrince54FieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DormandPrince54FieldStepInterpolator_ESTest extends DormandPrince54FieldStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0690763975E10));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      Decimal64 decimal64_1 = new Decimal64((-3973.341));
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54FieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, decimal64_0, decimal64_1, decimal64_0, decimal64_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0690763975E10));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      Decimal64[] decimal64Array1 = new Decimal64[6];
      Decimal64 decimal64_1 = new Decimal64((-683.0));
      decimal64Array1[0] = decimal64_1;
      decimal64Array1[3] = decimal64Array1[0];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54FieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, decimal64Array1[3], decimal64Array1[3], decimal64Array1[0], decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0690763975E10));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      Decimal64[] decimal64Array1 = new Decimal64[6];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54FieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, decimal64_0, decimal64_0, decimal64Array1[1], decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0690763975E10));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field1).getOne();
      doReturn(class0).when(field1).getRuntimeClass();
      doReturn(decimal64_0).when(field1).getZero();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator1 = dormandPrince54FieldStepInterpolator0.create(field1, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper1);
      assertFalse(dormandPrince54FieldStepInterpolator1.isForward());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][2];
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Dfp> dormandPrince54FieldStepInterpolator0 = null;
      try {
        dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Dfp>(field0, true, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54FieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0690763975E10));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][3];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Decimal64> dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54FieldStepInterpolator0.create(field1, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][5];
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DormandPrince54FieldStepInterpolator<Dfp> dormandPrince54FieldStepInterpolator0 = null;
      try {
        dormandPrince54FieldStepInterpolator0 = new DormandPrince54FieldStepInterpolator<Dfp>(field0, true, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:36:35 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DormandPrince853Integrator_ESTest extends DormandPrince853Integrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.4746203194561444;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.4746203194561444, 0.4746203194561444, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[6] = doubleArray0;
      dormandPrince853Integrator0.mainSetDimension = 8;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.4746203194561444);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 94326.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1613.2309), 94326.0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][8];
      dormandPrince853Integrator0.mainSetDimension = 880;
      doubleArray1[5] = doubleArray0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 40.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 94326.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1613.2309), 94326.0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      dormandPrince853Integrator0.mainSetDimension = 880;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 40.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.mainSetDimension = (-849);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, (-2389.05665577224));
      assertEquals(8, dormandPrince853Integrator0.getOrder());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-877.021208369638), 0.6299605249474366, 0.6299605249474366, (-877.021208369638));
      dormandPrince853Integrator0.mainSetDimension = 4;
      double[][] doubleArray0 = new double[7][5];
      doubleArray0[0] = null;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray0[5], doubleArray0[0], 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = null;
      try {
        dormandPrince853Integrator0 = new DormandPrince853Integrator((-0.017578125), (-0.017578125), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2196.74106411), (-2196.74106411), (-2196.74106411), (-2196.74106411));
      double[][] doubleArray0 = new double[0][6];
      double[] doubleArray1 = new double[1];
      double double0 = dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 8);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:28:19 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.ode.FieldExpandableODE;
import org.apache.commons.math4.ode.FieldODEState;
import org.apache.commons.math4.ode.FirstOrderFieldDifferentialEquations;
import org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaFieldIntegrator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RungeKuttaFieldIntegrator_ESTest extends RungeKuttaFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-2885.964411));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      ClassicalRungeKuttaFieldIntegrator<Decimal64> classicalRungeKuttaFieldIntegrator0 = new ClassicalRungeKuttaFieldIntegrator<Decimal64>(field0, decimal64_0);
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      Decimal64 decimal64_1 = new Decimal64((-3051.0));
      Decimal64[] decimal64Array0 = new Decimal64[6];
      // Undeclared exception!
      try { 
        classicalRungeKuttaFieldIntegrator0.singleStep(firstOrderFieldDifferentialEquations0, decimal64_1, decimal64Array0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      ClassicalRungeKuttaFieldIntegrator<Decimal64> classicalRungeKuttaFieldIntegrator0 = new ClassicalRungeKuttaFieldIntegrator<Decimal64>(field0, decimal64_0);
      classicalRungeKuttaFieldIntegrator0.fraction(6, 6);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-686.0));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      ClassicalRungeKuttaFieldIntegrator<Decimal64> classicalRungeKuttaFieldIntegrator0 = new ClassicalRungeKuttaFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = new Decimal64[5];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64Array0[0];
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64Array0).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      Decimal64[] decimal64Array1 = new Decimal64[6];
      decimal64Array1[0] = decimal64_0;
      decimal64Array1[1] = decimal64_0;
      decimal64Array1[2] = decimal64_0;
      decimal64Array1[3] = decimal64_0;
      decimal64Array1[4] = decimal64_0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaFieldIntegrator0.singleStep(firstOrderFieldDifferentialEquations0, decimal64_0, decimal64Array1, decimal64_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      ClassicalRungeKuttaFieldIntegrator<Decimal64> classicalRungeKuttaFieldIntegrator0 = new ClassicalRungeKuttaFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = classicalRungeKuttaFieldIntegrator0.getB();
      FirstOrderFieldDifferentialEquations<Decimal64> firstOrderFieldDifferentialEquations0 = (FirstOrderFieldDifferentialEquations<Decimal64>) mock(FirstOrderFieldDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((Object) decimal64Array0, (Object) null, (Object) null, (Object) null).when(firstOrderFieldDifferentialEquations0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      Decimal64[] decimal64Array1 = classicalRungeKuttaFieldIntegrator0.singleStep(firstOrderFieldDifferentialEquations0, decimal64_0, decimal64Array0, decimal64_0);
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-686.0));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      ClassicalRungeKuttaFieldIntegrator<Decimal64> classicalRungeKuttaFieldIntegrator0 = new ClassicalRungeKuttaFieldIntegrator<Decimal64>(field0, decimal64_0);
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = (FieldExpandableODE<Decimal64>) mock(FieldExpandableODE.class, new ViolatedAssumptionAnswer());
      FieldODEState<Decimal64> fieldODEState0 = (FieldODEState<Decimal64>) mock(FieldODEState.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEState0).getTime();
      // Undeclared exception!
      try { 
        classicalRungeKuttaFieldIntegrator0.integrate(fieldExpandableODE0, fieldODEState0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.AbstractFieldIntegrator", e);
      }
  }
}

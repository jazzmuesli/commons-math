/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:40:49 GMT 2019
 */

package org.apache.commons.math4.ode.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NordsieckStepInterpolator_ESTest extends NordsieckStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(328, 2606, 7, 9, 114).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, equationsMapperArray0.length);
      
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      nordsieckStepInterpolator0.rescale(1.0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn((double)7, (double)2606, (double)114, 0.0, 1.0).when(objectInput0).readDouble();
      doReturn(2606).when(objectInput0).readInt();
      doReturn((-1571)).when(objectInput0).read();
      doReturn(equationsMapper0).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      nordsieckStepInterpolator0.rescale(1.0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix1 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix1).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray2, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 1.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      nordsieckStepInterpolator0.rescale(994.11);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray2, false, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {994.11, 994.11, 0.0, 994.11, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(5, doubleArray2.length);
      assertEquals(4, equationsMapperArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 835.6;
      doubleArray0[2] = 1455.9863;
      doubleArray0[3] = (-1240.41616667589);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-382.50169586624);
      nordsieckStepInterpolator0.stateVariation = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      
      nordsieckStepInterpolator1.setSoftPreviousTime(1.0);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(1.0, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      nordsieckStepInterpolator0.rescale(1.0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix1 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix1).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 0.0, doubleArray2, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(5, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      nordsieckStepInterpolator0.rescale(994.11);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn((-1.0), 1846.03974, 1846.03974, (-1.0), 1285.8222911826474).when(objectInput0).readDouble();
      doReturn(2).when(objectInput0).readInt();
      doReturn(nordsieckStepInterpolator0).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      nordsieckStepInterpolator0.rescale(1.0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix1 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(array2DRowRealMatrix1).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray2, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale(994.11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-279.08);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-263)).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[3];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(0.0, 0.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      
      double double0 = 0.0;
      double[] doubleArray0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      nordsieckStepInterpolator1.reinitialize((-739.116609534962), 0.0, (double[]) null, array2DRowRealMatrix0);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.computeInterpolatedStateAndDerivatives((-739.116609534962), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double double0 = 1.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3850.34267);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2054.862596602);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {(-3850.34267), 0.0, (-2054.862596602)}, doubleArray0, 0.01);
      assertFalse(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, equationsMapperArray0.length);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      nordsieckStepInterpolator0.writeExternal(objectOutput0);
      assertFalse(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      nordsieckStepInterpolator0.setSoftCurrentTime((-1800.184195879696));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1800.184195879696), nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = (NordsieckStepInterpolator)nordsieckStepInterpolator0.doCopy();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1800.184195879696), nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals((-1800.184195879696), nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1378.76413632706;
      doubleArray0[1] = (-989.4516069);
      doubleArray0[2] = (-5288.137345039609);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-2269.84);
      doubleArray0[5] = 2685.99;
      doubleArray0[6] = 4266.03715731898;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 1778.26817373;
      nordsieckStepInterpolator0.interpolatedPrimaryDerivatives = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      NordsieckStepInterpolator nordsieckStepInterpolator1 = (NordsieckStepInterpolator)nordsieckStepInterpolator0.doCopy();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      int int0 = (-1224);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 4252.13983705053;
      nordsieckStepInterpolator0.stateVariation = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      nordsieckStepInterpolator0.setSoftPreviousTime(850.8862);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(850.8862, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = (NordsieckStepInterpolator)nordsieckStepInterpolator0.doCopy();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(850.8862, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(850.8862, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-950.9381307976);
      doubleArray0[1] = 4002.0;
      doubleArray0[2] = (-341.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 445.0906;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 972.0976991357585;
      nordsieckStepInterpolator0.stateVariation = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale((-762.1952253638228));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      nordsieckStepInterpolator0.interpolatedTime = Double.POSITIVE_INFINITY;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.POSITIVE_INFINITY, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      double double0 = (-1084.59404);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      nordsieckStepInterpolator0.interpolatedPrimaryState = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.POSITIVE_INFINITY, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      nordsieckStepInterpolator0.stateVariation = null;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.POSITIVE_INFINITY, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      nordsieckStepInterpolator0.reinitialize((-1084.59404), (-820.3466246817005), (double[]) null, array2DRowRealMatrix0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.POSITIVE_INFINITY, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      double double1 = (-4045.11);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.computeInterpolatedStateAndDerivatives((-820.3466246817005), (-4045.11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1858.08416743642;
      doubleArray0[6] = (-1329.7);
      nordsieckStepInterpolator0.currentState = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      
      double double0 = (-2147.3255252135928);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.computeInterpolatedStateAndDerivatives((-2147.3255252135928), (-2147.3255252135928));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      
      nordsieckStepInterpolator0.finalizeStep();
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = 1478.21787;
      doubleArray0[2] = 1478.21787;
      doubleArray0[3] = 1896.375071;
      doubleArray0[4] = 660.6689047923;
      doubleArray0[5] = 207.330355128;
      doubleArray0[6] = 0.0;
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[5];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = null;
      equationsMapperArray0[2] = null;
      equationsMapperArray0[3] = null;
      equationsMapperArray0[4] = equationsMapperArray0[3];
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.reinitialize(doubleArray0, true, (EquationsMapper) null, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1724.9779;
      doubleArray0[1] = 500.750484117;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-513.97408);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {1724.9779, 500.750484117, 0.0, Double.NaN, (-513.97408)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertFalse(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, equationsMapperArray0.length);
      
      nordsieckStepInterpolator0.interpolatedPrimaryDerivatives = null;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertFalse(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 238;
      doubleArray0[3] = (double) 238;
      doubleArray0[4] = (double) 238;
      nordsieckStepInterpolator0.stateVariation = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedSecondaryDerivatives(238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      nordsieckStepInterpolator0.reinitialize(Double.POSITIVE_INFINITY, 1091.4334138694874, doubleArray0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = (NordsieckStepInterpolator)nordsieckStepInterpolator0.doCopy();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      
      nordsieckStepInterpolator1.setSoftCurrentTime(978.468702095);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(978.468702095, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      NordsieckStepInterpolator nordsieckStepInterpolator2 = new NordsieckStepInterpolator(nordsieckStepInterpolator1);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertFalse(nordsieckStepInterpolator2.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator2.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator2);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(978.468702095, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator2.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(978.468702095, nordsieckStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getGlobalCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = null;
      try {
        nordsieckStepInterpolator0 = new NordsieckStepInterpolator((NordsieckStepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[0];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      equationsMapperArray0[0] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(0, doubleArray0.length);
      assertEquals(1, equationsMapperArray0.length);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      
      boolean boolean0 = true;
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.rescale((-811.3592886909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      nordsieckStepInterpolator1.reinitialize(0.0, 0.0, doubleArray0, (Array2DRowRealMatrix) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(9, doubleArray0.length);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-83.1894794798);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2876.4;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      nordsieckStepInterpolator0.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-83.1894794798), 0.0, 2876.4}, doubleArray0, 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(5, doubleArray0.length);
      assertEquals(0, equationsMapperArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3842.581337456128);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1332.277672880943;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-93.201384289937);
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      equationsMapperArray0[0] = null;
      equationsMapperArray0[1] = null;
      equationsMapperArray0[2] = equationsMapperArray0[1];
      equationsMapperArray0[3] = null;
      equationsMapperArray0[4] = null;
      equationsMapperArray0[5] = null;
      equationsMapperArray0[6] = null;
      equationsMapperArray0[7] = equationsMapperArray0[6];
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.reinitialize(doubleArray0, true, (EquationsMapper) null, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-586.8835);
      nordsieckStepInterpolator0.currentState = doubleArray0;
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.869604401089358;
      doubleArray0[1] = (-1091.224246);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(3, 3, 9, 3).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      equationsMapperArray0[0] = equationsMapper0;
      nordsieckStepInterpolator1.reinitialize(doubleArray0, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {9.869604401089358, (-1091.224246), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, equationsMapperArray0.length);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double[] doubleArray0 = new double[3];
      NordsieckStepInterpolator nordsieckStepInterpolator1 = (NordsieckStepInterpolator)nordsieckStepInterpolator0.copy();
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      nordsieckStepInterpolator1.setInterpolatedTime((-1114.0));
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-1114.0), nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      
      double double0 = (-927.112);
      NordsieckStepInterpolator nordsieckStepInterpolator2 = (NordsieckStepInterpolator)nordsieckStepInterpolator1.doCopy();
      assertFalse(nordsieckStepInterpolator0.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertFalse(nordsieckStepInterpolator2.equals((Object)nordsieckStepInterpolator1));
      assertFalse(nordsieckStepInterpolator2.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator2);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-1114.0), nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator2.isForward());
      assertEquals((-1114.0), nordsieckStepInterpolator2.getInterpolatedTime(), 0.01);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator0, nordsieckStepInterpolator2);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator2);
      assertNotSame(nordsieckStepInterpolator1, nordsieckStepInterpolator0);
      assertNotSame(nordsieckStepInterpolator2, nordsieckStepInterpolator1);
      assertNotSame(nordsieckStepInterpolator2, nordsieckStepInterpolator0);
      
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      assertNotNull(nordsieckStepInterpolator0);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      assertFalse(nordsieckStepInterpolator1.equals((Object)nordsieckStepInterpolator0));
      assertNotNull(nordsieckStepInterpolator1);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(nordsieckStepInterpolator0.isForward());
      assertTrue(nordsieckStepInterpolator1.isForward());
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, nordsieckStepInterpolator1.getCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-517.37800676);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1160.9195509092553);
      doubleArray0[5] = (-1154.705642693024);
      doubleArray0[6] = (-255.5);
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.reinitialize(doubleArray0, false, (EquationsMapper) null, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(array2DRowRealMatrix0).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray0, array2DRowRealMatrix0);
      nordsieckStepInterpolator0.rescale(1.0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix1 = mock(Array2DRowRealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(array2DRowRealMatrix1).getDataRef();
      nordsieckStepInterpolator0.reinitialize(1.0, 1.0, doubleArray2, array2DRowRealMatrix1);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.rescale(994.11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[3];
      nordsieckStepInterpolator0.storeTime((-3850.34267));
      doubleArray0[0] = (-3850.34267);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2054.862596602);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(13, 312, 13, 9, 312).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      nordsieckStepInterpolator0.reinitialize(doubleArray0, false, equationsMapper0, equationsMapperArray0);
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      nordsieckStepInterpolator0.writeExternal(objectOutput0);
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator0.computeInterpolatedStateAndDerivatives(312, 312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.NordsieckStepInterpolator", e);
      }
  }
}

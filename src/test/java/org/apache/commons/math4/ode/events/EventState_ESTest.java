/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:26:04 GMT 2019
 */

package org.apache.commons.math4.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.solvers.UnivariateSolver;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.ExpandableStatefulODE;
import org.apache.commons.math4.ode.events.EventHandler;
import org.apache.commons.math4.ode.events.EventState;
import org.apache.commons.math4.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("zT9ak").when(eventHandler0).toString();
      doReturn(0.0, 2144.20216203).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-1017.51), (-1017.51), (-541), univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0, equationsMapper0).when(expandableStatefulODE1).getPrimaryMapper();
      doReturn((Object) equationsMapperArray0, (Object) equationsMapperArray0).when(expandableStatefulODE1).getSecondaryMappers();
      doReturn(16, 16).when(expandableStatefulODE1).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.getConvergence();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 16;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2144.20216203;
      doubleArray1[3] = 1017.51;
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = 3662.59;
      doubleArray1[6] = 3662.59;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      doReturn(false).when(stepInterpolator0).isForward();
      eventState0.evaluateStep(stepInterpolator0);
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 3662.59;
      doubleArray2[1] = 2144.20216203;
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray0).when(stepInterpolator1).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator1).getInterpolatedState();
      doReturn((-1017.51)).when(stepInterpolator1).getPreviousTime();
      eventState0.reinitializeBegin(stepInterpolator1);
      eventState0.getEventHandler();
      eventState0.getConvergence();
      eventState0.getConvergence();
      ExpandableStatefulODE expandableStatefulODE2 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.math4.ode.sampling.DummyStepInterpolatorTest$BadStepInterpolator").when(eventHandler0).toString();
      doReturn((-1.0129027912496858E-9)).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-1017.51), (-1017.51), (-541), univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0).when(expandableStatefulODE1).getPrimaryMapper();
      doReturn(equationsMapperArray0).when(expandableStatefulODE1).getSecondaryMappers();
      doReturn(16).when(expandableStatefulODE1).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.getConvergence();
      double[] doubleArray0 = new double[0];
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn((-1017.51)).when(stepInterpolator0).getPreviousTime();
      eventState0.reinitializeBegin(stepInterpolator0);
      eventState0.getEventHandler();
      eventState0.getConvergence();
      eventState0.getConvergence();
      ExpandableStatefulODE expandableStatefulODE2 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(univariateSolver0).getAbsoluteAccuracy();
      doReturn(0.0).when(univariateSolver0).getRelativeAccuracy();
      EventState eventState0 = new EventState(eventHandler0, (-1017.51), (-1017.51), (-541), univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0, (EquationsMapper) null).when(expandableStatefulODE1).getPrimaryMapper();
      doReturn((Object) equationsMapperArray0, (Object) null).when(expandableStatefulODE1).getSecondaryMappers();
      doReturn(16, 0).when(expandableStatefulODE1).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.getConvergence();
      double[] doubleArray0 = new double[0];
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn((Object) doubleArray0, (Object) null).when(stepInterpolator0).getInterpolatedState();
      doReturn((-1017.51)).when(stepInterpolator0).getPreviousTime();
      eventState0.reinitializeBegin(stepInterpolator0);
      eventState0.getEventHandler();
      eventState0.getConvergence();
      eventState0.getConvergence();
      ExpandableStatefulODE expandableStatefulODE2 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1743.387605220928, (-720.8876), 705, univariateSolver0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      doReturn(false).when(stepInterpolator0).isForward();
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(equationsMapperArray0).when(expandableStatefulODE0).getSecondaryMappers();
      doReturn(705).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      eventState0.stop();
      eventState0.evaluateStep(stepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1580.593856567, 0.0, 0, univariateSolver0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((-1662)).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      double double1 = (-342.58);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double2 = 1553.75700094661;
      doubleArray0[1] = 1553.75700094661;
      doubleArray0[2] = 1580.593856567;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(false).when(stepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-933.1642)).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 5008.95170625, (-1698.4), 2577, univariateSolver0);
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted((-4050.88992909101), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState((EventHandler) null, (-1158.821249849), (-1158.821249849), 306, univariateSolver0);
      eventState0.getMaxCheckInterval();
      double[] doubleArray0 = null;
      eventState0.reset((-1158.821249849), (double[]) null);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn((EquationsMapper[]) null).when(expandableStatefulODE0).getSecondaryMappers();
      doReturn(306).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double)306).when(stepInterpolator1).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator1).getInterpolatedState();
      doReturn(false).when(stepInterpolator1).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(714.3027).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 644.92765672, (-2069.99708098041), (-648), univariateSolver0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2069.99708098041);
      eventState0.stepAccepted(0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 10.0;
      int int0 = (-1521);
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 10.0, 10.0, (-1521), univariateSolver0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((-1521)).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      double[] doubleArray0 = new double[5];
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2518.0, 2518.0, (-2107), (UnivariateSolver) null);
      double[] doubleArray0 = new double[2];
      eventState0.reset(0.0, doubleArray0);
      doubleArray0[0] = 2518.0;
      doubleArray0[1] = (double) (-2107);
      eventState0.stepAccepted(0.0, doubleArray0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(false).when(stepInterpolator0).isForward();
      eventState0.evaluateStep(stepInterpolator0);
      eventState0.stepAccepted(0.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2518.0;
      doubleArray1[1] = 0.0;
      eventState0.reset(0.0, doubleArray1);
      eventState0.getEventHandler();
      eventState0.stop();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1318.5466123238136;
      double double1 = 422.9909;
      int int0 = 43;
      EventState eventState0 = new EventState((EventHandler) null, 1318.5466123238136, 422.9909, 43, (UnivariateSolver) null);
      eventState0.getEventTime();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 43;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 43;
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(1318.5466123238136, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, (-3324), univariateSolver0);
      eventState0.getMaxCheckInterval();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-1875.561564), (-1875.561564), 289, univariateSolver0);
      eventState0.getMaxCheckInterval();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 143, univariateSolver0);
      eventState0.getConvergence();
      eventState0.getMaxIterationCount();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1145.7779, 1145.7779, 894, univariateSolver0);
      eventState0.getConvergence();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, (-1103.0), (-846), univariateSolver0);
      eventState0.getMaxIterationCount();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-4974.331859887701), 1.0E-14, 142, univariateSolver0);
      eventState0.getEventHandler();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 4064, univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(0).when(expandableStatefulODE0).getTotalDimension();
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.setExpandable(expandableStatefulODE0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      eventState0.stepAccepted(4064, doubleArray0);
      eventState0.getEventTime();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      doReturn(false).when(stepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-1154.4), Double.NEGATIVE_INFINITY, (-39), univariateSolver0);
      eventState0.getEventTime();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1154.4);
      doubleArray0[1] = (-1154.4);
      doubleArray0[2] = (double) (-39);
      eventState0.stepAccepted(Double.NEGATIVE_INFINITY, doubleArray0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(false).when(stepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 2869.8689425373, 2869.8689425373, 0, univariateSolver0);
      eventState0.getMaxIterationCount();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1365.27732, 1365.27732, 268, univariateSolver0);
      eventState0.getEventTime();
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(0).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, (-1.0), (-453), (UnivariateSolver) null);
      eventState0.getEventHandler();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 3756.59, 683.42, (-2283), univariateSolver0);
      eventState0.getMaxCheckInterval();
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3756.59, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0, univariateSolver0);
      eventState0.reset(0.0, (double[]) null);
      eventState0.stop();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      eventState0.reset(0.0, (double[]) null);
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-738);
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState((EventHandler) null, 416.571623898878, 0.0, (-738), univariateSolver0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(false).when(stepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 292, (UnivariateSolver) null);
      double[] doubleArray0 = null;
      StepInterpolator stepInterpolator0 = null;
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0, (UnivariateSolver) null);
      eventState0.getEventTime();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      eventState0.reset(Double.NEGATIVE_INFINITY, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0, univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, (-2793), univariateSolver0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(false).when(stepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 651.0, 651.0, 1425, (UnivariateSolver) null);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, (-1285), univariateSolver0);
      eventState0.getConvergence();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 800.255236595292, (-1314.89861331), 0, (UnivariateSolver) null);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      eventState0.stepAccepted(0, (double[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-465.36815736);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 800.255236595292;
      doubleArray0[3] = (-1314.89861331);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1314.89861331);
      doubleArray0[6] = 800.255236595292;
      doubleArray0[7] = Double.NaN;
      eventState0.stop();
      double[] doubleArray1 = new double[2];
      eventState0.reset((-1314.89861331), doubleArray1);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(1324.12336512256).when(stepInterpolator2).getCurrentTime();
      doReturn(true).when(stepInterpolator2).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1497.8095), (-1497.8095)).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1.0E-10, 1.0E-10, (-458), univariateSolver0);
      eventState0.getEventTime();
      double double0 = 0.0;
      double[] doubleArray0 = new double[8];
      eventState0.stepAccepted(1301.5577723347187, doubleArray0);
      doubleArray0[2] = 1.0E-10;
      eventState0.reset(0.0, doubleArray0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-10;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 6.0;
      eventState0.reset(6.0, doubleArray0);
      doubleArray0[7] = (double) (-458);
      eventState0.stepAccepted(0.0, doubleArray0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(stepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1580.593856567, 0.0, 0, univariateSolver0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(equationsMapperArray0).when(expandableStatefulODE0).getSecondaryMappers();
      doReturn(0).when(expandableStatefulODE0).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1553.75700094661;
      doubleArray0[2] = 1580.593856567;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(1580.593856567).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn(true).when(stepInterpolator0).isForward();
      eventState0.evaluateStep(stepInterpolator0);
      doubleArray0[3] = (-342.58);
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.stepAccepted((-342.58), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE2 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE2);
      eventState0.getEventTime();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 7.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-342.58);
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 1553.75700094661;
      doubleArray1[6] = 1553.75700094661;
      eventState0.reset(0.0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-120.0), (-120.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 1.0, 1.0, 0, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
      eventState0.getMaxIterationCount();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      eventState0.stepAccepted(1.0, doubleArray0);
      doubleArray0[1] = 809.1173;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      eventState0.stepAccepted(0.5, doubleArray0);
      eventState0.getMaxIterationCount();
      eventState0.stop();
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.reset(809.1173, doubleArray0);
      eventState0.getMaxCheckInterval();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 279.550384203, 0, univariateSolver0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable((ExpandableStatefulODE) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1537.6758161021955;
      doubleArray0[1] = 279.550384203;
      doubleArray0[2] = 279.550384203;
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator1).getCurrentTime();
      doReturn(false).when(stepInterpolator1).isForward();
      // Undeclared exception!
      try { 
        eventState0.evaluateStep(stepInterpolator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("_CTq;JRDg").when(eventHandler0).toString();
      double double0 = 368.80510166;
      double double1 = (-2153.44244867);
      int int0 = (-1056);
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 368.80510166, (-2153.44244867), (-1056), univariateSolver0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2153.44244867);
      doubleArray0[1] = 368.80510166;
      doubleArray0[2] = 368.80510166;
      doubleArray0[3] = (-2153.44244867);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 368.80510166;
      eventState0.reset(0.0, doubleArray0);
      eventState0.getEventHandler();
      double double2 = 3209.7774521;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 368.80510166;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = null;
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("zT9ak").when(eventHandler0).toString();
      doReturn(0.0, 2144.20216203).when(eventHandler0).g(anyDouble() , any(double[].class));
      UnivariateSolver univariateSolver0 = mock(UnivariateSolver.class, new ViolatedAssumptionAnswer());
      doReturn(3662.59).when(univariateSolver0).getAbsoluteAccuracy();
      doReturn(0.0).when(univariateSolver0).getRelativeAccuracy();
      EventState eventState0 = new EventState(eventHandler0, (-1017.51), (-1017.51), (-541), univariateSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE0);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      ExpandableStatefulODE expandableStatefulODE1 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(equationsMapper0, equationsMapper0).when(expandableStatefulODE1).getPrimaryMapper();
      doReturn((Object) equationsMapperArray0, (Object) equationsMapperArray0).when(expandableStatefulODE1).getSecondaryMappers();
      doReturn(16, 16).when(expandableStatefulODE1).getTotalDimension();
      eventState0.setExpandable(expandableStatefulODE1);
      eventState0.getConvergence();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 16;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2144.20216203;
      doubleArray1[3] = 1017.51;
      doubleArray1[4] = (double) 16;
      doubleArray1[5] = 3662.59;
      doubleArray1[6] = 3662.59;
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 3662.59;
      doubleArray2[1] = 2144.20216203;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray1).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn((Object) doubleArray0, (Object) doubleArray2).when(stepInterpolator0).getInterpolatedState();
      doReturn((-1017.51)).when(stepInterpolator0).getPreviousTime();
      eventState0.reinitializeBegin(stepInterpolator0);
      eventState0.getEventHandler();
      eventState0.getConvergence();
      double double0 = eventState0.getConvergence();
      assertEquals(1017.51, double0, 0.01);
      
      ExpandableStatefulODE expandableStatefulODE2 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      eventState0.setExpandable(expandableStatefulODE2);
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01);
      assertEquals((-541), eventState0.getMaxIterationCount());
  }
}

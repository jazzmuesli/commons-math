/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:11:26 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.nonstiff.AdamsBashforthFieldIntegrator;
import org.apache.commons.math4.ode.nonstiff.AdamsMoultonFieldIntegrator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultistepFieldIntegrator_ESTest extends MultistepFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp0).when(dfp1).sqrt();
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).multiply(any(org.apache.commons.math4.dfp.Dfp.class));
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp2).when(dfp3).add(anyDouble());
      Dfp dfp4 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp5 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp4).when(dfp5).add(anyDouble());
      doReturn(dfp4).when(dfp5).negate();
      Dfp dfp6 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null, (Dfp) null).when(dfp6).add(anyDouble());
      doReturn((Dfp) null).when(dfp6).negate();
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(dfp5, dfp6).when(field0).getOne();
      doReturn(dfp3, dfp5, dfp6, dfp6).when(field0).getZero();
      double[] doubleArray0 = new double[6];
      AdamsMoultonFieldIntegrator<Dfp> adamsMoultonFieldIntegrator0 = null;
      try {
        adamsMoultonFieldIntegrator0 = new AdamsMoultonFieldIntegrator<Dfp>(field0, (-588), (-588), 3526.460955583609, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeFieldIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((byte)1);
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      AdamsBashforthFieldIntegrator<Decimal64> adamsBashforthFieldIntegrator0 = new AdamsBashforthFieldIntegrator<Decimal64>(field0, 1263, 2746, (byte)1, 1819.486139811, 2746);
  }
}

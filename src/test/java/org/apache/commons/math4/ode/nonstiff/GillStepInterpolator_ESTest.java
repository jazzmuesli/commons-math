/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:22:23 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.GillStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class GillStepInterpolator_ESTest extends GillStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double double0 = (-1641.666028992355);
      gillStepInterpolator0.setSoftPreviousTime((-1641.666028992355));
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals((-1641.666028992355), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = (GillStepInterpolator)gillStepInterpolator0.doCopy();
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals((-1641.666028992355), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-1641.666028992355), gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      double double1 = (-2568.478197100917);
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        gillStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      gillStepInterpolator0.storeTime((-3091.5781841149));
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals((-3091.5781841149), gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = (GillStepInterpolator)gillStepInterpolator0.doCopy();
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals((-3091.5781841149), gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals((-3091.5781841149), gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      double double0 = 0.0;
      gillStepInterpolator0.setSoftPreviousTime(0.0);
      assertEquals(0.0, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      gillStepInterpolator0.setInterpolatedTime(0.0);
      assertEquals(0.0, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = (GillStepInterpolator)gillStepInterpolator0.doCopy();
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(0.0, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(0.0, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      GillStepInterpolator gillStepInterpolator2 = (GillStepInterpolator)gillStepInterpolator0.doCopy();
      assertNotNull(gillStepInterpolator2);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator0));
      assertEquals(0.0, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator2.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator2.isForward());
      assertEquals(0.0, gillStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getCurrentTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator0);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator0.computeInterpolatedStateAndDerivatives(1291.4, 1291.4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      gillStepInterpolator0.storeTime(0.0);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      
      gillStepInterpolator1.previousState = null;
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator2 = (GillStepInterpolator)gillStepInterpolator1.copy();
      assertNotNull(gillStepInterpolator2);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator2.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator2.isForward());
      assertEquals(0.0, gillStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator0);
      
      GillStepInterpolator gillStepInterpolator3 = (GillStepInterpolator)gillStepInterpolator1.doCopy();
      assertNotNull(gillStepInterpolator3);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator2));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator2));
      assertFalse(gillStepInterpolator3.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator3.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator3.equals((Object)gillStepInterpolator2));
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(0.0, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator3.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator3.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator3.isForward());
      assertEquals(0.0, gillStepInterpolator3.getInterpolatedTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator3.getCurrentTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator3.getGlobalCurrentTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator3);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator3);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator3, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator3, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator3, gillStepInterpolator2);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        gillStepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = gillStepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1899.03618059;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1899.03618059;
      doubleArray2[2] = 1899.03618059;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 1899.03618059;
      doubleArray2[5] = (-1.0);
      doubleArray1[6] = doubleArray2;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      gillStepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, equationsMapperArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1899.03618059, (-1.0), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator1.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = gillStepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2227.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 484.810300885;
      doubleArray0[3] = (-718.036081342898);
      doubleArray0[4] = (-952.40408599507);
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[6][2];
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-718.036081342898);
      doubleArray2[2] = 4.116164446561962E-8;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-952.40408599507);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-718.036081342898);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-952.40408599507);
      doubleArray1[5] = doubleArray3;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      gillStepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, equationsMapperArray0.length);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-2227.0), 0.0, 484.810300885, (-718.036081342898), (-952.40408599507), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator1.computeInterpolatedStateAndDerivatives((-172.9222), (-172.9222));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator2 = (GillStepInterpolator)gillStepInterpolator1.doCopy();
      assertNotNull(gillStepInterpolator2);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator1));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator2.isForward());
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getCurrentTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator1);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator1.computeInterpolatedStateAndDerivatives((-775.6000245722412), (-775.6000245722412));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = null;
      try {
        gillStepInterpolator0 = new GillStepInterpolator((GillStepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = gillStepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3370.190355899361);
      doubleArray0[1] = 0.44923629829290207;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper1).getDimension();
      equationsMapperArray0[0] = equationsMapper1;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      gillStepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, equationsMapperArray0.length);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertArrayEquals(new double[] {(-3370.190355899361), 0.44923629829290207}, doubleArray0, 0.01);
      
      gillStepInterpolator1.computeInterpolatedStateAndDerivatives((-839.0311866), (-839.0311866));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = gillStepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2.6033824355191673E-8);
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2.6033824355191673E-8);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2.6033824355191673E-8);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      gillStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, equationsMapperArray0.length);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, (-2.6033824355191673E-8)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator0.getInterpolatedDerivatives();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      
      AbstractIntegrator abstractIntegrator0 = gillStepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1620.6143381514873;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 832.2;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1620.6143381514873;
      doubleArray2[6] = 1620.6143381514873;
      doubleArray2[7] = 1620.6143381514873;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      gillStepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(9, equationsMapperArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.0, 1620.6143381514873}, doubleArray0, 0.01);
      
      gillStepInterpolator1.computeInterpolatedStateAndDerivatives((-2478.63073613), (-2478.63073613));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      double[] doubleArray3 = gillStepInterpolator1.getInterpolatedDerivatives();
      assertNotNull(doubleArray3);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(0, doubleArray3.length);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      gillStepInterpolator1.computeInterpolatedStateAndDerivatives(957.235, (-2478.63073613));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-3.0);
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator1 = (GillStepInterpolator)gillStepInterpolator0.doCopy();
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        gillStepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      gillStepInterpolator0.setSoftPreviousTime((-3.0));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      
      double[] doubleArray0 = gillStepInterpolator0.previousState;
      assertNull(doubleArray0);
      
      GillStepInterpolator gillStepInterpolator1 = (GillStepInterpolator)gillStepInterpolator0.copy();
      assertNotNull(gillStepInterpolator1);
      assertFalse(gillStepInterpolator1.equals((Object)gillStepInterpolator0));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator1.getPreviousTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator1, gillStepInterpolator0);
      
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      gillStepInterpolator1.yDotK = doubleArray1;
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator1.isForward());
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator1.getPreviousTime(), 0.01);
      
      GillStepInterpolator gillStepInterpolator2 = new GillStepInterpolator(gillStepInterpolator0);
      assertNotNull(gillStepInterpolator2);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator1));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator2.isForward());
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getInterpolatedTime(), 0.01);
      
      gillStepInterpolator0.setSoftCurrentTime(0.0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator2));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      
      gillStepInterpolator2.setSoftCurrentTime(0.0);
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator2));
      assertFalse(gillStepInterpolator0.equals((Object)gillStepInterpolator1));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator0));
      assertFalse(gillStepInterpolator2.equals((Object)gillStepInterpolator1));
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator2.isForward());
      assertEquals(0.0, gillStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals((-3.0), gillStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator2.getInterpolatedTime(), 0.01);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator2);
      assertNotSame(gillStepInterpolator0, gillStepInterpolator1);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator0);
      assertNotSame(gillStepInterpolator2, gillStepInterpolator1);
      
      // Undeclared exception!
      try { 
        gillStepInterpolator2.getInterpolatedSecondaryState(413);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gillStepInterpolator0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      assertNotNull(gillStepInterpolator0);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        gillStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      double double0 = 0.0;
      gillStepInterpolator0.previousState = null;
      gillStepInterpolator0.storeTime(0.0);
      double[] doubleArray0 = new double[0];
      gillStepInterpolator0.previousState = doubleArray0;
      double double1 = (-1.0);
      double double2 = 2565.5;
      // Undeclared exception!
      try { 
        gillStepInterpolator0.getInterpolatedDerivatives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      gillStepInterpolator0.doCopy();
      GillStepInterpolator gillStepInterpolator1 = new GillStepInterpolator(gillStepInterpolator0);
      gillStepInterpolator0.doCopy();
      double double0 = 0.0;
      gillStepInterpolator1.setSoftCurrentTime((-1525.6551622));
      gillStepInterpolator1.doCopy();
      gillStepInterpolator1.doCopy();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-956.73948);
      doubleArray0[1] = (-1525.6551622);
      doubleArray0[2] = (-1525.6551622);
      doubleArray0[3] = 1518.948466;
      gillStepInterpolator1.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        gillStepInterpolator1.computeInterpolatedStateAndDerivatives((-1525.6551622), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.GillStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      // Undeclared exception!
      try { 
        gillStepInterpolator0.shift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }
}

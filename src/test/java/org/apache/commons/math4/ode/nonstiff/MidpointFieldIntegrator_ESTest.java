/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:30:13 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.MidpointFieldIntegrator;
import org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MidpointFieldIntegrator_ESTest extends MidpointFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[][] decimal64Array0 = new Decimal64[0][7];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator0 = midpointFieldIntegrator0.createInterpolator(true, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      assertTrue(midpointFieldStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, (Decimal64) null, (Object) null).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, (Decimal64) null, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      Field<Decimal64> field1 = midpointFieldIntegrator0.getField();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator1 = new MidpointFieldIntegrator<Decimal64>(field1, decimal64_0);
      // Undeclared exception!
      try { 
        midpointFieldIntegrator1.getC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.MidpointFieldIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64(2583.6818176);
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        midpointFieldIntegrator0.createInterpolator(true, (Decimal64[][]) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = null;
      try {
        midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(dfp0).when(field0).getZero();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      MidpointFieldIntegrator<Dfp> midpointFieldIntegrator0 = null;
      try {
        midpointFieldIntegrator0 = new MidpointFieldIntegrator<Dfp>(field0, dfp1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.math4.dfp.Dfp$MockitoMock$1426033454
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = midpointFieldIntegrator0.getB();
      assertEquals(2, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64(4436.0380305723);
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(field0).getOne();
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = null;
      try {
        midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, (Decimal64) null, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = midpointFieldIntegrator0.getC();
      assertEquals(1, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1017.4605246));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, (Decimal64) null, decimal64_0).when(field0).getZero();
      MidpointFieldIntegrator<Decimal64> midpointFieldIntegrator0 = new MidpointFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[][] decimal64Array0 = new Decimal64[0][7];
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator0 = midpointFieldIntegrator0.createInterpolator(false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      assertFalse(midpointFieldStepInterpolator0.isForward());
  }
}

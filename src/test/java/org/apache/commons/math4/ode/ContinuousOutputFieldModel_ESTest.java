/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:27:15 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.ContinuousOutputFieldModel;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.sampling.FieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContinuousOutputFieldModel_ESTest extends ContinuousOutputFieldModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel1 = new ContinuousOutputFieldModel<Dfp>();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(fieldODEStateAndDerivative0).getTime();
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative1 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative1).getTime();
      FieldStepInterpolator<Dfp> fieldStepInterpolator0 = (FieldStepInterpolator<Dfp>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative1, (FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getCurrentState();
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getPreviousState();
      doReturn(true).when(fieldStepInterpolator0).isForward();
      continuousOutputFieldModel1.handleStep(fieldStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputFieldModel0.append(continuousOutputFieldModel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputFieldModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        continuousOutputFieldModel0.getInterpolatedState(dfp0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContinuousOutputFieldModel<Decimal64> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Decimal64>();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getCurrentState();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((Decimal64) null).when(fieldODEStateAndDerivative0).getTime();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative1).getTime();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator1 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative1).when(fieldStepInterpolator1).getCurrentState();
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator1).getPreviousState();
      doReturn(false).when(fieldStepInterpolator1).isForward();
      continuousOutputFieldModel0.handleStep(fieldStepInterpolator1, true);
      // Undeclared exception!
      try { 
        continuousOutputFieldModel0.handleStep(fieldStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputFieldModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel1 = new ContinuousOutputFieldModel<Dfp>();
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      FieldStepInterpolator<Dfp> fieldStepInterpolator0 = (FieldStepInterpolator<Dfp>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getCurrentState();
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getPreviousState();
      doReturn(false).when(fieldStepInterpolator0).isForward();
      continuousOutputFieldModel0.handleStep(fieldStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputFieldModel1.append(continuousOutputFieldModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputFieldModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ContinuousOutputFieldModel<Decimal64> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Decimal64>();
      continuousOutputFieldModel0.append(continuousOutputFieldModel0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      FieldStepInterpolator<Dfp> fieldStepInterpolator0 = (FieldStepInterpolator<Dfp>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative0, (FieldODEStateAndDerivative) null, (FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getPreviousState();
      doReturn(false).when(fieldStepInterpolator0).isForward();
      continuousOutputFieldModel0.handleStep(fieldStepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputFieldModel0.append(continuousOutputFieldModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputFieldModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContinuousOutputFieldModel<Decimal64> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Decimal64>();
      Decimal64 decimal64_0 = new Decimal64(1108.313281203284);
      // Undeclared exception!
      try { 
        continuousOutputFieldModel0.init((FieldODEStateAndDerivative<Decimal64>) null, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputFieldModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      Dfp dfp0 = continuousOutputFieldModel0.getFinalTime();
      assertNull(dfp0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ContinuousOutputFieldModel<Dfp> continuousOutputFieldModel0 = new ContinuousOutputFieldModel<Dfp>();
      Dfp dfp0 = continuousOutputFieldModel0.getInitialTime();
      assertNull(dfp0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:16:05 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpDec;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.FieldODEState;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldODEState_ESTest extends FieldODEState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[5];
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      Dfp[][] dfpArray1 = new Dfp[6][2];
      dfpArray1[1] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[6];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray1[2] = dfpArray2;
      dfpArray1[3] = dfpArray0;
      dfpArray1[4] = dfpArray0;
      dfpArray1[5] = dfpArray0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0, dfpArray1);
      assertEquals(5, dfpArray0.length);
      assertEquals(6, dfpArray1.length);
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(6, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray2));
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getNumberOfSecondaryStates();
      assertEquals(5, dfpArray0.length);
      assertEquals(6, dfpArray1.length);
      assertEquals(6, int0);
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(6, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray2));
      assertNotSame(dfpArray0, dfpArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<DfpDec> class0 = DfpDec.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[17];
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      Dfp[][] dfpArray1 = new Dfp[6][2];
      dfpArray1[1] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[6];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray1[2] = dfpArray2;
      dfpArray1[3] = dfpArray0;
      dfpArray1[4] = dfpArray0;
      dfpArray1[5] = dfpArray0;
      FieldODEState<Dfp> fieldODEState0 = null;
      try {
        fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray2, dfpArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      doReturn((String) null).when(dfp0).toString();
      Dfp[] dfpArray0 = new Dfp[5];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(5, dfpArray0.length);
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Class<Dfp> class0 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray1 = new Dfp[4][5];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[6];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      Dfp[][] dfpArray3 = fieldODEState0.copy(field0, dfpArray1);
      assertEquals(5, dfpArray0.length);
      assertEquals(4, dfpArray3.length);
      assertEquals(4, dfpArray1.length);
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray2));
      assertFalse(dfpArray3.equals((Object)dfpArray1));
      assertNotNull(dfpArray3);
      assertNotSame(dfpArray0, dfpArray2);
      assertNotSame(dfpArray3, dfpArray1);
      assertNotSame(dfpArray1, dfpArray3);
      
      dfpArray2[4] = dfp0;
      dfpArray2[5] = dfp0;
      dfpArray1[2] = dfpArray2;
      Dfp dfp1 = fieldODEState0.getTime();
      assertEquals(5, dfpArray0.length);
      assertEquals((-32767), Dfp.MIN_EXP);
      assertEquals((byte)3, Dfp.QNAN);
      assertEquals(32768, Dfp.MAX_EXP);
      assertEquals((byte)1, Dfp.INFINITE);
      assertEquals((byte)0, Dfp.FINITE);
      assertEquals(32760, Dfp.ERR_SCALE);
      assertEquals((byte)2, Dfp.SNAN);
      assertEquals(10000, Dfp.RADIX);
      assertEquals(0, dfp1.intLog10());
      assertFalse(dfp1.isInfinite());
      assertEquals(0, dfp1.log10K());
      assertFalse(dfp1.isNaN());
      assertEquals(0, dfp1.getRadixDigits());
      assertEquals(0, dfp1.classify());
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray2));
      assertNotNull(dfp1);
      assertNotSame(dfpArray0, dfpArray2);
      assertSame(dfp1, dfp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[9];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      dfpArray0[8] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(9, dfpArray0.length);
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(9, fieldODEState0.getStateDimension());
      assertNotNull(fieldODEState0);
      
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray1 = new Dfp[9][1];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
      dfpArray1[2] = dfpArray0;
      dfpArray1[3] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[6];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray2[5] = dfp0;
      dfpArray1[4] = dfpArray2;
      dfpArray1[5] = dfpArray0;
      dfpArray1[6] = dfpArray0;
      dfpArray1[7] = dfpArray0;
      dfpArray1[8] = dfpArray0;
      // Undeclared exception!
      try { 
        fieldODEState0.copy(field0, dfpArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1203.3736));
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1203), decimal64_0.intValue());
      assertEquals("-1203.3736", decimal64_0.toString());
      assertEquals((short) (-1203), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1203L), decimal64_0.longValue());
      assertEquals((-1203.3737F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1203.3736), decimal64_0.getReal(), 0.01);
      assertEquals((byte)77, decimal64_0.byteValue());
      assertEquals((-1203.3736), decimal64_0.doubleValue(), 0.01);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      decimal64Array0[8] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[4][9];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      decimal64Array1[2] = decimal64Array0;
      decimal64Array1[3] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(9, decimal64Array0.length);
      assertEquals(4, decimal64Array1.length);
      assertEquals(9, fieldODEState0.getStateDimension());
      assertEquals(4, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1203), decimal64_0.intValue());
      assertEquals("-1203.3736", decimal64_0.toString());
      assertEquals((short) (-1203), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1203L), decimal64_0.longValue());
      assertEquals((-1203.3737F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1203.3736), decimal64_0.getReal(), 0.01);
      assertEquals((byte)77, decimal64_0.byteValue());
      assertEquals((-1203.3736), decimal64_0.doubleValue(), 0.01);
      assertNotNull(fieldODEState0);
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryState((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1.0));
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1L), decimal64_0.longValue());
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertEquals("-1.0", decimal64_0.toString());
      assertEquals((-1), decimal64_0.intValue());
      assertEquals((-1.0), decimal64_0.getReal(), 0.01);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      Decimal64[][] decimal64Array1 = new Decimal64[3][5];
      decimal64Array1[0] = decimal64Array0;
      Decimal64[] decimal64Array2 = new Decimal64[8];
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      
      decimal64Array2[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64((-1.0));
      assertEquals((-1.0), decimal64_1.getReal(), 0.01);
      assertEquals((-1), decimal64_1.intValue());
      assertEquals("-1.0", decimal64_1.toString());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-1.0), decimal64_1.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_1.shortValue());
      assertEquals((-1.0F), decimal64_1.floatValue(), 0.01F);
      assertEquals((byte) (-1), decimal64_1.byteValue());
      assertEquals((-1L), decimal64_1.longValue());
      assertFalse(decimal64_1.isInfinite());
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array2[1] = decimal64_1;
      decimal64Array2[2] = decimal64_0;
      decimal64Array2[3] = decimal64_0;
      decimal64Array2[4] = decimal64_0;
      decimal64Array2[5] = decimal64_0;
      decimal64Array2[6] = decimal64_0;
      decimal64Array2[7] = decimal64_0;
      decimal64Array1[1] = decimal64Array2;
      decimal64Array1[2] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(3, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(0, fieldODEState0.getStateDimension());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1L), decimal64_0.longValue());
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertEquals("-1.0", decimal64_0.toString());
      assertEquals((-1), decimal64_0.intValue());
      assertEquals((-1.0), decimal64_0.getReal(), 0.01);
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertFalse(decimal64Array0.equals((Object)decimal64Array2));
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getSecondaryStateDimension(1);
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, int0);
      assertEquals(3, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(0, fieldODEState0.getStateDimension());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1L), decimal64_0.longValue());
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertEquals("-1.0", decimal64_0.toString());
      assertEquals((-1), decimal64_0.intValue());
      assertEquals((-1.0), decimal64_0.getReal(), 0.01);
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertFalse(decimal64Array0.equals((Object)decimal64Array2));
      assertNotSame(decimal64_0, decimal64_1);
      assertNotSame(decimal64Array0, decimal64Array2);
      
      int int1 = fieldODEState0.getStateDimension();
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, int1);
      assertEquals(3, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(0, fieldODEState0.getStateDimension());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_0.shortValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1L), decimal64_0.longValue());
      assertEquals((byte) (-1), decimal64_0.byteValue());
      assertEquals("-1.0", decimal64_0.toString());
      assertEquals((-1), decimal64_0.intValue());
      assertEquals((-1.0), decimal64_0.getReal(), 0.01);
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertFalse(decimal64Array0.equals((Object)decimal64Array2));
      assertTrue(int1 == int0);
      assertNotSame(decimal64_0, decimal64_1);
      assertNotSame(decimal64Array0, decimal64Array2);
      
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[] dfpArray0 = new Dfp[0];
      Dfp[][] dfpArray1 = new Dfp[6][7];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[7];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray2[5] = dfp0;
      dfpArray2[6] = dfp0;
      dfpArray1[2] = dfpArray2;
      dfpArray1[3] = dfpArray0;
      dfpArray1[4] = dfpArray0;
      Dfp[] dfpArray3 = new Dfp[0];
      assertFalse(dfpArray3.equals((Object)dfpArray0));
      assertFalse(dfpArray3.equals((Object)dfpArray2));
      
      dfpArray1[5] = dfpArray3;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1.0);
      assertEquals(1, decimal64_0.intValue());
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      Decimal64[][] decimal64Array1 = new Decimal64[0][1];
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(0, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(1, decimal64_0.intValue());
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(0, fieldODEState0.getStateDimension());
      assertNotNull(fieldODEState0);
      
      Decimal64[] decimal64Array2 = fieldODEState0.getState();
      assertEquals(0, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(0, decimal64Array2.length);
      assertEquals(1, decimal64_0.intValue());
      assertEquals("1.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(0, fieldODEState0.getStateDimension());
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      assertNotNull(decimal64Array2);
      assertNotSame(decimal64Array0, decimal64Array2);
      assertNotSame(decimal64Array2, decimal64Array0);
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      doReturn((String) null).when(dfp0).toString();
      Dfp[] dfpArray0 = new Dfp[7];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      FieldODEState<Dfp> fieldODEState1 = new FieldODEState<Dfp>(dfp0, dfpArray0, (Dfp[][]) null);
      assertEquals(7, dfpArray0.length);
      assertEquals(7, fieldODEState1.getStateDimension());
      assertEquals(0, fieldODEState1.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState1);
      
      Dfp dfp1 = fieldODEState1.getTime();
      assertEquals(7, dfpArray0.length);
      assertEquals((byte)3, Dfp.QNAN);
      assertEquals((-32767), Dfp.MIN_EXP);
      assertEquals((byte)2, Dfp.SNAN);
      assertEquals(32768, Dfp.MAX_EXP);
      assertEquals((byte)1, Dfp.INFINITE);
      assertEquals((byte)0, Dfp.FINITE);
      assertEquals(32760, Dfp.ERR_SCALE);
      assertEquals(10000, Dfp.RADIX);
      assertEquals(7, fieldODEState1.getStateDimension());
      assertEquals(0, fieldODEState1.getNumberOfSecondaryStates());
      assertEquals(0, dfp1.intLog10());
      assertEquals(0, dfp1.log10K());
      assertFalse(dfp1.isNaN());
      assertEquals(0, dfp1.getRadixDigits());
      assertEquals(0, dfp1.classify());
      assertFalse(dfp1.isInfinite());
      assertNotNull(dfp1);
      assertSame(dfp1, dfp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1047.19230758278);
      assertEquals(1047.19230758278, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1047L, decimal64_0.longValue());
      assertEquals(1047.1923F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1047, decimal64_0.intValue());
      assertEquals("1047.19230758278", decimal64_0.toString());
      assertEquals(1047.19230758278, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)23, decimal64_0.byteValue());
      assertEquals((short)1047, decimal64_0.shortValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[3];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[0][8];
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(3, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(1047.19230758278, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1047L, decimal64_0.longValue());
      assertEquals(1047.1923F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1047, decimal64_0.intValue());
      assertEquals("1047.19230758278", decimal64_0.toString());
      assertEquals(1047.19230758278, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)23, decimal64_0.byteValue());
      assertEquals((short)1047, decimal64_0.shortValue());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Decimal64[][] decimal64Array2 = fieldODEState0.copy(field0, (Decimal64[][]) null);
      assertEquals(3, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(1047.19230758278, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1047L, decimal64_0.longValue());
      assertEquals(1047.1923F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1047, decimal64_0.intValue());
      assertEquals("1047.19230758278", decimal64_0.toString());
      assertEquals(1047.19230758278, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)23, decimal64_0.byteValue());
      assertEquals((short)1047, decimal64_0.shortValue());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNull(decimal64Array2);
      
      int int0 = fieldODEState0.getSecondaryStateDimension(0);
      assertEquals(3, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(3, int0);
      assertEquals(1047.19230758278, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(1047L, decimal64_0.longValue());
      assertEquals(1047.1923F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1047, decimal64_0.intValue());
      assertEquals("1047.19230758278", decimal64_0.toString());
      assertEquals(1047.19230758278, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)23, decimal64_0.byteValue());
      assertEquals((short)1047, decimal64_0.shortValue());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[5];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      FieldODEState<Dfp> fieldODEState1 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(5, dfpArray0.length);
      assertEquals(5, fieldODEState1.getStateDimension());
      assertEquals(0, fieldODEState1.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState1);
      
      Dfp[] dfpArray1 = fieldODEState1.getSecondaryState((byte)0);
      assertEquals(5, dfpArray1.length);
      assertEquals(5, dfpArray0.length);
      assertEquals(5, fieldODEState1.getStateDimension());
      assertEquals(0, fieldODEState1.getNumberOfSecondaryStates());
      assertFalse(dfpArray1.equals((Object)dfpArray0));
      assertNotNull(dfpArray1);
      assertNotSame(dfpArray1, dfpArray0);
      assertNotSame(dfpArray0, dfpArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-543.398795383603));
      assertEquals((-543.398795383603), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-543), decimal64_0.shortValue());
      assertEquals((byte) (-31), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-543), decimal64_0.intValue());
      assertEquals((-543L), decimal64_0.longValue());
      assertEquals((-543.3988F), decimal64_0.floatValue(), 0.01F);
      assertFalse(decimal64_0.isNaN());
      assertEquals("-543.398795383603", decimal64_0.toString());
      assertEquals((-543.398795383603), decimal64_0.doubleValue(), 0.01);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      Decimal64[][] decimal64Array1 = new Decimal64[9][0];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      decimal64Array1[2] = decimal64Array0;
      decimal64Array1[3] = decimal64Array0;
      decimal64Array1[4] = decimal64Array0;
      decimal64Array1[5] = decimal64Array0;
      decimal64Array1[6] = decimal64Array0;
      decimal64Array1[7] = decimal64Array0;
      decimal64Array1[8] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(0, decimal64Array0.length);
      assertEquals(9, decimal64Array1.length);
      assertEquals((-543.398795383603), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-543), decimal64_0.shortValue());
      assertEquals((byte) (-31), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-543), decimal64_0.intValue());
      assertEquals((-543L), decimal64_0.longValue());
      assertEquals((-543.3988F), decimal64_0.floatValue(), 0.01F);
      assertFalse(decimal64_0.isNaN());
      assertEquals("-543.398795383603", decimal64_0.toString());
      assertEquals((-543.398795383603), decimal64_0.doubleValue(), 0.01);
      assertEquals(0, fieldODEState0.getStateDimension());
      assertEquals(9, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Decimal64[] decimal64Array2 = fieldODEState0.getSecondaryState(0);
      assertEquals(0, decimal64Array0.length);
      assertEquals(9, decimal64Array1.length);
      assertEquals(0, decimal64Array2.length);
      assertEquals((-543.398795383603), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-543), decimal64_0.shortValue());
      assertEquals((byte) (-31), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-543), decimal64_0.intValue());
      assertEquals((-543L), decimal64_0.longValue());
      assertEquals((-543.3988F), decimal64_0.floatValue(), 0.01F);
      assertFalse(decimal64_0.isNaN());
      assertEquals("-543.398795383603", decimal64_0.toString());
      assertEquals((-543.398795383603), decimal64_0.doubleValue(), 0.01);
      assertEquals(0, fieldODEState0.getStateDimension());
      assertEquals(9, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      assertNotNull(decimal64Array2);
      assertNotSame(decimal64Array0, decimal64Array2);
      assertNotSame(decimal64Array2, decimal64Array0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[5];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0, (Dfp[][]) null);
      assertEquals(5, dfpArray0.length);
      assertEquals(5, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryState((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[6];
      decimal64Array0[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(3078.029415058);
      assertEquals(3078, decimal64_1.intValue());
      assertEquals(3078L, decimal64_1.longValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(3078.029415058, decimal64_1.getReal(), 0.01);
      assertEquals(3078.029415058, decimal64_1.doubleValue(), 0.01);
      assertEquals((byte)6, decimal64_1.byteValue());
      assertEquals(3078.0293F, decimal64_1.floatValue(), 0.01F);
      assertFalse(decimal64_1.isNaN());
      assertEquals((short)3078, decimal64_1.shortValue());
      assertEquals("3078.029415058", decimal64_1.toString());
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array0[1] = decimal64_1;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      Decimal64 decimal64_2 = new Decimal64(0.0);
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
      assertFalse(decimal64_2.isNaN());
      assertEquals((short)0, decimal64_2.shortValue());
      assertEquals(0, decimal64_2.intValue());
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_2.toString());
      assertFalse(decimal64_2.isInfinite());
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertEquals((byte)0, decimal64_2.byteValue());
      assertEquals(0L, decimal64_2.longValue());
      assertTrue(decimal64_2.equals((Object)decimal64_0));
      assertFalse(decimal64_2.equals((Object)decimal64_1));
      assertNotNull(decimal64_2);
      
      decimal64Array0[5] = decimal64_2;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(6, decimal64Array0.length);
      assertFalse(decimal64_0.isInfinite());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(6, fieldODEState0.getStateDimension());
      assertTrue(decimal64_0.equals((Object)decimal64_2));
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertNotNull(fieldODEState0);
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryState((-2517));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[3];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(3, dfpArray0.length);
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryStateDimension((-255));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[0];
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(0, dfpArray0.length);
      assertEquals(0, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getNumberOfSecondaryStates();
      assertEquals(0, dfpArray0.length);
      assertEquals(0, int0);
      assertEquals(0, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      
      int int1 = fieldODEState0.getStateDimension();
      assertEquals(0, dfpArray0.length);
      assertEquals(0, int1);
      assertEquals(0, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1070.442822666));
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte) (-46), decimal64_0.byteValue());
      assertEquals((-1070.442822666), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1070), decimal64_0.shortValue());
      assertEquals((-1070.442822666), decimal64_0.getReal(), 0.01);
      assertEquals((-1070L), decimal64_0.longValue());
      assertEquals((-1070), decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("-1070.442822666", decimal64_0.toString());
      assertEquals((-1070.4429F), decimal64_0.floatValue(), 0.01F);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[7];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(7, decimal64Array0.length);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte) (-46), decimal64_0.byteValue());
      assertEquals((-1070.442822666), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1070), decimal64_0.shortValue());
      assertEquals((-1070.442822666), decimal64_0.getReal(), 0.01);
      assertEquals((-1070L), decimal64_0.longValue());
      assertEquals((-1070), decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("-1070.442822666", decimal64_0.toString());
      assertEquals((-1070.4429F), decimal64_0.floatValue(), 0.01F);
      assertEquals(7, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getNumberOfSecondaryStates();
      assertEquals(7, decimal64Array0.length);
      assertEquals(0, int0);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte) (-46), decimal64_0.byteValue());
      assertEquals((-1070.442822666), decimal64_0.doubleValue(), 0.01);
      assertEquals((short) (-1070), decimal64_0.shortValue());
      assertEquals((-1070.442822666), decimal64_0.getReal(), 0.01);
      assertEquals((-1070L), decimal64_0.longValue());
      assertEquals((-1070), decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("-1070.442822666", decimal64_0.toString());
      assertEquals((-1070.4429F), decimal64_0.floatValue(), 0.01F);
      assertEquals(7, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("0.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[9];
      Decimal64 decimal64_1 = new Decimal64(0.0);
      assertEquals(0.0, decimal64_1.doubleValue(), 0.01);
      assertFalse(decimal64_1.isNaN());
      assertEquals((short)0, decimal64_1.shortValue());
      assertEquals(0, decimal64_1.intValue());
      assertEquals(0.0, decimal64_1.getReal(), 0.01);
      assertEquals((byte)0, decimal64_1.byteValue());
      assertEquals(0L, decimal64_1.longValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals(0.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals("0.0", decimal64_1.toString());
      assertTrue(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array0[0] = decimal64_1;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      decimal64Array0[8] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[0][3];
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(9, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("0.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(9, fieldODEState0.getStateDimension());
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertNotNull(fieldODEState0);
      
      Decimal64 decimal64_2 = fieldODEState0.getTime();
      assertEquals(9, decimal64Array0.length);
      assertEquals(0, decimal64Array1.length);
      assertEquals(0, decimal64_0.intValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals("0.0", decimal64_0.toString());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(9, fieldODEState0.getStateDimension());
      assertEquals(0.0F, decimal64_2.floatValue(), 0.01F);
      assertEquals(0.0, decimal64_2.doubleValue(), 0.01);
      assertEquals((short)0, decimal64_2.shortValue());
      assertFalse(decimal64_2.isInfinite());
      assertEquals("0.0", decimal64_2.toString());
      assertEquals(0.0, decimal64_2.getReal(), 0.01);
      assertFalse(decimal64_2.isNaN());
      assertEquals(0, decimal64_2.intValue());
      assertEquals((byte)0, decimal64_2.byteValue());
      assertEquals(0L, decimal64_2.longValue());
      assertTrue(decimal64_0.equals((Object)decimal64_1));
      assertTrue(decimal64_2.equals((Object)decimal64_1));
      assertNotNull(decimal64_2);
      assertSame(decimal64_0, decimal64_2);
      assertNotSame(decimal64_0, decimal64_1);
      assertSame(decimal64_2, decimal64_0);
      assertNotSame(decimal64_2, decimal64_1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[4];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(4, dfpArray0.length);
      assertEquals(4, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArrayArray0 = null;
      Field<Dfp> field1 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray1 = fieldODEState0.copy(field1, (Dfp[][]) null);
      assertEquals(4, dfpArray0.length);
      assertEquals(4, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNull(dfpArray1);
      
      Field<Dfp> field2 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field2).getRuntimeClass();
      Dfp[][] dfpArray2 = new Dfp[2][8];
      dfpArray2[0] = dfpArray0;
      dfpArray2[1] = dfpArray0;
      // Undeclared exception!
      try { 
        fieldODEState0.copy(field2, dfpArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(2785.4620707);
      assertEquals("2785.4620707", decimal64_0.toString());
      assertEquals(2785.4620707, decimal64_0.getReal(), 0.01);
      assertEquals(2785, decimal64_0.intValue());
      assertEquals(2785L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte) (-31), decimal64_0.byteValue());
      assertEquals((short)2785, decimal64_0.shortValue());
      assertEquals(2785.4620707, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(2785.4622F, decimal64_0.floatValue(), 0.01F);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[4];
      Decimal64 decimal64_1 = new Decimal64((-1.0));
      assertEquals((-1.0), decimal64_1.getReal(), 0.01);
      assertFalse(decimal64_1.isInfinite());
      assertEquals((-1), decimal64_1.intValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-1L), decimal64_1.longValue());
      assertEquals("-1.0", decimal64_1.toString());
      assertEquals((byte) (-1), decimal64_1.byteValue());
      assertEquals((-1.0), decimal64_1.doubleValue(), 0.01);
      assertEquals((short) (-1), decimal64_1.shortValue());
      assertEquals((-1.0F), decimal64_1.floatValue(), 0.01F);
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array0[0] = decimal64_1;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(4, decimal64Array0.length);
      assertEquals("2785.4620707", decimal64_0.toString());
      assertEquals(2785.4620707, decimal64_0.getReal(), 0.01);
      assertEquals(2785, decimal64_0.intValue());
      assertEquals(2785L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte) (-31), decimal64_0.byteValue());
      assertEquals((short)2785, decimal64_0.shortValue());
      assertEquals(2785.4620707, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals(2785.4622F, decimal64_0.floatValue(), 0.01F);
      assertEquals(4, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertNotNull(fieldODEState0);
      
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Decimal64[][] decimal64Array1 = new Decimal64[3][4];
      decimal64Array1[0] = decimal64Array0;
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        fieldODEState0.copy(field1, decimal64Array1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2624.6149654622));
      assertFalse(decimal64_0.isNaN());
      assertEquals((-2624.6149654622), decimal64_0.doubleValue(), 0.01);
      assertEquals((-2624), decimal64_0.intValue());
      assertEquals((-2624.615F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-2624.6149654622), decimal64_0.getReal(), 0.01);
      assertEquals("-2624.6149654622", decimal64_0.toString());
      assertEquals((byte) (-64), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((short) (-2624), decimal64_0.shortValue());
      assertEquals((-2624L), decimal64_0.longValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64((-2043.68650106));
      assertEquals("-2043.68650106", decimal64_1.toString());
      assertEquals((-2043.68650106), decimal64_1.getReal(), 0.01);
      assertEquals((-2043.6865F), decimal64_1.floatValue(), 0.01F);
      assertEquals((short) (-2043), decimal64_1.shortValue());
      assertEquals((-2043.68650106), decimal64_1.doubleValue(), 0.01);
      assertFalse(decimal64_1.isNaN());
      assertEquals((byte)5, decimal64_1.byteValue());
      assertEquals((-2043L), decimal64_1.longValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals((-2043), decimal64_1.intValue());
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array0[3] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64((-2790.66));
      assertEquals((-2790.66), decimal64_2.doubleValue(), 0.01);
      assertEquals((-2790L), decimal64_2.longValue());
      assertEquals((byte)26, decimal64_2.byteValue());
      assertEquals((-2790.66F), decimal64_2.floatValue(), 0.01F);
      assertEquals((short) (-2790), decimal64_2.shortValue());
      assertEquals("-2790.66", decimal64_2.toString());
      assertFalse(decimal64_2.isInfinite());
      assertFalse(decimal64_2.isNaN());
      assertEquals((-2790.66), decimal64_2.getReal(), 0.01);
      assertEquals((-2790), decimal64_2.intValue());
      assertFalse(decimal64_2.equals((Object)decimal64_1));
      assertFalse(decimal64_2.equals((Object)decimal64_0));
      assertNotNull(decimal64_2);
      
      decimal64Array0[4] = decimal64_2;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[7] = decimal64_0;
      decimal64Array0[8] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[2][9];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(9, decimal64Array0.length);
      assertEquals(2, decimal64Array1.length);
      assertEquals(9, fieldODEState0.getStateDimension());
      assertEquals(2, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-2624.6149654622), decimal64_0.doubleValue(), 0.01);
      assertEquals((-2624), decimal64_0.intValue());
      assertEquals((-2624.615F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-2624.6149654622), decimal64_0.getReal(), 0.01);
      assertEquals("-2624.6149654622", decimal64_0.toString());
      assertEquals((byte) (-64), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((short) (-2624), decimal64_0.shortValue());
      assertEquals((-2624L), decimal64_0.longValue());
      assertFalse(decimal64_0.equals((Object)decimal64_2));
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertNotNull(fieldODEState0);
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryStateDimension(287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 286
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1451.890756));
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1451.890756), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-1451), decimal64_0.shortValue());
      assertEquals((-1451.8907F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1451.890756), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1451.890756", decimal64_0.toString());
      assertEquals((byte)85, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1451), decimal64_0.intValue());
      assertEquals((-1451L), decimal64_0.longValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[3];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, (Decimal64[][]) null);
      assertEquals(3, decimal64Array0.length);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1451.890756), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-1451), decimal64_0.shortValue());
      assertEquals((-1451.8907F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1451.890756), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1451.890756", decimal64_0.toString());
      assertEquals((byte)85, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1451), decimal64_0.intValue());
      assertEquals((-1451L), decimal64_0.longValue());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Decimal64[] decimal64Array1 = fieldODEState0.getState();
      assertEquals(3, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1451.890756), decimal64_0.getReal(), 0.01);
      assertEquals((short) (-1451), decimal64_0.shortValue());
      assertEquals((-1451.8907F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1451.890756), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1451.890756", decimal64_0.toString());
      assertEquals((byte)85, decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1451), decimal64_0.intValue());
      assertEquals((-1451L), decimal64_0.longValue());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      assertNotNull(decimal64Array1);
      assertNotSame(decimal64Array0, decimal64Array1);
      assertNotSame(decimal64Array1, decimal64Array0);
      
      Dfp dfp0 = null;
      Dfp[] dfpArray0 = new Dfp[4];
      dfpArray0[0] = null;
      dfpArray0[1] = null;
      dfpArray0[2] = dfpArray0[1];
      dfpArray0[3] = null;
      FieldODEState<Dfp> fieldODEState1 = null;
      try {
        fieldODEState1 = new FieldODEState<Dfp>((Dfp) null, dfpArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1560.730585512));
      assertEquals((short) (-1560), decimal64_0.shortValue());
      assertEquals((-1560.730585512), decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1560.7306F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1560), decimal64_0.intValue());
      assertEquals((-1560.730585512), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1560.730585512", decimal64_0.toString());
      assertEquals((byte) (-24), decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1560L), decimal64_0.longValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[4];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(4, decimal64Array0.length);
      assertEquals((short) (-1560), decimal64_0.shortValue());
      assertEquals((-1560.730585512), decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1560.7306F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1560), decimal64_0.intValue());
      assertEquals((-1560.730585512), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1560.730585512", decimal64_0.toString());
      assertEquals((byte) (-24), decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1560L), decimal64_0.longValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(4, fieldODEState0.getStateDimension());
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getSecondaryStateDimension(0);
      assertEquals(4, decimal64Array0.length);
      assertEquals(4, int0);
      assertEquals((short) (-1560), decimal64_0.shortValue());
      assertEquals((-1560.730585512), decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-1560.7306F), decimal64_0.floatValue(), 0.01F);
      assertEquals((-1560), decimal64_0.intValue());
      assertEquals((-1560.730585512), decimal64_0.doubleValue(), 0.01);
      assertEquals("-1560.730585512", decimal64_0.toString());
      assertEquals((byte) (-24), decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-1560L), decimal64_0.longValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(4, fieldODEState0.getStateDimension());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[1];
      decimal64Array0[0] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[5][8];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      decimal64Array1[2] = decimal64Array0;
      decimal64Array1[3] = decimal64Array0;
      decimal64Array1[4] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(1, decimal64Array0.length);
      assertEquals(5, decimal64Array1.length);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0L, decimal64_0.longValue());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1, fieldODEState0.getStateDimension());
      assertEquals(5, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[2];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(2, decimal64Array0.length);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Decimal64[] decimal64Array1 = fieldODEState0.getState();
      assertEquals(2, decimal64Array0.length);
      assertEquals(2, decimal64Array1.length);
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals((short)0, decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(0L, decimal64_0.longValue());
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
      assertNotNull(decimal64Array1);
      assertNotSame(decimal64Array0, decimal64Array1);
      assertNotSame(decimal64Array1, decimal64Array0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[4];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      Dfp[][] dfpArray1 = new Dfp[1][0];
      dfpArray1[0] = dfpArray0;
      FieldODEState<Dfp> fieldODEState0 = null;
      try {
        fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[2];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0, (Dfp[][]) null);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNotNull(fieldODEState0);
      
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray1 = fieldODEState0.copy(field0, (Dfp[][]) null);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNull(dfpArray1);
      
      Field<Dfp> field1 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray2 = fieldODEState0.copy((Field<Dfp>) null, (Dfp[][]) null);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNull(dfpArray2);
      
      Dfp[][] dfpArray3 = fieldODEState0.copy(field1, (Dfp[][]) null);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertNull(dfpArray3);
      
      Dfp[] dfpArray4 = fieldODEState0.getSecondaryState((byte)0);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, dfpArray4.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray4.equals((Object)dfpArray0));
      assertNotNull(dfpArray4);
      assertNotSame(dfpArray0, dfpArray4);
      assertNotSame(dfpArray4, dfpArray0);
      
      Dfp[][] dfpArray5 = fieldODEState0.copy((Field<Dfp>) null, (Dfp[][]) null);
      assertEquals(2, dfpArray0.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray4));
      assertNull(dfpArray5);
      assertNotSame(dfpArray0, dfpArray4);
      
      Decimal64 decimal64_0 = new Decimal64((-32767));
      assertEquals((-32767.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-32767L), decimal64_0.longValue());
      assertEquals((-32767.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-32767), decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-32767.0), decimal64_0.getReal(), 0.01);
      assertEquals("-32767.0", decimal64_0.toString());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-32767), decimal64_0.intValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[0];
      Decimal64[][] decimal64Array1 = new Decimal64[3][4];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      decimal64Array1[2] = decimal64Array0;
      FieldODEState<Decimal64> fieldODEState1 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, fieldODEState1.getStateDimension());
      assertEquals(3, fieldODEState1.getNumberOfSecondaryStates());
      assertEquals((-32767.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-32767L), decimal64_0.longValue());
      assertEquals((-32767.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-32767), decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-32767.0), decimal64_0.getReal(), 0.01);
      assertEquals("-32767.0", decimal64_0.toString());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-32767), decimal64_0.intValue());
      assertNotNull(fieldODEState1);
      
      Decimal64 decimal64_1 = fieldODEState1.getTime();
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, fieldODEState1.getStateDimension());
      assertEquals(3, fieldODEState1.getNumberOfSecondaryStates());
      assertEquals((-32767.0F), decimal64_1.floatValue(), 0.01F);
      assertEquals((-32767.0), decimal64_1.doubleValue(), 0.01);
      assertEquals((short) (-32767), decimal64_1.shortValue());
      assertFalse(decimal64_1.isInfinite());
      assertEquals((-32767.0), decimal64_1.getReal(), 0.01);
      assertEquals((-32767L), decimal64_1.longValue());
      assertEquals((-32767), decimal64_1.intValue());
      assertEquals("-32767.0", decimal64_1.toString());
      assertEquals((byte)1, decimal64_1.byteValue());
      assertFalse(decimal64_1.isNaN());
      assertEquals((-32767.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-32767L), decimal64_0.longValue());
      assertEquals((-32767.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-32767), decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-32767.0), decimal64_0.getReal(), 0.01);
      assertEquals("-32767.0", decimal64_0.toString());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-32767), decimal64_0.intValue());
      assertNotNull(decimal64_1);
      assertSame(decimal64_1, decimal64_0);
      assertSame(decimal64_0, decimal64_1);
      
      Dfp[] dfpArray6 = fieldODEState0.getState();
      assertEquals(2, dfpArray0.length);
      assertEquals(2, dfpArray6.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray4));
      assertFalse(dfpArray6.equals((Object)dfpArray4));
      assertFalse(dfpArray6.equals((Object)dfpArray0));
      assertNotNull(dfpArray6);
      assertNotSame(dfpArray0, dfpArray4);
      assertNotSame(dfpArray0, dfpArray6);
      assertNotSame(dfpArray6, dfpArray4);
      assertNotSame(dfpArray6, dfpArray0);
      
      Decimal64 decimal64_2 = fieldODEState1.getTime();
      assertEquals(0, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(0, fieldODEState1.getStateDimension());
      assertEquals(3, fieldODEState1.getNumberOfSecondaryStates());
      assertEquals((-32767L), decimal64_2.longValue());
      assertFalse(decimal64_2.isInfinite());
      assertEquals((-32767.0F), decimal64_2.floatValue(), 0.01F);
      assertEquals((short) (-32767), decimal64_2.shortValue());
      assertEquals("-32767.0", decimal64_2.toString());
      assertEquals((-32767), decimal64_2.intValue());
      assertEquals((-32767.0), decimal64_2.getReal(), 0.01);
      assertEquals((byte)1, decimal64_2.byteValue());
      assertEquals((-32767.0), decimal64_2.doubleValue(), 0.01);
      assertFalse(decimal64_2.isNaN());
      assertEquals((-32767.0), decimal64_0.doubleValue(), 0.01);
      assertEquals((-32767L), decimal64_0.longValue());
      assertEquals((-32767.0F), decimal64_0.floatValue(), 0.01F);
      assertEquals((short) (-32767), decimal64_0.shortValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals((-32767.0), decimal64_0.getReal(), 0.01);
      assertEquals("-32767.0", decimal64_0.toString());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((-32767), decimal64_0.intValue());
      assertNotNull(decimal64_2);
      assertSame(decimal64_2, decimal64_0);
      assertSame(decimal64_2, decimal64_1);
      assertSame(decimal64_0, decimal64_1);
      assertSame(decimal64_0, decimal64_2);
      
      Dfp[] dfpArray7 = fieldODEState0.getState();
      assertEquals(2, dfpArray0.length);
      assertEquals(2, dfpArray7.length);
      assertEquals(2, fieldODEState0.getStateDimension());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertFalse(dfpArray0.equals((Object)dfpArray4));
      assertFalse(dfpArray0.equals((Object)dfpArray6));
      assertFalse(dfpArray7.equals((Object)dfpArray0));
      assertFalse(dfpArray7.equals((Object)dfpArray6));
      assertFalse(dfpArray7.equals((Object)dfpArray4));
      assertNotNull(dfpArray7);
      assertNotSame(dfpArray0, dfpArray7);
      assertNotSame(dfpArray0, dfpArray4);
      assertNotSame(dfpArray0, dfpArray6);
      assertNotSame(dfpArray7, dfpArray0);
      assertNotSame(dfpArray7, dfpArray6);
      assertNotSame(dfpArray7, dfpArray4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[6];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      Dfp[][] dfpArray1 = new Dfp[5][9];
      dfpArray1[1] = dfpArray0;
      dfpArray1[2] = dfpArray0;
      dfpArray1[3] = dfpArray0;
      dfpArray1[4] = dfpArray0;
      Decimal64 decimal64_0 = new Decimal64((byte)1);
      assertEquals("1.0", decimal64_0.toString());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[3];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      Decimal64[][] decimal64Array1 = new Decimal64[3][9];
      decimal64Array1[0] = decimal64Array0;
      decimal64Array1[1] = decimal64Array0;
      Decimal64[] decimal64Array2 = new Decimal64[5];
      assertFalse(decimal64Array2.equals((Object)decimal64Array0));
      
      decimal64Array2[1] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(10000);
      assertEquals(10000.0, decimal64_1.getReal(), 0.01);
      assertEquals((short)10000, decimal64_1.shortValue());
      assertFalse(decimal64_1.isInfinite());
      assertFalse(decimal64_1.isNaN());
      assertEquals((byte)16, decimal64_1.byteValue());
      assertEquals(10000, decimal64_1.intValue());
      assertEquals(10000.0F, decimal64_1.floatValue(), 0.01F);
      assertEquals(10000.0, decimal64_1.doubleValue(), 0.01);
      assertEquals("10000.0", decimal64_1.toString());
      assertEquals(10000L, decimal64_1.longValue());
      assertFalse(decimal64_1.equals((Object)decimal64_0));
      assertNotNull(decimal64_1);
      
      decimal64Array2[2] = decimal64_1;
      decimal64Array2[3] = decimal64_0;
      Decimal64 decimal64_2 = new Decimal64(1729.3728778);
      assertEquals((byte) (-63), decimal64_2.byteValue());
      assertFalse(decimal64_2.isInfinite());
      assertEquals((short)1729, decimal64_2.shortValue());
      assertEquals(1729L, decimal64_2.longValue());
      assertEquals(1729, decimal64_2.intValue());
      assertFalse(decimal64_2.isNaN());
      assertEquals(1729.3729F, decimal64_2.floatValue(), 0.01F);
      assertEquals("1729.3728778", decimal64_2.toString());
      assertEquals(1729.3728778, decimal64_2.doubleValue(), 0.01);
      assertEquals(1729.3728778, decimal64_2.getReal(), 0.01);
      assertFalse(decimal64_2.equals((Object)decimal64_0));
      assertFalse(decimal64_2.equals((Object)decimal64_1));
      assertNotNull(decimal64_2);
      
      decimal64Array2[4] = decimal64_2;
      decimal64Array1[2] = decimal64Array2;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, decimal64Array1);
      assertEquals(3, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(3, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals("1.0", decimal64_0.toString());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertFalse(decimal64Array0.equals((Object)decimal64Array2));
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertFalse(decimal64_0.equals((Object)decimal64_2));
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getNumberOfSecondaryStates();
      assertEquals(3, decimal64Array0.length);
      assertEquals(3, decimal64Array1.length);
      assertEquals(3, int0);
      assertEquals(3, fieldODEState0.getStateDimension());
      assertEquals(3, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals("1.0", decimal64_0.toString());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isInfinite());
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)1, decimal64_0.shortValue());
      assertFalse(decimal64Array0.equals((Object)decimal64Array2));
      assertFalse(decimal64_0.equals((Object)decimal64_1));
      assertFalse(decimal64_0.equals((Object)decimal64_2));
      assertNotSame(decimal64Array0, decimal64Array2);
      assertNotSame(decimal64_0, decimal64_1);
      assertNotSame(decimal64_0, decimal64_2);
      
      FieldODEState<Dfp> fieldODEState1 = null;
      try {
        fieldODEState1 = new FieldODEState<Dfp>(dfp0, dfpArray0, dfpArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1.0);
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("1.0", decimal64_0.toString());
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1L, decimal64_0.longValue());
      assertNotNull(decimal64_0);
      
      Decimal64[] decimal64Array0 = new Decimal64[5];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0);
      assertEquals(5, decimal64Array0.length);
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("1.0", decimal64_0.toString());
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(5, fieldODEState0.getStateDimension());
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getStateDimension();
      assertEquals(5, decimal64Array0.length);
      assertEquals(5, int0);
      assertEquals(1, decimal64_0.intValue());
      assertEquals(1.0, decimal64_0.getReal(), 0.01);
      assertFalse(decimal64_0.isNaN());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("1.0", decimal64_0.toString());
      assertEquals((short)1, decimal64_0.shortValue());
      assertEquals(1.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(1.0, decimal64_0.doubleValue(), 0.01);
      assertEquals((byte)1, decimal64_0.byteValue());
      assertEquals(1L, decimal64_0.longValue());
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(5, fieldODEState0.getStateDimension());
      
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[8];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      dfpArray0[3] = dfp0;
      dfpArray0[4] = dfp0;
      dfpArray0[5] = dfp0;
      dfpArray0[6] = dfp0;
      dfpArray0[7] = dfp0;
      FieldODEState<Dfp> fieldODEState1 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(8, dfpArray0.length);
      assertEquals(0, fieldODEState1.getNumberOfSecondaryStates());
      assertEquals(8, fieldODEState1.getStateDimension());
      assertNotNull(fieldODEState1);
      
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      Dfp[][] dfpArray1 = new Dfp[7][4];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
      dfpArray1[2] = dfpArray0;
      Dfp[] dfpArray2 = new Dfp[4];
      assertFalse(dfpArray2.equals((Object)dfpArray0));
      
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray1[3] = dfpArray2;
      dfpArray1[4] = dfpArray0;
      dfpArray1[5] = dfpArray0;
      dfpArray1[6] = dfpArray0;
      // Undeclared exception!
      try { 
        fieldODEState1.copy(field0, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[3];
      dfpArray0[0] = dfp0;
      dfpArray0[1] = dfp0;
      dfpArray0[2] = dfp0;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      assertEquals(3, dfpArray0.length);
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(3, fieldODEState0.getStateDimension());
      assertNotNull(fieldODEState0);
      
      int int0 = fieldODEState0.getSecondaryStateDimension(0);
      assertEquals(3, dfpArray0.length);
      assertEquals(3, int0);
      assertEquals(0, fieldODEState0.getNumberOfSecondaryStates());
      assertEquals(3, fieldODEState0.getStateDimension());
      
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryStateDimension((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[1];
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray0[0] = dfp1;
      FieldODEState<Dfp> fieldODEState0 = new FieldODEState<Dfp>(dfp0, dfpArray0);
      fieldODEState0.getNumberOfSecondaryStates();
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray1 = new Dfp[3][4];
      dfpArray1[0] = dfpArray0;
      dfpArray1[1] = dfpArray0;
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64[] decimal64Array0 = new Decimal64[9];
      decimal64Array0[0] = decimal64_0;
      decimal64Array0[1] = decimal64_0;
      decimal64Array0[2] = decimal64_0;
      decimal64Array0[3] = decimal64_0;
      decimal64Array0[4] = decimal64_0;
      decimal64Array0[5] = decimal64_0;
      decimal64Array0[6] = decimal64_0;
      decimal64Array0[8] = decimal64_0;
      FieldODEState<Decimal64> fieldODEState0 = new FieldODEState<Decimal64>(decimal64_0, decimal64Array0, (Decimal64[][]) null);
      fieldODEState0.getState();
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      fieldODEState0.copy(field0, (Decimal64[][]) null);
      // Undeclared exception!
      try { 
        fieldODEState0.getSecondaryState((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }
}

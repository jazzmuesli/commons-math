/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:21:31 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldExpandableODE;
import org.apache.commons.math4.ode.FieldODEState;
import org.apache.commons.math4.ode.nonstiff.DormandPrince54FieldIntegrator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaFieldIntegrator_ESTest extends EmbeddedRungeKuttaFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1771.2225);
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 0.0, 1771.2225, 0.0, (-469.1));
      Decimal64 decimal64_1 = new Decimal64((-2262.3));
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldEquationsMapper0).mapState(nullable(org.apache.commons.math4.ode.FieldODEState.class));
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = (FieldExpandableODE<Decimal64>) mock(FieldExpandableODE.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldExpandableODE0).computeDerivatives(any(org.apache.commons.math4.util.Decimal64.class) , any(org.apache.commons.math4.util.Decimal64[].class));
      doReturn(fieldEquationsMapper0).when(fieldExpandableODE0).getMapper();
      FieldODEState<Decimal64> fieldODEState0 = (FieldODEState<Decimal64>) mock(FieldODEState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fieldODEState0).getStateDimension();
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(fieldODEState0).getTime();
      // Undeclared exception!
      try { 
        dormandPrince54FieldIntegrator0.integrate(fieldExpandableODE0, fieldODEState0, decimal64_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1771.2225);
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 1771.2225, 1771.2225, 1771.2225, (-469.1));
      int int0 = dormandPrince54FieldIntegrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2262.3));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 0.0, (-2262.3), 0.0, (-469.1));
      Decimal64 decimal64_1 = dormandPrince54FieldIntegrator0.fraction(0, 0);
      assertEquals(Double.NaN, decimal64_1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2262.3));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 0.0, (-2262.3), 0.0, (-469.1));
      FieldExpandableODE<Decimal64> fieldExpandableODE0 = (FieldExpandableODE<Decimal64>) mock(FieldExpandableODE.class, new ViolatedAssumptionAnswer());
      FieldODEState<Decimal64> fieldODEState0 = (FieldODEState<Decimal64>) mock(FieldODEState.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0).when(fieldODEState0).getTime();
      try { 
        dormandPrince54FieldIntegrator0.integrate(fieldExpandableODE0, fieldODEState0, decimal64_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math4.ode.AbstractFieldIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(1771.2225);
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 1771.2225, 1771.2225, 1771.2225, (-469.1));
      Decimal64 decimal64_1 = dormandPrince54FieldIntegrator0.getSafety();
      assertEquals("1772.1225000000002", decimal64_1.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-2262.3));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      DormandPrince54FieldIntegrator<Decimal64> dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Decimal64>(field0, 0.0, (-2262.3), 0.0, (-469.1));
      dormandPrince54FieldIntegrator0.setSafety(decimal64_0);
      assertEquals((-2262.3), decimal64_0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(dfp0).sqrt();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp0).when(dfp1).multiply(any(org.apache.commons.math4.dfp.Dfp.class));
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).add(anyDouble());
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(dfp3).add(anyDouble());
      doReturn((Dfp) null).when(dfp3).negate();
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(dfp3).when(field0).getOne();
      doReturn((Class) null).when(field0).getRuntimeClass();
      doReturn(dfp2, dfp3).when(field0).getZero();
      double[] doubleArray0 = new double[2];
      DormandPrince54FieldIntegrator<Dfp> dormandPrince54FieldIntegrator0 = null;
      try {
        dormandPrince54FieldIntegrator0 = new DormandPrince54FieldIntegrator<Dfp>(field0, 0.0, 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}

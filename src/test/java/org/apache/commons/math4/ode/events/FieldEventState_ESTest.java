/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:58:15 GMT 2019
 */

package org.apache.commons.math4.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.analysis.solvers.BracketedRealFieldUnivariateSolver;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.events.FieldEventHandler;
import org.apache.commons.math4.ode.events.FieldEventState;
import org.apache.commons.math4.ode.sampling.FieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FieldEventState_ESTest extends FieldEventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(dfp0).getReal();
      FieldEventHandler<Dfp> fieldEventHandler0 = (FieldEventHandler<Dfp>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(dfp0).when(fieldEventHandler0).g(nullable(org.apache.commons.math4.ode.FieldODEStateAndDerivative.class));
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).abs();
      BracketedRealFieldUnivariateSolver<Dfp> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Dfp>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Dfp> fieldEventState0 = new FieldEventState<Dfp>(fieldEventHandler0, 0.0, dfp2, (-5508), bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(fieldODEStateAndDerivative0).getTime();
      fieldEventState0.stepAccepted(fieldODEStateAndDerivative0);
      assertEquals((-5508), fieldEventState0.getMaxIterationCount());
      assertEquals(0.0, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64(0.0);
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 0.0, decimal64_0, 0, bracketedRealFieldUnivariateSolver0);
      int int0 = fieldEventState0.getMaxIterationCount();
      assertEquals(0.0, fieldEventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64((-1300.6619274521));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (-1300.6619274521), decimal64_0, (-1023), bracketedRealFieldUnivariateSolver0);
      int int0 = fieldEventState0.getMaxIterationCount();
      assertEquals((-1023), int0);
      assertEquals((-1300.6619274521), fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64(0.0);
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 0.0, decimal64_0, 3996, bracketedRealFieldUnivariateSolver0);
      double double0 = fieldEventState0.getMaxCheckInterval();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3996, fieldEventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64((-1272.414));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (-1.0), decimal64_0, (-1455), bracketedRealFieldUnivariateSolver0);
      double double0 = fieldEventState0.getMaxCheckInterval();
      assertEquals((-1455), fieldEventState0.getMaxIterationCount());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(dfp0).abs();
      FieldEventState<Dfp> fieldEventState0 = new FieldEventState<Dfp>((FieldEventHandler<Dfp>) null, Double.NEGATIVE_INFINITY, dfp0, 1, (BracketedRealFieldUnivariateSolver<Dfp>) null);
      fieldEventState0.getEventHandler();
      assertEquals(1, fieldEventState0.getMaxIterationCount());
      assertEquals(Double.NEGATIVE_INFINITY, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(dfp0).abs();
      BracketedRealFieldUnivariateSolver<Dfp> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Dfp>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Dfp> fieldEventState0 = new FieldEventState<Dfp>((FieldEventHandler<Dfp>) null, Double.NEGATIVE_INFINITY, dfp0, (-32767), bracketedRealFieldUnivariateSolver0);
      fieldEventState0.getConvergence();
      assertEquals(Double.NEGATIVE_INFINITY, fieldEventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-32767), fieldEventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldEventHandler0).g(nullable(org.apache.commons.math4.ode.FieldODEStateAndDerivative.class));
      Decimal64 decimal64_0 = new Decimal64((-2097.55840209));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (-2097.55840209), decimal64_0, 0, bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      // Undeclared exception!
      try { 
        fieldEventState0.stepAccepted(fieldODEStateAndDerivative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.FieldEventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-3020.4788975769434));
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 1302.542272829, decimal64_0, 3000, bracketedRealFieldUnivariateSolver0);
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getPreviousState();
      // Undeclared exception!
      try { 
        fieldEventState0.reinitializeBegin(fieldStepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.FieldEventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (-2700.18211625), decimal64_0, 0, bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getCurrentState();
      doReturn(false).when(fieldStepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        fieldEventState0.evaluateStep(fieldStepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.FieldEventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = null;
      try {
        fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (byte)1, (Decimal64) null, 1892, bracketedRealFieldUnivariateSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.FieldEventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64(1597.3664);
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, Double.NEGATIVE_INFINITY, decimal64_0, 1, bracketedRealFieldUnivariateSolver0);
      fieldEventState0.reset((FieldODEStateAndDerivative<Decimal64>) null);
      assertEquals(Double.NEGATIVE_INFINITY, fieldEventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1, fieldEventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 2311.0, decimal64_0, (-125), bracketedRealFieldUnivariateSolver0);
      boolean boolean0 = fieldEventState0.stop();
      assertEquals(2311.0, fieldEventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals((-125), fieldEventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-3020.4788975769434));
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldEventHandler0).g(nullable(org.apache.commons.math4.ode.FieldODEStateAndDerivative.class));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 1302.542272829, decimal64_0, 3000, bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldODEStateAndDerivative0).getTime();
      fieldEventState0.stepAccepted(fieldODEStateAndDerivative0);
      assertEquals(3000, fieldEventState0.getMaxIterationCount());
      assertEquals(1302.542272829, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldEventHandler0).g(nullable(org.apache.commons.math4.ode.FieldODEStateAndDerivative.class));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 2311.0, decimal64_0, (-125), bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldODEStateAndDerivative0).getTime();
      fieldEventState0.stepAccepted(fieldODEStateAndDerivative0);
      Decimal64 decimal64_1 = fieldEventState0.getEventTime();
      assertEquals((-125), fieldEventState0.getMaxIterationCount());
      assertNotNull(decimal64_1);
      assertEquals(Integer.MIN_VALUE, decimal64_1.intValue());
      assertEquals(2311.0, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 2311.0, decimal64_0, (-125), bracketedRealFieldUnivariateSolver0);
      // Undeclared exception!
      try { 
        fieldEventState0.getEventTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.events.FieldEventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldEventHandler0).g(nullable(org.apache.commons.math4.ode.FieldODEStateAndDerivative.class));
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, (-2700.18211625), decimal64_0, 0, bracketedRealFieldUnivariateSolver0);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldODEStateAndDerivative0).getTime();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getPreviousState();
      fieldEventState0.reinitializeBegin(fieldStepInterpolator0);
      assertEquals(0, fieldEventState0.getMaxIterationCount());
      assertEquals((-2700.18211625), fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 2311.0, decimal64_0, (-125), bracketedRealFieldUnivariateSolver0);
      fieldEventState0.getConvergence();
      assertEquals((-125), fieldEventState0.getMaxIterationCount());
      assertEquals(2311.0, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.7249995199969751);
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, 2311.0, decimal64_0, (-125), bracketedRealFieldUnivariateSolver0);
      double double0 = fieldEventState0.getMaxCheckInterval();
      assertEquals((-125), fieldEventState0.getMaxIterationCount());
      assertEquals(2311.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      Decimal64 decimal64_0 = new Decimal64(1597.3664);
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, Double.NEGATIVE_INFINITY, decimal64_0, 1, bracketedRealFieldUnivariateSolver0);
      int int0 = fieldEventState0.getMaxIterationCount();
      assertEquals(1, int0);
      assertEquals(Double.NEGATIVE_INFINITY, fieldEventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldEventHandler<Decimal64> fieldEventHandler0 = (FieldEventHandler<Decimal64>) mock(FieldEventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fieldEventHandler0).toString();
      Decimal64 decimal64_0 = new Decimal64(1597.3664);
      BracketedRealFieldUnivariateSolver<Decimal64> bracketedRealFieldUnivariateSolver0 = (BracketedRealFieldUnivariateSolver<Decimal64>) mock(BracketedRealFieldUnivariateSolver.class, new ViolatedAssumptionAnswer());
      FieldEventState<Decimal64> fieldEventState0 = new FieldEventState<Decimal64>(fieldEventHandler0, Double.NEGATIVE_INFINITY, decimal64_0, 1, bracketedRealFieldUnivariateSolver0);
      fieldEventState0.getEventHandler();
      assertEquals(Double.NEGATIVE_INFINITY, fieldEventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1, fieldEventState0.getMaxIterationCount());
  }
}

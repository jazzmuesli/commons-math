/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:42:04 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator;
import org.apache.commons.math4.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DormandPrince54StepInterpolator_ESTest extends DormandPrince54StepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.03709200011850479;
      doubleArray0[1] = 1887.6743;
      doubleArray0[2] = (-474.0);
      doubleArray0[3] = 2.675424484351598;
      doubleArray0[4] = (-5308.8901);
      doubleArray0[5] = 1158.90651463;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 3.0;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {0.03709200011850479, 1887.6743, (-474.0), 2.675424484351598, (-5308.8901), 1158.90651463, 1.0, 3.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, equationsMapperArray0.length);
      assertEquals(7, doubleArray1.length);
      
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 208.996877;
      doubleArray0[2] = 0.0;
      dormandPrince54StepInterpolator0.previousState = doubleArray0;
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      doubleArray0[3] = (-904.3);
      doubleArray0[4] = 0.0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-709)).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, (double[][]) null, false, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-346.46);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07407407407407407;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      boolean boolean0 = true;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper1).getDimension();
      equationsMapperArray0[0] = equationsMapper1;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertArrayEquals(new double[] {(-346.46), 0.0, 0.07407407407407407}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, equationsMapperArray0.length);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(27.94888452941996, 0.07407407407407407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-689.067367605);
      doubleArray0[1] = 1578.05543331;
      doubleArray0[2] = 336.0;
      doubleArray0[3] = 0.03709200011850479;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (-210.244166072);
      doubleArray0[6] = (-131.0);
      doubleArray0[7] = (-1.1270175653862835);
      doubleArray0[8] = 2224.01447572359;
      dormandPrince54StepInterpolator0.previousState = doubleArray0;
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(969.0, 969.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      dormandPrince54StepInterpolator1.setSoftPreviousTime(0.0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator2 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator1.doCopy();
      assertNotNull(dormandPrince54StepInterpolator2);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator2.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator1);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      boolean boolean0 = false;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator0.doCopy();
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 562.1802;
      doubleArray2[1] = (-859.3026);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(9, equationsMapperArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(doubleArray0, doubleArray2);
      
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(562.1802, (-859.3026));
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      double double0 = 1.7976931348623157E308;
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(1.7976931348623157E308, 0.0);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(9, equationsMapperArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(doubleArray0, doubleArray2);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      dormandPrince54StepInterpolator0.integrator = null;
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      dormandPrince54StepInterpolator0.setSoftCurrentTime((-1349.0));
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1349.0), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      dormandPrince54StepInterpolator0.storeTime((-2622.903090613848));
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      dormandPrince54StepInterpolator0.storeTime((-2622.903090613848));
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      dormandPrince54StepInterpolator0.storeTime((-2622.903090613848));
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator2 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator0.doCopy();
      assertNotNull(dormandPrince54StepInterpolator2);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator2.getCurrentTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator2.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator0);
      
      AbstractIntegrator abstractIntegrator1 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1594.90879883;
      doubleArray0[1] = (-2622.903090613848);
      doubleArray0[2] = (-2622.903090613848);
      doubleArray0[3] = (-1349.0);
      doubleArray0[4] = (-2622.903090613848);
      doubleArray0[5] = (-1349.0);
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1594.90879883;
      doubleArray2[1] = (-2622.903090613848);
      doubleArray2[2] = (-2622.903090613848);
      doubleArray2[3] = (-1349.0);
      doubleArray2[4] = 1594.90879883;
      doubleArray2[5] = (-1349.0);
      doubleArray2[6] = (-1349.0);
      doubleArray1[3] = doubleArray2;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      dormandPrince54StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-2622.903090613848), dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertArrayEquals(new double[] {1594.90879883, (-2622.903090613848), (-2622.903090613848), (-1349.0), (-2622.903090613848), (-1349.0)}, doubleArray0, 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator2));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator2));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, equationsMapperArray0.length);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator2);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 204.4928;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-2230.2093988);
      doubleArray0[3] = (-3917.0);
      doubleArray0[4] = 518.0898692618;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1149.44547;
      doubleArray0[7] = 157.0;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 204.4928;
      doubleArray2[1] = 1149.44547;
      doubleArray2[2] = 320.0;
      doubleArray2[3] = 157.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      equationsMapperArray0[0] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertArrayEquals(new double[] {204.4928, 3.0, (-2230.2093988), (-3917.0), 518.0898692618, 0.0, 1149.44547, 157.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(8, doubleArray0.length);
      assertEquals(1, equationsMapperArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-81.650251290271);
      doubleArray0[1] = (-1.0);
      dormandPrince54StepInterpolator0.storeTime(0.0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      
      doubleArray0[2] = (-289.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper1).getDimension();
      equationsMapperArray0[0] = equationsMapper1;
      dormandPrince54StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {(-81.650251290271), (-1.0), (-289.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, equationsMapperArray0.length);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator2 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator0.doCopy();
      assertNotNull(dormandPrince54StepInterpolator2);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator2.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator2.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator0);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator3 = null;
      try {
        dormandPrince54StepInterpolator3 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2107.9393);
      doubleArray0[4] = 0.13095238095238096;
      doubleArray0[5] = 58.9982;
      doubleArray0[6] = 683.68916;
      doubleArray0[7] = (-3523.0);
      doubleArray0[8] = 0.0;
      double[][] doubleArray1 = new double[1][8];
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 58.9982;
      doubleArray2[1] = 683.68916;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2107.9393);
      doubleArray2[6] = (-3523.0);
      doubleArray1[0] = doubleArray2;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      dormandPrince54StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2107.9393), 0.13095238095238096, 58.9982, 683.68916, (-3523.0), 0.0}, doubleArray0, 0.01);
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(9, doubleArray0.length);
      assertEquals(6, equationsMapperArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(doubleArray0, doubleArray2);
      
      double double0 = (-628.4719);
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator1.computeInterpolatedStateAndDerivatives((-628.4719), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      int int0 = 0;
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray1[3] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray1[4] = doubleArray3;
      boolean boolean0 = false;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(6, equationsMapperArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.getInterpolatedSecondaryState(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince54StepInterpolator0.finalizeStep();
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince54StepInterpolator0.storeTime(0.0);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[1];
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator0.doCopy();
      assertNotNull(dormandPrince54StepInterpolator1);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(0.0, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[0][6];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, (EquationsMapper[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      dormandPrince54StepInterpolator0.storeTime(4499.6768761647);
      assertEquals(4499.6768761647, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(4499.6768761647, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(4499.6768761647, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator2 = (DormandPrince54StepInterpolator)dormandPrince54StepInterpolator1.doCopy();
      assertNotNull(dormandPrince54StepInterpolator2);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator2.isForward());
      assertFalse(dormandPrince54StepInterpolator0.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator1));
      assertFalse(dormandPrince54StepInterpolator2.equals((Object)dormandPrince54StepInterpolator0));
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator0, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator2);
      assertNotSame(dormandPrince54StepInterpolator1, dormandPrince54StepInterpolator0);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator1);
      assertNotSame(dormandPrince54StepInterpolator2, dormandPrince54StepInterpolator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, equationsMapperArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[][] doubleArray0 = new double[0][6];
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = null;
      equationsMapperArray0[1] = null;
      equationsMapperArray0[2] = equationsMapperArray0[1];
      equationsMapperArray0[3] = null;
      equationsMapperArray0[4] = null;
      equationsMapperArray0[5] = null;
      equationsMapperArray0[6] = null;
      equationsMapperArray0[7] = null;
      equationsMapperArray0[8] = null;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator1.reinitialize((AbstractIntegrator) null, (double[]) null, doubleArray0, true, (EquationsMapper) null, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator1 = new DormandPrince54StepInterpolator(dormandPrince54StepInterpolator0);
      assertNotNull(dormandPrince54StepInterpolator1);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince54StepInterpolator1.equals((Object)dormandPrince54StepInterpolator0));
      
      double double0 = 0.6510416666666666;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(0.6510416666666666, 0.6510416666666666);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      assertNotNull(dormandPrince54StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives((-1249.2949), (-1.7672812570757455));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      AbstractIntegrator abstractIntegrator0 = dormandPrince54StepInterpolator0.integrator;
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[21];
      doubleArray2[1] = (-859.3026);
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(359, 359, 359, 359, 6).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(562.1802, (-859.3026));
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(1.7976931348623157E308, 0.0);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.03709200011850479;
      doubleArray0[1] = 0.03709200011850479;
      doubleArray0[2] = (-474.0);
      doubleArray0[3] = 2.675424484351598;
      doubleArray0[4] = (-5308.8901);
      doubleArray0[5] = 1158.90651463;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 3.0;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(360, 3, 3, 49, 49).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      dormandPrince54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      dormandPrince54StepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
      assertFalse(dormandPrince54StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double double0 = 2275.195838316;
      dormandPrince54StepInterpolator0.storeTime(2275.195838316);
      dormandPrince54StepInterpolator0.doCopy();
      int int0 = 2100;
      // Undeclared exception!
      try { 
        dormandPrince54StepInterpolator0.shift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
  }
}

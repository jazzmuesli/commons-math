/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:29:23 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpDec;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MidpointFieldStepInterpolator_ESTest extends MidpointFieldStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][9];
      Dfp[] dfpArray1 = new Dfp[4];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[3];
      dfpArray2[0] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[2];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[1];
      dfpArray0[3] = dfpArray4;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, dfp0, dfpArray4[0], dfp0, dfpArray2[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(dfp0).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][5];
      Dfp[] dfpArray1 = new Dfp[1];
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[5];
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp1;
      dfpArray2[2] = dfp1;
      dfpArray2[3] = dfp1;
      dfpArray2[4] = dfp1;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[4];
      dfpArray3[0] = dfp1;
      dfpArray2[2] = dfp1;
      dfpArray3[2] = dfp1;
      dfpArray3[3] = dfp1;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[1];
      dfpArray4[0] = dfp1;
      dfpArray0[3] = dfpArray4;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      Field<Dfp> field1 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field1).getRuntimeClass();
      doReturn((Object) null).when(field1).getZero();
      Dfp[][] dfpArray5 = new Dfp[0][0];
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator1 = midpointFieldStepInterpolator0.create(field1, true, dfpArray5, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper1);
      Field<Dfp> field2 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field2).getRuntimeClass();
      FieldEquationsMapper<Dfp> fieldEquationsMapper2 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator1.create(field2, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<DfpDec> class0 = DfpDec.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(dfp0).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[0][2];
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      midpointFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn((Dfp) null).when(dfpField0).getOne();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp2).getField();
      doReturn(dfp1).when(dfp2).multiply(anyInt());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, dfp2, dfp2, dfp2, dfp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[1][7];
      Dfp[] dfpArray1 = new Dfp[8];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      doReturn((Dfp) null).when(dfp0).multiply(anyInt());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray1[5] = dfp0;
      dfpArray1[6] = dfp0;
      dfpArray1[7] = dfp0;
      dfpArray0[0] = dfpArray1;
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, dfp0, dfp0, dfp0, dfp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<DfpDec> class0 = DfpDec.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[0][2];
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      midpointFieldStepInterpolator0.getGlobalCurrentState();
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      doReturn((Dfp) null).when(dfp0).multiply(anyInt());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator0.computeInterpolatedStateAndDerivatives(fieldEquationsMapper1, dfp0, dfp0, dfp0, dfp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.MidpointFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-1.0));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      boolean boolean0 = false;
      Decimal64[][] decimal64Array0 = new Decimal64[1][2];
      Decimal64[] decimal64Array1 = new Decimal64[7];
      Decimal64 decimal64_1 = new Decimal64((-2295.043025399));
      decimal64Array1[0] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64((-743.10091));
      decimal64Array1[1] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64((-2295.043025399));
      decimal64Array1[2] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64((-2295.043025399));
      decimal64Array1[3] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64((-2295.043025399));
      decimal64Array1[4] = decimal64_5;
      Decimal64 decimal64_6 = new Decimal64((-1540.2347227235944));
      decimal64Array1[5] = decimal64_6;
      Decimal64 decimal64_7 = new Decimal64((-2295.043025399));
      decimal64Array1[6] = decimal64_7;
      decimal64Array0[0] = decimal64Array1;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field1).getRuntimeClass();
      doReturn((Object) null).when(field1).getZero();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator1 = midpointFieldStepInterpolator0.create(field1, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper1);
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator1.getInterpolatedState(decimal64_4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<DfpDec> class0 = DfpDec.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      boolean boolean0 = true;
      Dfp[][] dfpArray0 = new Dfp[2][4];
      Dfp[] dfpArray1 = new Dfp[4];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[0];
      dfpArray0[1] = dfpArray2;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = null;
      try {
        midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      Decimal64[][] decimal64Array0 = new Decimal64[7][2];
      Decimal64[] decimal64Array1 = new Decimal64[9];
      Decimal64 decimal64_0 = new Decimal64(26.97563392);
      decimal64Array1[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(26.97563392);
      decimal64Array1[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(1.0);
      decimal64Array1[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(26.97563392);
      decimal64Array1[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(1.0);
      decimal64Array1[4] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64(26.97563392);
      decimal64Array1[5] = decimal64_5;
      Decimal64 decimal64_6 = new Decimal64(26.97563392);
      decimal64Array1[6] = decimal64_6;
      Decimal64 decimal64_7 = new Decimal64(1.0);
      decimal64Array1[7] = decimal64_7;
      Decimal64 decimal64_8 = new Decimal64(26.97563392);
      decimal64Array1[8] = decimal64_8;
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[6];
      decimal64Array2[0] = decimal64_4;
      Decimal64 decimal64_9 = new Decimal64((-1.0));
      decimal64Array2[1] = decimal64_9;
      decimal64Array2[2] = decimal64_4;
      decimal64Array2[3] = decimal64_6;
      decimal64Array2[4] = decimal64_8;
      decimal64Array2[5] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      Decimal64[] decimal64Array3 = new Decimal64[3];
      decimal64Array3[0] = decimal64_7;
      decimal64Array3[1] = decimal64_8;
      decimal64Array3[2] = decimal64_7;
      decimal64Array0[2] = decimal64Array3;
      Decimal64[] decimal64Array4 = new Decimal64[3];
      decimal64Array4[0] = decimal64_6;
      decimal64Array4[1] = decimal64_9;
      decimal64Array4[2] = decimal64_6;
      decimal64Array0[3] = decimal64Array4;
      Decimal64[] decimal64Array5 = new Decimal64[9];
      decimal64Array5[0] = decimal64_1;
      decimal64Array5[1] = decimal64_9;
      decimal64Array5[2] = decimal64_3;
      decimal64Array5[3] = decimal64_8;
      decimal64Array5[4] = decimal64_4;
      decimal64Array5[5] = decimal64_9;
      decimal64Array5[6] = decimal64_6;
      decimal64Array5[7] = decimal64_4;
      decimal64Array5[8] = decimal64_6;
      decimal64Array0[4] = decimal64Array5;
      Decimal64[] decimal64Array6 = new Decimal64[2];
      decimal64Array6[0] = decimal64_8;
      decimal64Array6[1] = decimal64_5;
      decimal64Array0[5] = decimal64Array6;
      Decimal64[] decimal64Array7 = new Decimal64[1];
      decimal64Array7[0] = decimal64_4;
      decimal64Array0[6] = decimal64Array7;
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = null;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = null;
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator0 = null;
      try {
        midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldEquationsMapper<Decimal64>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      Decimal64[][] decimal64Array0 = new Decimal64[9][3];
      Decimal64[] decimal64Array1 = new Decimal64[7];
      Decimal64 decimal64_0 = new Decimal64((-75.99529));
      decimal64Array1[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64((-75.99529));
      decimal64Array1[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64((-75.99529));
      decimal64Array1[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64((-75.99529));
      decimal64Array1[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64((-75.99529));
      decimal64Array1[4] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64(1.0);
      decimal64Array1[5] = decimal64_5;
      Decimal64 decimal64_6 = new Decimal64(1.0);
      decimal64Array1[6] = decimal64_6;
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[6];
      decimal64Array2[0] = decimal64_3;
      decimal64Array2[1] = decimal64_2;
      Decimal64 decimal64_7 = new Decimal64((-75.99529));
      decimal64Array2[2] = decimal64_7;
      decimal64Array2[3] = decimal64_4;
      decimal64Array2[4] = decimal64_5;
      decimal64Array2[5] = decimal64_6;
      decimal64Array0[1] = decimal64Array2;
      Decimal64[] decimal64Array3 = new Decimal64[8];
      decimal64Array3[0] = decimal64_4;
      decimal64Array3[1] = decimal64_7;
      decimal64Array3[2] = decimal64_2;
      decimal64Array3[3] = decimal64_3;
      Decimal64 decimal64_8 = new Decimal64(1.0);
      decimal64Array3[4] = decimal64_8;
      decimal64Array3[5] = decimal64_6;
      decimal64Array3[6] = decimal64_0;
      decimal64Array3[7] = decimal64_5;
      decimal64Array0[2] = decimal64Array3;
      Decimal64[] decimal64Array4 = new Decimal64[9];
      decimal64Array4[0] = decimal64_1;
      decimal64Array4[1] = decimal64_5;
      decimal64Array4[2] = decimal64_2;
      decimal64Array4[3] = decimal64_4;
      decimal64Array4[4] = decimal64_4;
      decimal64Array4[5] = decimal64_3;
      Decimal64 decimal64_9 = new Decimal64(0.0);
      decimal64Array4[6] = decimal64_9;
      decimal64Array4[7] = decimal64_1;
      decimal64Array4[8] = decimal64_0;
      decimal64Array0[3] = decimal64Array4;
      Decimal64[] decimal64Array5 = new Decimal64[3];
      decimal64Array5[0] = decimal64_0;
      decimal64Array5[1] = decimal64_1;
      decimal64Array5[2] = decimal64_3;
      decimal64Array0[4] = decimal64Array5;
      Decimal64[] decimal64Array6 = new Decimal64[6];
      decimal64Array6[0] = decimal64_6;
      decimal64Array6[1] = decimal64_8;
      decimal64Array6[2] = decimal64_9;
      decimal64Array6[3] = decimal64_5;
      decimal64Array6[4] = decimal64_4;
      decimal64Array6[5] = decimal64_6;
      decimal64Array0[5] = decimal64Array6;
      Decimal64[] decimal64Array7 = new Decimal64[0];
      decimal64Array0[6] = decimal64Array7;
      Decimal64[] decimal64Array8 = new Decimal64[8];
      decimal64Array8[0] = decimal64_8;
      decimal64Array8[1] = decimal64_3;
      Decimal64 decimal64_10 = new Decimal64(0.0);
      decimal64Array8[2] = decimal64_10;
      decimal64Array8[3] = decimal64_6;
      decimal64Array8[4] = decimal64_9;
      decimal64Array8[5] = decimal64_7;
      decimal64Array8[6] = decimal64_7;
      decimal64Array8[7] = decimal64_3;
      decimal64Array0[7] = decimal64Array8;
      Decimal64[] decimal64Array9 = new Decimal64[4];
      decimal64Array9[0] = decimal64_1;
      decimal64Array9[1] = decimal64_8;
      decimal64Array9[2] = decimal64_9;
      decimal64Array9[3] = decimal64_8;
      decimal64Array0[8] = decimal64Array9;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      boolean boolean0 = false;
      Dfp[][] dfpArray0 = new Dfp[3][9];
      Dfp[] dfpArray1 = new Dfp[8];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray1[5] = dfp0;
      dfpArray1[6] = dfp0;
      dfpArray1[7] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[6];
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray2[5] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[4];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray3[2] = dfp0;
      dfpArray3[3] = dfp0;
      dfpArray0[2] = dfpArray3;
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      Field<Dfp> field1 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        midpointFieldStepInterpolator0.create(field1, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp[][] dfpArray0 = new Dfp[4][7];
      Dfp[] dfpArray1 = new Dfp[5];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[1];
      dfpArray2[0] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[2];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[5];
      dfpArray4[0] = dfp0;
      dfpArray4[1] = dfp0;
      dfpArray4[2] = dfp0;
      dfpArray4[3] = dfp0;
      dfpArray4[4] = dfp0;
      dfpArray0[3] = dfpArray4;
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = null;
      try {
        midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray0 = new Dfp[7][3];
      Dfp[] dfpArray1 = new Dfp[9];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray1[5] = dfp0;
      dfpArray1[6] = dfp0;
      dfpArray1[7] = dfp0;
      dfpArray1[8] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[1];
      dfpArray2[0] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[4];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray3[2] = dfp0;
      dfpArray3[3] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[2];
      dfpArray4[0] = dfp0;
      dfpArray4[1] = dfp0;
      dfpArray0[3] = dfpArray4;
      Dfp[] dfpArray5 = new Dfp[8];
      dfpArray5[0] = dfp0;
      dfpArray5[1] = dfp0;
      dfpArray5[2] = dfp0;
      dfpArray5[3] = dfp0;
      dfpArray5[4] = dfp0;
      dfpArray5[5] = dfp0;
      dfpArray5[6] = dfp0;
      dfpArray5[7] = dfp0;
      dfpArray0[4] = dfpArray5;
      Dfp[] dfpArray6 = new Dfp[8];
      dfpArray6[0] = dfp0;
      dfpArray6[1] = dfp0;
      dfpArray6[2] = dfp0;
      dfpArray6[3] = dfp0;
      dfpArray6[4] = dfp0;
      dfpArray6[5] = dfp0;
      dfpArray6[6] = dfp0;
      dfpArray6[7] = dfp0;
      dfpArray0[5] = dfpArray6;
      Dfp[] dfpArray7 = new Dfp[1];
      dfpArray7[0] = dfp0;
      dfpArray0[6] = dfpArray7;
      Dfp[][] dfpArray8 = new Dfp[5][4];
      dfpArray8[0] = dfpArray2;
      dfpArray8[1] = dfpArray2;
      dfpArray8[2] = dfpArray2;
      dfpArray8[3] = dfpArray3;
      dfpArray8[4] = dfpArray1;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      Dfp[][] dfpArray0 = new Dfp[4][9];
      Dfp[] dfpArray1 = new Dfp[4];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[3];
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[2];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[1];
      dfpArray4[0] = dfp0;
      dfpArray0[3] = dfpArray4;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = null;
      try {
        midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Decimal64> class0 = Decimal64.class;
      Decimal64 decimal64_0 = new Decimal64((-4242.14));
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0).when(field0).getZero();
      Decimal64[][] decimal64Array0 = new Decimal64[1][6];
      Decimal64[] decimal64Array1 = new Decimal64[6];
      Decimal64 decimal64_1 = new Decimal64(1.0);
      decimal64Array1[0] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(1.0);
      decimal64Array1[1] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(1.0);
      decimal64Array1[2] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(1.0);
      decimal64Array1[3] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64((-3.141592653589793));
      decimal64Array1[4] = decimal64_5;
      Decimal64 decimal64_6 = new Decimal64(1.0);
      decimal64Array1[5] = decimal64_6;
      decimal64Array0[0] = decimal64Array1;
      FieldEquationsMapper<Decimal64> fieldEquationsMapper0 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper0);
      Field<Decimal64> field1 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field1).getRuntimeClass();
      doReturn((Object) null).when(field1).getZero();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper1 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator1 = midpointFieldStepInterpolator0.create(field1, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper1);
      midpointFieldStepInterpolator1.getGlobalCurrentState();
      FieldEquationsMapper<Decimal64> fieldEquationsMapper2 = (FieldEquationsMapper<Decimal64>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Decimal64> midpointFieldStepInterpolator2 = null;
      try {
        midpointFieldStepInterpolator2 = new MidpointFieldStepInterpolator<Decimal64>(field0, false, decimal64Array0, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, (FieldODEStateAndDerivative<Decimal64>) null, fieldEquationsMapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      Dfp[][] dfpArray0 = new Dfp[0][4];
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      MidpointFieldStepInterpolator<Dfp> midpointFieldStepInterpolator0 = null;
      try {
        midpointFieldStepInterpolator0 = new MidpointFieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

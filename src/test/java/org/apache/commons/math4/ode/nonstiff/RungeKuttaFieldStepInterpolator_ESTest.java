/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:27:04 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldEquationsMapper;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.nonstiff.HighamHall54FieldStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RungeKuttaFieldStepInterpolator_ESTest extends RungeKuttaFieldStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray0 = new Dfp[4][8];
      Dfp[] dfpArray1 = new Dfp[3];
      dfpArray0[1] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[2];
      dfpArray0[3] = dfpArray2;
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field1 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(field1).getRuntimeClass();
      doReturn(dfp0).when(field1).getZero();
      FieldEquationsMapper<Dfp> fieldEquationsMapper1 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      HighamHall54FieldStepInterpolator<Dfp> highamHall54FieldStepInterpolator0 = new HighamHall54FieldStepInterpolator<Dfp>(field1, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper1);
      FieldEquationsMapper<Dfp> fieldEquationsMapper2 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        highamHall54FieldStepInterpolator0.create(true, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Dfp> class0 = Dfp.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp[][] dfpArray0 = new Dfp[4][8];
      Dfp[] dfpArray1 = new Dfp[3];
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(dfp0).when(field0).getZero();
      FieldEquationsMapper<Dfp> fieldEquationsMapper0 = (FieldEquationsMapper<Dfp>) mock(FieldEquationsMapper.class, new ViolatedAssumptionAnswer());
      HighamHall54FieldStepInterpolator<Dfp> highamHall54FieldStepInterpolator0 = new HighamHall54FieldStepInterpolator<Dfp>(field0, false, dfpArray0, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, (FieldODEStateAndDerivative<Dfp>) null, fieldEquationsMapper0);
      // Undeclared exception!
      try { 
        highamHall54FieldStepInterpolator0.previousStateLinearCombination(dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldStepInterpolator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:42:51 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.ode.ExpandableStatefulODE;
import org.apache.commons.math4.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math4.ode.JacobianMatrices;
import org.apache.commons.math4.ode.MainStateJacobianProvider;
import org.apache.commons.math4.ode.ParameterJacobianProvider;
import org.apache.commons.math4.ode.ParameterizedODE;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobianMatrices_ESTest extends JacobianMatrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator";
      stringArray0[1] = "]r^:#m%HLJ<cO!{";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = 670.54590566338;
      try { 
        jacobianMatrices0.setInitialParameterJacobian("gM", doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown parameter gM
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1)).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator";
      stringArray0[1] = "]r^:#m%HLJ<cO!{";
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(186).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      ParameterJacobianProvider parameterJacobianProvider0 = mock(ParameterJacobianProvider.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-5926.59);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      try { 
        jacobianMatrices0.setInitialMainStateJacobian(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 186
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "x#]K!&sZ~JP<pQ)#5Z";
      stringArray0[2] = "usf*Z4";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "=";
      stringArray0[6] = "org.apache.commons.math4.ode.TestProblemAbstract";
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JacobianMatrices.MismatchedEquations jacobianMatrices_MismatchedEquations0 = new JacobianMatrices.MismatchedEquations();
      assertNotNull(jacobianMatrices_MismatchedEquations0);
      
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(566).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{$'5K6iwH";
      stringArray0[1] = "cx";
      stringArray0[2] = "org.apache.commons.math4.ode.TestProblemAbstract";
      stringArray0[3] = "";
      stringArray0[4] = "qZ!59m%,u rmkUXB9Y";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      jacobianMatrices0.setParameterStep("", 999.0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math4.ode.JacobianMatrices$1";
      stringArray0[1] = ")/bR@Y";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((FirstOrderDifferentialEquations) null).when(expandableStatefulODE0).getPrimary();
      try { 
        jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ode does not match the main ode set in the extended set
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String string0 = "5Hq(]>IF";
      stringArray0[1] = "5Hq(]>IF";
      stringArray0[2] = "org.apache.commons.math4.ode.JacobianMatricesTest$Circle";
      stringArray0[3] = "3WTc@B";
      stringArray0[4] = "";
      stringArray0[5] = "0~9kfvCaZ";
      stringArray0[6] = "";
      String string1 = "g\\^D";
      stringArray0[7] = "g^D";
      stringArray0[8] = "org.apache.commons.math4.ode.ParameterizedWrapper";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialParameterJacobian((String) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      assertNotNull(jacobianMatrices0);
      
      String string0 = "[";
      double[] doubleArray0 = new double[9];
      double double0 = (-1444.062436486);
      // Undeclared exception!
      try { 
        jacobianMatrices0.registerVariationalEquations((ExpandableStatefulODE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",#,e;";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math4.ode.TestProblem3";
      stringArray0[3] = "FI)<Wxx`>r";
      stringArray0[4] = "org.apache.commons.math4.ode.TestProblem3";
      stringArray0[5] = "org.apache.commons.math4.ode.JacobianMatrices$1";
      stringArray0[6] = "org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper";
      stringArray0[7] = "=?r";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialMainStateJacobian(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "omega";
      stringArray0[1] = "\"[>E2B!|{fr?p/N`^";
      stringArray0[2] = "";
      stringArray0[3] = "u`?\bx!j9o[rgcqfh#q";
      stringArray0[4] = "u.s.$+&4K}8Jr}S";
      stringArray0[5] = "qZ(F^";
      stringArray0[6] = "org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[] doubleArray0 = new double[0];
      jacobianMatrices0.setInitialParameterJacobian("org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator", doubleArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      jacobianMatrices0.setParameterStep("u`?\bx!j9o[rgcqfh#q", (-1482.7959047));
      assertEquals(7, stringArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((FirstOrderDifferentialEquations) null).when(expandableStatefulODE0).getPrimary();
      try { 
        jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ode does not match the main ode set in the extended set
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[7];
      String string0 = "org.apache.commons.math4.ode.JacobianMatrices$MismatchedEquations";
      stringArray0[0] = "org.apache.commons.math4.ode.JacobianMatrices$MismatchedEquations";
      stringArray0[1] = "mr1V?c:p)fr:1?I}Cp";
      stringArray0[2] = "U2";
      stringArray0[3] = "el+);5:G1JMIkh!9z'";
      stringArray0[4] = "t?n00xkz6$%dBN1kGy";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      try { 
        jacobianMatrices0.setInitialParameterJacobian("org.apache.commons.math4.ode.JacobianMatrices", (double[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown parameter org.apache.commons.math4.ode.JacobianMatrices
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*ImII-";
      stringArray0[1] = "pq4tDcp/`vw|S.{u}G";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      // Undeclared exception!
      try { 
        jacobianMatrices0.setInitialMainStateJacobian((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = ";*7?-1:I[;;\\";
      stringArray0[1] = ";*7?-1:I[;;";
      stringArray0[2] = "";
      stringArray0[3] = "b@WE1Y&GgK/3(zgI_";
      stringArray0[4] = "?7_;&C>R0Q{|uA`0z";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((FirstOrderDifferentialEquations) null).when(expandableStatefulODE0).getPrimary();
      try { 
        jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ode does not match the main ode set in the extended set
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0";
      stringArray0[1] = "luMGE";
      stringArray0[2] = "(>qQFk`&J8=*{";
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices((MainStateJacobianProvider) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, (double[]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W,_~Q-`-8R";
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math4.ode.FirstOrderConverter";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1340.31778306676);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1340.31778306676);
      doubleArray2[1] = (-1340.31778306676);
      doubleArray2[2] = (-2395.98496496);
      doubleArray2[3] = (-1340.31778306676);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1340.31778306676);
      doubleArray3[1] = (-1340.31778306676);
      doubleArray3[2] = (-2395.98496496);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1340.31778306676);
      doubleArray4[1] = (-1340.31778306676);
      doubleArray4[2] = (-1340.31778306676);
      doubleArray4[3] = (-2395.98496496);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1340.31778306676);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1340.31778306676);
      doubleArray6[1] = (-1340.31778306676);
      doubleArray6[2] = (-1340.31778306676);
      doubleArray6[3] = (-1340.31778306676);
      doubleArray6[4] = (-1340.31778306676);
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentMainSetJacobian(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      assertNotNull(jacobianMatrices0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1088.232716447743);
      doubleArray0[1] = 1709.869226;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1502.824469929139;
      ParameterizedODE parameterizedODE0 = mock(ParameterizedODE.class, new ViolatedAssumptionAnswer());
      jacobianMatrices0.setParameterizedODE(parameterizedODE0);
      doubleArray0[4] = (-929.1);
      doubleArray0[5] = 0.0;
      try { 
        jacobianMatrices0.setInitialParameterJacobian("", doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h.%5)E>5K'=O8v";
      stringArray0[1] = "1!?";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math4.ode.JacobianMatrices$JacobiansSecondaryEquations";
      stringArray0[4] = "H^WP4)'Pr&>}>|c;o";
      stringArray0[5] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2204.1706401;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1625.28609);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1625.28609);
      doubleArray2[2] = (-1625.28609);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2204.1706401;
      doubleArray2[5] = (-1625.28609);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2204.1706401;
      doubleArray3[1] = 2204.1706401;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1625.28609);
      doubleArray4[1] = 2204.1706401;
      doubleArray4[2] = (-1625.28609);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 2204.1706401;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-213.3131);
      doubleArray5[2] = (-1625.28609);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 2204.1706401;
      doubleArray5[5] = 0.0;
      doubleArray0[4] = doubleArray5;
      try { 
        jacobianMatrices0.setInitialMainStateJacobian(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zI`(x";
      stringArray0[1] = "kZ.EO(m";
      stringArray0[2] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      String string0 = "";
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      try { 
        jacobianMatrices0.setParameterStep("ri", 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown parameter ri
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      try { 
        jacobianMatrices0.setParameterStep((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown parameter null
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-199.4379);
      doubleArray0[3] = 2366.9874;
      doubleArray0[4] = (-1686.36691);
      doubleArray0[5] = 1.0;
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentParameterJacobian("7LpFk!-zInRzp", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 12.0;
      doubleArray0[2] = 535.654074749;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "WqR=(>P<mb7S+):t";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper";
      stringArray0[3] = "";
      stringArray0[4] = "b";
      stringArray0[5] = "org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator";
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      assertNotNull(jacobianMatrices0);
      
      String string0 = "";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2482.155438924902);
      doubleArray0[1] = 315.0;
      doubleArray0[2] = 5309.767;
      doubleArray0[3] = 2192.1050605194705;
      // Undeclared exception!
      try { 
        jacobianMatrices0.setParameterStep("", 315.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      assertNotNull(jacobianMatrices0);
      
      ParameterJacobianProvider parameterJacobianProvider0 = mock(ParameterJacobianProvider.class, new ViolatedAssumptionAnswer());
      jacobianMatrices0.addParameterJacobianProvider(parameterJacobianProvider0);
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentParameterJacobian((String) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CONTINUED_FRACTION_INFINITY_DIVERGENCE";
      stringArray0[1] = "0D~AR'9)ow(J_=";
      stringArray0[2] = "ITERATIONS";
      stringArray0[3] = "|H)HGk3#+m2}FjJX";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      double double0 = 0.0;
      jacobianMatrices0.setParameterStep("0D~AR'9)ow(J_=", 0.0);
      assertEquals(4, stringArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1448.8014108;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1448.8014108;
      doubleArray3[2] = 1448.8014108;
      doubleArray3[3] = 1448.8014108;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentMainSetJacobian(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math4.ode.JacobianMatricesTest$Brusselator";
      stringArray0[1] = "]r^:#m%HLJ<cO!{";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      jacobianMatrices0.setParameterStep("]r^:#m%HLJ<cO!{", 670.54590566338);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        jacobianMatrices0.setInitialParameterJacobian("gM", doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown parameter gM
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      ParameterJacobianProvider parameterJacobianProvider0 = mock(ParameterJacobianProvider.class, new ViolatedAssumptionAnswer());
      ParameterizedODE parameterizedODE0 = mock(ParameterizedODE.class, new ViolatedAssumptionAnswer());
      jacobianMatrices0.setParameterizedODE(parameterizedODE0);
      assertEquals(1, stringArray0.length);
      
      jacobianMatrices0.addParameterJacobianProvider(parameterJacobianProvider0);
      assertEquals(1, stringArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((FirstOrderDifferentialEquations) null).when(expandableStatefulODE0).getPrimary();
      try { 
        jacobianMatrices0.registerVariationalEquations(expandableStatefulODE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ode does not match the main ode set in the extended set
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-2571.43);
      doubleArray0[2] = (-1916.5640837);
      String[] stringArray0 = new String[26];
      stringArray0[0] = "org.apache.commons.math4.ode.TestProblem5";
      stringArray0[1] = "org.apache.commons.math4.ode.TestProblem5";
      stringArray0[3] = ": ";
      stringArray0[4] = "";
      stringArray0[5] = ">Afu=c|Xk^";
      stringArray0[6] = "";
      stringArray0[7] = "j=dF6BCkU3^:_9p!";
      stringArray0[8] = "";
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(279).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      assertEquals(26, stringArray0.length);
      assertNotNull(jacobianMatrices0);
      
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentParameterJacobian("org.apache.commons.math4.ode.TestProblem5", doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1920.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 60.0;
      doubleArray0[3] = 0.0;
      String[] stringArray0 = new String[0];
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t,?#p[^";
      String string0 = "JZ=0%H!g2u1*aYk;AQ";
      stringArray0[1] = "JZ=0%H!g2u1*aYk;AQ";
      stringArray0[2] = "_'0DH8Klx[=\"1|4.:";
      stringArray0[3] = "!-ZGVZ,'m^";
      stringArray0[4] = "M13K";
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, stringArray0);
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1331.3;
      doubleArray1[1] = (-4725.7);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-4725.7);
      doubleArray2[1] = 1331.3;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1331.3;
      doubleArray3[4] = 49.43847385647082;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-4725.7);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 1331.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 49.43847385647082;
      doubleArray0[4] = doubleArray5;
      try { 
        jacobianMatrices0.setInitialMainStateJacobian(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MainStateJacobianProvider mainStateJacobianProvider0 = mock(MainStateJacobianProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(mainStateJacobianProvider0).getDimension();
      JacobianMatrices jacobianMatrices0 = new JacobianMatrices(mainStateJacobianProvider0, (String[]) null);
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 9.42477796076938;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 9.42477796076938;
      doubleArray2[1] = 9.42477796076938;
      doubleArray2[2] = 9.42477796076938;
      doubleArray2[3] = 9.42477796076938;
      doubleArray2[4] = 9.42477796076938;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-3954.9178);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-3954.9178);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-3954.9178);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        jacobianMatrices0.getCurrentMainSetJacobian(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = mock(FirstOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1535, 191).when(firstOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1438.6974831849952);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 3586.381752458;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5fQq#>[-1$LDWYy";
      stringArray0[1] = "5fQq#>[-1$LDWYy";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math4.ode.ParameterizedWrapper";
      JacobianMatrices jacobianMatrices0 = null;
      try {
        jacobianMatrices0 = new JacobianMatrices(firstOrderDifferentialEquations0, doubleArray0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 191 != 8
         //
         verifyException("org.apache.commons.math4.ode.JacobianMatrices$MainStateJacobianWrapper", e);
      }
  }
}

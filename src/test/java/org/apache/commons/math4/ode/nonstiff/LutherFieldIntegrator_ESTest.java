/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:53:51 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.ode.nonstiff.LutherFieldIntegrator;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LutherFieldIntegrator_ESTest extends LutherFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-0.4676177627769005));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      LutherFieldIntegrator<Decimal64> lutherFieldIntegrator0 = new LutherFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[][] decimal64Array0 = lutherFieldIntegrator0.getA();
      assertEquals(6, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-0.4676177627769005));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getOne();
      doReturn(class0, (Class) null, (Class) null, (Class) null, (Class) null).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, (Object) null, (Object) null).when(field0).getZero();
      LutherFieldIntegrator<Decimal64> lutherFieldIntegrator0 = new LutherFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = lutherFieldIntegrator0.getC();
      assertEquals(6, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-0.5701413970116813));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, decimal64_0, decimal64_0).when(field0).getOne();
      doReturn(class0, class0, class0, class0, class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, decimal64_0, decimal64_0, decimal64_0, decimal64_0).when(field0).getZero();
      LutherFieldIntegrator<Decimal64> lutherFieldIntegrator0 = new LutherFieldIntegrator<Decimal64>(field0, decimal64_0);
      Decimal64[] decimal64Array0 = lutherFieldIntegrator0.getB();
      assertEquals(7, decimal64Array0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-0.5701413970116813));
      Class<Decimal64> class0 = Decimal64.class;
      Field<Decimal64> field0 = (Field<Decimal64>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(field0).getOne();
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(decimal64_0, (Object) null, (Object) null).when(field0).getZero();
      LutherFieldIntegrator<Decimal64> lutherFieldIntegrator0 = null;
      try {
        lutherFieldIntegrator0 = new LutherFieldIntegrator<Decimal64>(field0, decimal64_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaFieldIntegrator", e);
      }
  }
}

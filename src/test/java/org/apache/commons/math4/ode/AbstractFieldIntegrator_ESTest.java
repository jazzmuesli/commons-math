/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:49:46 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.AbstractFieldIntegrator;
import org.apache.commons.math4.ode.FieldExpandableODE;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.events.FieldEventHandler;
import org.apache.commons.math4.ode.nonstiff.EulerFieldIntegrator;
import org.apache.commons.math4.ode.sampling.FieldStepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractFieldIntegrator_ESTest extends AbstractFieldIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "(mJM@L{i", "", "(mJM@L{i").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class0, class1).when(field0).getRuntimeClass();
      doReturn(dfp1, dfp1).when(field0).getZero();
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp2).when(dfp3).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp3);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      
      ((AbstractFieldIntegrator)eulerFieldIntegrator0).setStepStart((FieldODEStateAndDerivative<Dfp>) null);
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class1, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp1).when(field0).getZero();
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp2).when(dfp3).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp3);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      
      eulerFieldIntegrator0.setMaxEvaluations((-320));
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "uPt`us:*&*SfizK", "h", "h").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class0, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp0).when(field0).getZero();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp2);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      
      Collection<FieldEventHandler<Dfp>> collection0 = eulerFieldIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.math4.ode.AbstractFieldIntegrator", (String) null).when(field0).toString();
      doReturn(class0, (Class) null).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = null;
      try {
        eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class1, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp1).when(field0).getZero();
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp2).when(dfp3).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp3);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      
      Dfp dfp4 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      ((AbstractFieldIntegrator)eulerFieldIntegrator0).setStepSize(dfp4);
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class1, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp1).when(field0).getZero();
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp2).when(dfp3).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp3);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      
      Collection<FieldStepHandler<Dfp>> collection0 = eulerFieldIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "OV>RFLXW", "").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class0, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp0).when(field0).getZero();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp2);
      assertNotNull(eulerFieldIntegrator0);
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
      
      eulerFieldIntegrator0.clearEventHandlers();
      assertEquals(Integer.MAX_VALUE, eulerFieldIntegrator0.getMaxEvaluations());
      assertEquals(0, eulerFieldIntegrator0.getEvaluations());
      assertEquals("Euler", eulerFieldIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Class<Dfp> class1 = Dfp.class;
      Field<Dfp> field0 = (Field<Dfp>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "q99", "").when(field0).toString();
      doReturn(dfp0).when(field0).getOne();
      doReturn(class0, class1, class1).when(field0).getRuntimeClass();
      doReturn(dfp0, dfp0).when(field0).getZero();
      Dfp dfp1 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      Dfp dfp2 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfp1).when(dfp2).abs();
      EulerFieldIntegrator<Dfp> eulerFieldIntegrator0 = new EulerFieldIntegrator<Dfp>(field0, dfp2);
      FieldExpandableODE<Dfp> fieldExpandableODE0 = (FieldExpandableODE<Dfp>) mock(FieldExpandableODE.class, new ViolatedAssumptionAnswer());
      doReturn((RealFieldElement[]) null).when(fieldExpandableODE0).computeDerivatives(any(org.apache.commons.math4.dfp.Dfp.class) , any(org.apache.commons.math4.dfp.Dfp[].class));
      Dfp dfp3 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp3).getField();
      Dfp[] dfpArray0 = new Dfp[2];
      // Undeclared exception!
      try { 
        ((AbstractFieldIntegrator)eulerFieldIntegrator0).initIntegration(fieldExpandableODE0, dfp3, dfpArray0, dfp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEStateAndDerivative", e);
      }
  }
}

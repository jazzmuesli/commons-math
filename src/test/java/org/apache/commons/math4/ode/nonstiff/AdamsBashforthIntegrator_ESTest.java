/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:45:53 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math4.analysis.solvers.UnivariateSolver;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.ExpandableStatefulODE;
import org.apache.commons.math4.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math4.ode.events.EventHandler;
import org.apache.commons.math4.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math4.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AdamsBashforthIntegrator_ESTest extends AdamsBashforthIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(11, 11, 11, 11, 11);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-1968526677)).when(equationsMapper0).getDimension();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-735.0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(expandableStatefulODE0).getCompleteState();
      doReturn(equationsMapper0, (EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn((EquationsMapper[]) null).when(expandableStatefulODE0).getSecondaryMappers();
      doReturn((-735.0), (double)11, (-735.0)).when(expandableStatefulODE0).getTime();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2145784048;
      doubleArray0[1] = (double) 2145784048;
      doubleArray0[2] = (double) 2145784048;
      doubleArray0[3] = (double) 2145784048;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2145784048, 2145784048, 2145784048, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.field.linalg.FieldDenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(9, 0.0, 9, 2600.1827059318, 9);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(equationsMapper0).getDimension();
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(expandableStatefulODE0).getCompleteState();
      doReturn(equationsMapper0).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn((-1818.9), (-1255.52333), 0.0).when(expandableStatefulODE0).getTime();
      adamsBashforthIntegrator0.clearEventHandlers();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 7.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsBashforthIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 666.03425, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.field.linalg.FieldDenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = (-809.022588400808);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(10, (-1.0), (-809.022588400808), (-1370.45889859), (-1370.45889859));
      adamsBashforthIntegrator0.scalAbsoluteTolerance = (-809.022588400808);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(expandableStatefulODE0).getTime();
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math4.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = null;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, (-3231.971), (-3231.971), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2;
      double double0 = 10.0;
      double double1 = (-1.0);
      double double2 = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, 2, 10.0, (-1.0), 0.0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate((ExpandableStatefulODE) null, 10.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-107.52465985);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, 2, 2, (-107.52465985), 3.0);
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(0.0, 0.0).when(expandableStatefulODE0).getTime();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, 2, 2, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-686.0);
      doubleArray0[1] = (-686.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-686.0);
      doubleArray0[4] = (-686.0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(Integer.MAX_VALUE, (-686.0), 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.field.linalg.FieldDenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0, 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative size
         //
         verifyException("org.apache.commons.math4.field.linalg.FieldDenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1814.39458);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2600, (-1814.39458), (-33.28821096898486), 2428.960827, 0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.9777777777777777;
      doubleArray0[1] = (double) 3420;
      doubleArray0[2] = (double) 3420;
      doubleArray0[3] = 0.9777777777777777;
      doubleArray0[4] = (double) 3420;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3420, 0.9777777777777777, 0.9777777777777777, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      double double0 = (-659.96993287112);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 1, 1, (-659.96993287112), (-659.96993287112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // multistep method needs at least 1 previous steps, got 2
         //
         verifyException("org.apache.commons.math4.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1), (-1), (-1), 1331.9984499036384, (-2804.90743046446));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // multistep method needs at least -1 previous steps, got 2
         //
         verifyException("org.apache.commons.math4.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(11, 11, 11, 11, 11);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(11.0, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(11.0, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(11, adamsBashforthIntegrator0.getNSteps());
      assertEquals(1.0650410894399627, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals(11.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(adamsBashforthIntegrator0);
      
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-1968526677), 0, 0, 0, 0).when(equationsMapper0).getDimension();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-735.0);
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper1).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      adamsBashforthIntegrator0.setStepSizeControl((double) 11, (-1430.73012393464), 1.2090653407564583E-7, (-1430.73012393464));
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(11.0, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(11, adamsBashforthIntegrator0.getNSteps());
      assertEquals(1.0650410894399627, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(1430.73012393464, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals(11.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      equationsMapperArray0[0] = equationsMapper1;
      equationsMapperArray0[1] = equationsMapper1;
      equationsMapperArray0[2] = equationsMapper1;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper1;
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(expandableStatefulODE0).getCompleteState();
      doReturn(equationsMapper0, equationsMapper1).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(equationsMapperArray0).when(expandableStatefulODE0).getSecondaryMappers();
      doReturn((-735.0), (double)11, (-735.0), 0.0, 0.0).when(expandableStatefulODE0).getTime();
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math4.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.4254565238952637;
      doubleArray0[0] = 1.4254565238952637;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, (-181.8), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative size
         //
         verifyException("org.apache.commons.math4.field.linalg.FieldDenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 12;
      double double0 = (-1334.1871797036126);
      double double1 = (-3002.7213040101);
      double double2 = (-1255.52333);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(12, (-1334.1871797036126), (-1334.1871797036126), (-3002.7213040101), (-1255.52333));
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(1.0594630943592953, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(12, adamsBashforthIntegrator0.getNSteps());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      assertNotNull(adamsBashforthIntegrator0);
      
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(equationsMapper0).getDimension();
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(expandableStatefulODE0).getCompleteState();
      doReturn(equationsMapper0).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(1349.673091, (-1255.52333), 0.0).when(expandableStatefulODE0).getTime();
      adamsBashforthIntegrator0.mainSetDimension = (-51);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(1.0594630943592953, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(12, adamsBashforthIntegrator0.getNSteps());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      
      adamsBashforthIntegrator0.setMaxGrowth((-3002.7213040101));
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(1334.1871797036126, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals((-3002.7213040101), adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(12, adamsBashforthIntegrator0.getNSteps());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-3002.7213040101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsBashforthIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 12;
      double double0 = (-1768.49972037);
      double double1 = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(12, 12, (-1768.49972037), 1652.32397, 0.0);
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(1.0594630943592953, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(12, adamsBashforthIntegrator0.getNSteps());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(1768.49972037, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(12.0, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(145.6777149890813, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(adamsBashforthIntegrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1768.49972037);
      doubleArray0[1] = 1652.32397;
      Collection<StepHandler> collection0 = adamsBashforthIntegrator0.getStepHandlers();
      assertEquals(0.9, adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals("Adams-Bashforth", adamsBashforthIntegrator0.getName());
      assertEquals(1.0594630943592953, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsBashforthIntegrator0.getMinReduction(), 0.01);
      assertEquals(12, adamsBashforthIntegrator0.getNSteps());
      assertEquals(0, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, adamsBashforthIntegrator0.getMaxEvaluations());
      assertEquals(1768.49972037, adamsBashforthIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(12.0, adamsBashforthIntegrator0.getMinStep(), 0.01);
      assertEquals(145.6777149890813, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      try { 
        adamsBashforthIntegrator0.computeDerivatives((-1768.49972037), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 2.875830537697;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.225, 0.225, 0.225, 2.875830537697);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math4.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 4808.02944402882;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4808.02944402882;
      doubleArray0[1] = (double) 3585;
      doubleArray0[2] = 4808.02944402882;
      doubleArray0[3] = 4808.02944402882;
      doubleArray0[4] = (double) 3585;
      doubleArray0[5] = 4808.02944402882;
      doubleArray0[6] = 4808.02944402882;
      doubleArray0[7] = 4808.02944402882;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3585, 4808.02944402882, 3585, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-2512), (-2512), (-2512), (-2512), (-2512));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // multistep method needs at least -2,512 previous steps, got 2
         //
         verifyException("org.apache.commons.math4.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1340;
      double double0 = (-1841.50025669828);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1340, 1340, 1340, (-1841.50025669828), 1340);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(11, 11, 11, 11, 11);
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn((-735.0), (double)11).when(expandableStatefulODE0).getTime();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:40:58 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.ode.ContinuousOutputModel;
import org.apache.commons.math4.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 459.1854473186917;
      doubleArray0[1] = (-1992.202777);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(459.1854473186917, (-1992.202777), (-1992.202777), 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn(459.1854473186917, 302.0).when(stepInterpolator0).getInterpolatedTime();
      doReturn((-1391.3715171863037), 302.0, 155.82490622505404, 1930.954156, (-1.0)).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      boolean boolean0 = true;
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryState(0);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(302);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(365.76).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInitialTime();
      continuousOutputModel0.getFinalTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(stepInterpolator1).getInterpolatedState();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator1).when(stepInterpolator2).copy();
      doReturn(1645.0).when(stepInterpolator2).getPreviousTime();
      doReturn(false).when(stepInterpolator2).isForward();
      continuousOutputModel0.handleStep(stepInterpolator2, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 1793.4746981).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      doReturn(1793.4746981, (-1992.202777)).when(stepInterpolator0).getInterpolatedTime();
      doReturn(0.0, 0.0, 9.57766592, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn(1526.670189950154).when(stepInterpolator3).getCurrentTime();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[0];
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(905.0843, (-1.0), 1930.954156).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn((-3509.200967962151), 1930.954156).when(stepInterpolator0).getInterpolatedTime();
      doReturn(1.0, 2375.498212, (-1.0)).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryState(0);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn(Double.NaN).when(stepInterpolator3).getCurrentTime();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 1.0;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, Double.NaN).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((Object) doubleArray1, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn((-1.0)).when(stepInterpolator0).getInterpolatedTime();
      doReturn(Double.NaN, (-1024.0), 1.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryState(0);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getFinalTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn(1.0).when(stepInterpolator3).getCurrentTime();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator1).when(stepInterpolator2).copy();
      doReturn(1645.0).when(stepInterpolator2).getPreviousTime();
      doReturn(false).when(stepInterpolator2).isForward();
      continuousOutputModel1.handleStep(stepInterpolator2, false);
      continuousOutputModel0.append(continuousOutputModel1);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append((ContinuousOutputModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-910.7884886);
      doubleArray0[2] = (-494.34);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-910.7884886);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((-910.7884886), 714.4275218, 1.0, (-910.7884886), (-494.34)).when(stepInterpolator0).getCurrentTime();
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn(1479.65371).when(stepInterpolator0).getInterpolatedTime();
      doReturn(1875.7679572, (-1753.322), 1.0, 0.0, 19.448257526319964).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-430.818938151702)).when(stepInterpolator1).getCurrentTime();
      doReturn((-430.818938151702)).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.setInterpolatedTime(1848.7420506651094);
      continuousOutputModel0.setInterpolatedTime((-1.0));
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.setInterpolatedTime(1479.65371);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[3];
      continuousOutputModel0.init(298.758, doubleArray0, (-2.632060904444842));
      double double0 = (-2001.21741);
      doubleArray0[0] = (-2001.21741);
      doubleArray0[1] = 2228.849272;
      doubleArray0[2] = 2228.849272;
      continuousOutputModel0.init(2228.849272, doubleArray0, 2228.849272);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2001.21741);
      doubleArray1[1] = (-2001.21741);
      doubleArray1[2] = 2228.849272;
      doubleArray1[3] = (-2.632060904444842);
      doubleArray1[4] = 2228.849272;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn((Object) doubleArray0, (Object) doubleArray1).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((-2001.21741)).when(stepInterpolator0).getInterpolatedTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-21.531)).when(stepInterpolator1).getCurrentTime();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn(2228.849272).when(stepInterpolator3).getCurrentTime();
      doReturn(2228.849272).when(stepInterpolator3).getPreviousTime();
      doReturn(false).when(stepInterpolator3).isForward();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
      continuousOutputModel0.getFinalTime();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(0);
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(0);
      continuousOutputModel0.getInterpolatedTime();
      ContinuousOutputModel continuousOutputModel2 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel2.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-806.47);
      doubleArray0[1] = (-806.47);
      doubleArray0[2] = (-806.47);
      doubleArray0[3] = (-806.47);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((-806.47), (-806.47), 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn((-806.47), (-806.47)).when(stepInterpolator0).getInterpolatedTime();
      doReturn((-1992.202777), (-806.47), (-1992.202777), 0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(1.0).when(stepInterpolator1).getCurrentTime();
      doReturn(1.0).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryState(0);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator2).getCurrentTime();
      doReturn(0.0).when(stepInterpolator2).getPreviousTime();
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn((-806.47)).when(stepInterpolator3).getCurrentTime();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
      continuousOutputModel0.setInterpolatedTime(2);
      assertEquals((-806.47), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(0.0).when(stepInterpolator0).getInterpolatedTime();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(0.0).when(stepInterpolator1).getCurrentTime();
      doReturn(0.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.setInterpolatedTime(1848.7420506651094);
      continuousOutputModel0.getInterpolatedSecondaryState(329);
      continuousOutputModel0.setInterpolatedTime((-1.0));
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.setInterpolatedTime(0.0);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[0];
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(19.448257526319964, Double.NaN, 19.448257526319964, 19.448257526319964).when(stepInterpolator0).getCurrentTime();
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn(0.0, Double.NaN, 1.0, 19.448257526319964).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(905.0843).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      continuousOutputModel0.getFinalTime();
      double double0 = (-1.0);
      continuousOutputModel0.setInterpolatedTime((-1.0));
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.init(0.0, (double[]) null, 0.0);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedDerivatives();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2041;
      doubleArray0[1] = 0.0;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(2041.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      doubleArray0[2] = (double) 2041;
      doubleArray0[3] = (double) 2041;
      doubleArray0[4] = (double) 2041;
      doubleArray0[5] = (double) 2041;
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doubleArray0[6] = (double) 2041;
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(2041);
      assertEquals(2041.0, continuousOutputModel0.getInitialTime(), 0.01);
      
      doubleArray0[7] = (-20.782);
      doubleArray0[8] = (double) 2041;
      continuousOutputModel0.init(2041, doubleArray0, 0.5);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn(0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-854.4094838354728)).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      continuousOutputModel0.getInitialTime();
      continuousOutputModel0.getInitialTime();
      continuousOutputModel0.getFinalTime();
      double double0 = (-1.0);
      continuousOutputModel0.setInterpolatedTime((-1.0));
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.init(0.0, (double[]) null, 0.0);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedDerivatives();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(0.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(stepInterpolator2).getCurrentTime();
      doReturn(0.0, 0.0).when(stepInterpolator2).getPreviousTime();
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      continuousOutputModel0.handleStep(stepInterpolator3, false);
      continuousOutputModel0.setInterpolatedTime(905.0843);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(stepInterpolator1).getInterpolatedSecondaryState(anyInt());
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator1).when(stepInterpolator2).copy();
      doReturn((double)278).when(stepInterpolator2).getPreviousTime();
      doReturn(true).when(stepInterpolator2).isForward();
      continuousOutputModel0.handleStep(stepInterpolator2, false);
      continuousOutputModel0.getInterpolatedSecondaryState(278);
      continuousOutputModel0.init(0.0, (double[]) null, 0.0);
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      continuousOutputModel0.getInitialTime();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[3];
      continuousOutputModel0.init(298.758, doubleArray0, (-2.632060904444842));
      double double0 = (-2001.21741);
      doubleArray0[0] = (-2001.21741);
      doubleArray0[1] = 2228.849272;
      doubleArray0[2] = 2228.849272;
      continuousOutputModel0.init(2228.849272, doubleArray0, 2228.849272);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn((Object) null, (Object) null).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn(0.0).when(stepInterpolator0).getInterpolatedTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-21.531)).when(stepInterpolator1).getCurrentTime();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator2).copy();
      doReturn(0.0).when(stepInterpolator2).getCurrentTime();
      doReturn(0.0).when(stepInterpolator2).getPreviousTime();
      doReturn(false).when(stepInterpolator2).isForward();
      continuousOutputModel0.handleStep(stepInterpolator2, true);
      continuousOutputModel0.getFinalTime();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(0);
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(0);
      continuousOutputModel0.getInterpolatedTime();
      ContinuousOutputModel continuousOutputModel2 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel2.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      int int0 = 2041;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2041;
      doubleArray0[1] = 0.0;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(2041.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      doubleArray0[2] = (double) 2041;
      doubleArray0[3] = (double) 2041;
      doubleArray0[4] = (double) 2041;
      doubleArray0[5] = (double) 2041;
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator2).copy();
      continuousOutputModel0.handleStep(stepInterpolator2, false);
      doubleArray0[6] = (double) 2041;
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(2041);
      double double0 = (-20.782);
      doubleArray0[7] = (-20.782);
      doubleArray0[8] = (double) 2041;
      continuousOutputModel0.init(2041, doubleArray0, 0.5);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryDerivatives(2041);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      continuousOutputModel1.handleStep(stepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      boolean boolean0 = false;
      continuousOutputModel0.handleStep(stepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(1848.7420506651094);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      continuousOutputModel0.handleStep(stepInterpolator0, false);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedDerivatives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      continuousOutputModel0.getFinalTime();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedState();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(0.0).when(stepInterpolator1).getCurrentTime();
      doReturn(0.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel1.handleStep(stepInterpolator1, true);
      continuousOutputModel1.getInterpolatedState();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator2).copy();
      doReturn(0.0).when(stepInterpolator2).getCurrentTime();
      continuousOutputModel1.handleStep(stepInterpolator2, true);
      assertEquals(0.0, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        continuousOutputModel0.handleStep((StepInterpolator) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double double0 = continuousOutputModel0.getFinalTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      int int0 = (-1177);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedDerivatives();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedDerivatives();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.init(0.0, (double[]) null, 1757.5);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[3];
      continuousOutputModel0.init(298.758, doubleArray0, 0.0);
      double double0 = (-2001.21741);
      doubleArray0[0] = (-2001.21741);
      doubleArray0[1] = 2228.849272;
      doubleArray0[2] = 2228.849272;
      continuousOutputModel0.init(2228.849272, doubleArray0, 2228.849272);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryDerivatives(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator1).copy();
      doReturn(0.0).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryState(2559);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-872.0747052521048);
      doubleArray0[1] = (-872.0747052521048);
      doubleArray0[2] = (-872.0747052521048);
      continuousOutputModel1.init((-872.0747052521048), doubleArray0, (-4350.3587654118));
      continuousOutputModel0.append(continuousOutputModel1);
      continuousOutputModel0.handleStep(stepInterpolator0, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(168.160579210139);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.init((-1136.0079), (double[]) null, (-1136.0079));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(456.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      doReturn(0.0).when(stepInterpolator0).getPreviousTime();
      doReturn(false).when(stepInterpolator0).isForward();
      boolean boolean0 = true;
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel1.append((ContinuousOutputModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(0.0).when(stepInterpolator1).getCurrentTime();
      doReturn(0.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.handleStep((StepInterpolator) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double double0 = 1901.9991419999;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1901.9991419999;
      doubleArray0[1] = 1901.9991419999;
      doubleArray0[2] = 1901.9991419999;
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryDerivatives((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryDerivatives(299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedSecondaryState(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(0.0, 0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      boolean boolean0 = false;
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      continuousOutputModel0.setInterpolatedTime(0.0);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel1);
      int int0 = 852;
      continuousOutputModel0.getInterpolatedSecondaryState(852);
      // Undeclared exception!
      try { 
        continuousOutputModel1.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3114.83;
      doubleArray0[1] = 3114.83;
      doubleArray0[2] = 3114.83;
      doubleArray0[3] = (-2778.3628741663);
      doubleArray0[4] = (-391.742);
      doubleArray0[5] = (double) (-595);
      doubleArray0[6] = 3114.83;
      doubleArray0[7] = (double) (-595);
      doubleArray0[8] = (-1.0);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(0.5).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInitialTime();
      continuousOutputModel0.getFinalTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append((ContinuousOutputModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2041;
      doubleArray0[1] = 0.0;
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(2041.0).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, false);
      doubleArray0[2] = (double) 2041;
      doubleArray0[3] = (double) 2041;
      doubleArray0[4] = (double) 2041;
      doubleArray0[5] = (double) 2041;
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      continuousOutputModel0.handleStep(stepInterpolator3, false);
      doubleArray0[6] = (double) 2041;
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(2041);
      assertEquals(2041.0, continuousOutputModel0.getInitialTime(), 0.01);
      
      doubleArray0[7] = (-20.782);
      doubleArray0[8] = (double) 2041;
      continuousOutputModel0.init(2041, doubleArray0, 0.5);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 459.1854473186917;
      doubleArray0[1] = (-1992.202777);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(459.1854473186917, (-1992.202777), (-1992.202777)).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn(459.1854473186917, 302.0).when(stepInterpolator0).getInterpolatedTime();
      doReturn((-1391.3715171863037), 302.0, 133.72367931797, 1930.954156, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryState(0);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      StepInterpolator stepInterpolator3 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator2).when(stepInterpolator3).copy();
      doReturn(1462.0).when(stepInterpolator3).getCurrentTime();
      continuousOutputModel0.handleStep(stepInterpolator3, true);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 459.1854473186917;
      doubleArray0[1] = (-1992.202777);
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(459.1854473186917, (-1992.202777), (-1992.202777), 459.1854473186917, 459.1854473186917).when(stepInterpolator0).getCurrentTime();
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryDerivatives(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedSecondaryState(anyInt());
      doReturn(doubleArray0).when(stepInterpolator0).getInterpolatedState();
      doReturn(459.1854473186917, 302.0).when(stepInterpolator0).getInterpolatedTime();
      doReturn((-1391.3715171863037), 302.0, 133.72367931797, 1930.954156, 459.1854473186917).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-1.0)).when(stepInterpolator1).getCurrentTime();
      doReturn(3398.55189680326).when(stepInterpolator1).getPreviousTime();
      doReturn(true).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.getInterpolatedState();
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.getInterpolatedSecondaryState(2);
      continuousOutputModel0.getInterpolatedSecondaryDerivatives(302);
      continuousOutputModel0.setInterpolatedTime(302);
      continuousOutputModel0.setInterpolatedTime(0.5);
      assertEquals(3398.55189680326, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((StepInterpolator) null).when(stepInterpolator0).copy();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(1645.0).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel1.handleStep(stepInterpolator1, false);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator0).getInterpolatedDerivatives();
      doReturn(0.0).when(stepInterpolator0).getInterpolatedTime();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(stepInterpolator0).getPreviousTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn((-430.818938151702)).when(stepInterpolator1).getCurrentTime();
      doReturn((-430.818938151702)).when(stepInterpolator1).getPreviousTime();
      doReturn(false).when(stepInterpolator1).isForward();
      continuousOutputModel0.handleStep(stepInterpolator1, true);
      continuousOutputModel0.setInterpolatedTime(1848.7420506651094);
      continuousOutputModel0.setInterpolatedTime((-1.0));
      continuousOutputModel0.getInterpolatedDerivatives();
      continuousOutputModel0.getInterpolatedTime();
      continuousOutputModel0.setInterpolatedTime(0.0);
      assertEquals((-430.818938151702), continuousOutputModel0.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      StepInterpolator stepInterpolator0 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(stepInterpolator0).getCurrentTime();
      StepInterpolator stepInterpolator1 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator0).when(stepInterpolator1).copy();
      doReturn(1029.89752336, (-1808.42096084785)).when(stepInterpolator1).getCurrentTime();
      doReturn((double[]) null).when(stepInterpolator1).getInterpolatedState();
      doReturn((-1808.42096084785), (-1808.42096084785), 622.0).when(stepInterpolator1).getPreviousTime();
      StepInterpolator stepInterpolator2 = mock(StepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(stepInterpolator1).when(stepInterpolator2).copy();
      doReturn((-1808.42096084785)).when(stepInterpolator2).getPreviousTime();
      doReturn(true).when(stepInterpolator2).isForward();
      continuousOutputModel0.handleStep(stepInterpolator2, false);
      continuousOutputModel0.setInterpolatedTime((-483.0));
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.append(continuousOutputModel0);
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.ContinuousOutputModel", e);
      }
  }
}

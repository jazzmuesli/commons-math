/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:41:50 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.ExpandableStatefulODE;
import org.apache.commons.math4.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math4.ode.nonstiff.AdamsMoultonIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AdamsIntegrator_ESTest extends AdamsIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(6, 6.0, 0.0, 1.0, 860.1577488725477);
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[4][1];
      double[][] doubleArray2 = new double[9][2];
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.initializeHighOrderDerivatives((-1.309893394818129E-156), doubleArray0, doubleArray1, doubleArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular: 0 is smaller than the minimum (0): index (0)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition$Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(13, 13, 13, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.updateHighOrderDerivativesPhase2(doubleArray0, doubleArray0, (Array2DRowRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-0.1), (-0.1), (-0.1), (-2137.835005277132));
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[4][0];
      double[] doubleArray2 = new double[9];
      doubleArray1[0] = doubleArray2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = adamsBashforthIntegrator0.initializeHighOrderDerivatives(0.0, doubleArray0, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.updateHighOrderDerivativesPhase2(doubleArray2, doubleArray0, array2DRowRealMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(6, 0.0, 6, 6, 285.1126840745636);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.updateHighOrderDerivativesPhase1((Array2DRowRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-0.1), (-0.1), (-0.1), (-2137.835005277132));
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((-1103.97301541), (-0.1)).when(expandableStatefulODE0).getTime();
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-0.1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math4.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-0.1), (-0.1), (-0.1), (-2137.835005277132));
      ExpandableStatefulODE expandableStatefulODE0 = mock(ExpandableStatefulODE.class, new ViolatedAssumptionAnswer());
      doReturn((EquationsMapper) null).when(expandableStatefulODE0).getPrimaryMapper();
      doReturn(0.0, 0.0).when(expandableStatefulODE0).getTime();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-0.1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(6, 0.0, 6, 6, 285.1126840745636);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.initializeHighOrderDerivatives(2281.22180029892, (double[]) null, (double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(6, 6.0, 0.0, 1.0, 860.1577488725477);
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.initializeHighOrderDerivatives((-1.309893394818129E-156), doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-0.1), (-0.1), (-0.1), (-2137.835005277132));
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = adamsBashforthIntegrator0.initializeHighOrderDerivatives(0.0, doubleArray0, doubleArray1, doubleArray1);
      adamsBashforthIntegrator0.updateHighOrderDerivativesPhase2(doubleArray0, doubleArray0, array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-0.1), (-0.1), (-0.1), (-2137.835005277132));
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = adamsBashforthIntegrator0.initializeHighOrderDerivatives(0.0, doubleArray0, doubleArray1, doubleArray1);
      Array2DRowRealMatrix array2DRowRealMatrix1 = adamsBashforthIntegrator0.updateHighOrderDerivativesPhase1(array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix1.getRowDimension());
  }
}

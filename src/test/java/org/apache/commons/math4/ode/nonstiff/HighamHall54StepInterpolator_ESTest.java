/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:43:48 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class HighamHall54StepInterpolator_ESTest extends HighamHall54StepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertNotNull(highamHall54StepInterpolator0);
      
      highamHall54StepInterpolator0.setSoftPreviousTime(0.0);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = (HighamHall54StepInterpolator)highamHall54StepInterpolator0.doCopy();
      assertFalse(highamHall54StepInterpolator1.equals((Object)highamHall54StepInterpolator0));
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator1.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(highamHall54StepInterpolator0, highamHall54StepInterpolator1);
      assertNotSame(highamHall54StepInterpolator1, highamHall54StepInterpolator0);
      assertNotNull(highamHall54StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      highamHall54StepInterpolator0.setSoftPreviousTime((-1732.8383));
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-1732.8383), highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = (HighamHall54StepInterpolator)highamHall54StepInterpolator0.doCopy();
      assertFalse(highamHall54StepInterpolator1.equals((Object)highamHall54StepInterpolator0));
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-1732.8383), highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator1.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals((-1732.8383), highamHall54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(highamHall54StepInterpolator0, highamHall54StepInterpolator1);
      assertNotSame(highamHall54StepInterpolator1, highamHall54StepInterpolator0);
      assertNotNull(highamHall54StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      highamHall54StepInterpolator0.storeTime(0.0);
      assertEquals(0.0, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(0.0, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = (HighamHall54StepInterpolator)highamHall54StepInterpolator0.doCopy();
      assertFalse(highamHall54StepInterpolator1.equals((Object)highamHall54StepInterpolator0));
      assertEquals(0.0, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(0.0, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator1.isForward());
      assertEquals(0.0, highamHall54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(0.0, highamHall54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(highamHall54StepInterpolator0, highamHall54StepInterpolator1);
      assertNotSame(highamHall54StepInterpolator1, highamHall54StepInterpolator0);
      assertNotNull(highamHall54StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      highamHall54StepInterpolator0.storeTime((-1334.2164519));
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = (HighamHall54StepInterpolator)highamHall54StepInterpolator0.doCopy();
      assertFalse(highamHall54StepInterpolator1.equals((Object)highamHall54StepInterpolator0));
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1334.2164519), highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-1334.2164519), highamHall54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals((-1334.2164519), highamHall54StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator1.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-1334.2164519), highamHall54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(highamHall54StepInterpolator0, highamHall54StepInterpolator1);
      assertNotSame(highamHall54StepInterpolator1, highamHall54StepInterpolator0);
      assertNotNull(highamHall54StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      double[] doubleArray0 = new double[5];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[3];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      highamHall54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, (double[][]) null, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertFalse(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, equationsMapperArray0.length);
      
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[4][2];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      highamHall54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, equationsMapperArray0.length);
      
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.computeInterpolatedStateAndDerivatives(0.6510416666666666, 0.6510416666666666);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator0);
      
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = new HighamHall54StepInterpolator(highamHall54StepInterpolator0);
      assertFalse(highamHall54StepInterpolator1.equals((Object)highamHall54StepInterpolator0));
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(highamHall54StepInterpolator1.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, highamHall54StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotNull(highamHall54StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      equationsMapperArray0[0] = equationsMapper0;
      highamHall54StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.getInterpolatedSecondaryState(1071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1071
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      double[] doubleArray0 = new double[2];
      highamHall54StepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      double[] doubleArray0 = new double[3];
      highamHall54StepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.computeInterpolatedStateAndDerivatives((-91.125), 108.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = null;
      try {
        highamHall54StepInterpolator0 = new HighamHall54StepInterpolator((HighamHall54StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }
}

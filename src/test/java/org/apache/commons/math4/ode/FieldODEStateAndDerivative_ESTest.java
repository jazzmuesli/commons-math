/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:40:41 GMT 2019
 */

package org.apache.commons.math4.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.dfp.Decimal10;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FieldODEStateAndDerivative_ESTest extends FieldODEStateAndDerivative_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1.0));
      Decimal64[] decimal64Array0 = new Decimal64[0];
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Decimal64>(decimal64_0, decimal64Array0, decimal64Array0);
      // Undeclared exception!
      try { 
        fieldODEStateAndDerivative0.getSecondaryDerivative((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEStateAndDerivative", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null, (DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[3];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0);
      Dfp[] dfpArray1 = fieldODEStateAndDerivative0.getSecondaryDerivative(0);
      assertFalse(dfpArray1.equals((Object)dfpArray0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0, (DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[0];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0);
      Dfp[] dfpArray1 = fieldODEStateAndDerivative0.getDerivative();
      assertNotSame(dfpArray0, dfpArray1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null, (DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[3];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0);
      // Undeclared exception!
      try { 
        fieldODEStateAndDerivative0.getSecondaryDerivative((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEStateAndDerivative", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn((DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[0];
      Dfp[][] dfpArray1 = new Dfp[4][6];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      try {
        fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0, dfpArray1, dfpArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Decimal10> class0 = Decimal10.class;
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(dfpField0).getRuntimeClass();
      doReturn((Dfp) null).when(dfpField0).getZero();
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[3];
      Dfp[][] dfpArray1 = new Dfp[2][0];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      try {
        fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0, dfpArray1, dfpArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // [Lorg.apache.commons.math4.dfp.Dfp;
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = null;
      try {
        fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, (Dfp[]) null, (Dfp[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.FieldODEState", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DfpField dfpField0 = mock(DfpField.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      doReturn(dfpField0, (DfpField) null).when(dfp0).getField();
      Dfp[] dfpArray0 = new Dfp[0];
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Dfp>(dfp0, dfpArray0, dfpArray0);
      Dfp[] dfpArray1 = fieldODEStateAndDerivative0.getSecondaryDerivative(0);
      assertFalse(dfpArray1.equals((Object)dfpArray0));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64((-1919.8));
      Decimal64[] decimal64Array0 = new Decimal64[7];
      Decimal64[][] decimal64Array1 = new Decimal64[2][0];
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Decimal64>(decimal64_0, decimal64Array0, decimal64Array0, decimal64Array1, decimal64Array1);
      // Undeclared exception!
      try { 
        fieldODEStateAndDerivative0.getSecondaryDerivative(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.apache.commons.math4.ode.FieldODEStateAndDerivative", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Decimal64 decimal64_0 = new Decimal64(0.0);
      Decimal64[] decimal64Array0 = new Decimal64[4];
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = new FieldODEStateAndDerivative<Decimal64>(decimal64_0, decimal64Array0, decimal64Array0);
      Decimal64[] decimal64Array1 = fieldODEStateAndDerivative0.getDerivative();
      assertFalse(decimal64Array1.equals((Object)decimal64Array0));
  }
}

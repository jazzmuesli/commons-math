/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:33:30 GMT 2019
 */

package org.apache.commons.math4.ode.sampling;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.RealFieldElement;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.ode.FieldODEStateAndDerivative;
import org.apache.commons.math4.ode.sampling.FieldFixedStepHandler;
import org.apache.commons.math4.ode.sampling.FieldStepInterpolator;
import org.apache.commons.math4.ode.sampling.FieldStepNormalizer;
import org.apache.commons.math4.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math4.ode.sampling.StepNormalizerMode;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldStepNormalizer_ESTest extends FieldStepNormalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldFixedStepHandler<Decimal64> fieldFixedStepHandler0 = (FieldFixedStepHandler<Decimal64>) mock(FieldFixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      FieldStepNormalizer<Decimal64> fieldStepNormalizer0 = new FieldStepNormalizer<Decimal64>(0.0, fieldFixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(fieldStepNormalizer0);
      
      Decimal64 decimal64_0 = new Decimal64(0.0);
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0L, decimal64_0.round());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
      assertNotNull(decimal64_0);
      
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      fieldStepNormalizer0.init(fieldODEStateAndDerivative0, decimal64_0);
      assertEquals(0.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals((short)0, decimal64_0.shortValue());
      assertEquals(0L, decimal64_0.round());
      assertFalse(decimal64_0.isInfinite());
      assertEquals("0.0", decimal64_0.toString());
      assertEquals(0, decimal64_0.intValue());
      assertEquals(0L, decimal64_0.longValue());
      assertFalse(decimal64_0.isNaN());
      assertEquals((byte)0, decimal64_0.byteValue());
      assertEquals(0.0, decimal64_0.doubleValue(), 0.01);
      assertEquals(0.0, decimal64_0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      FieldFixedStepHandler<Decimal64> fieldFixedStepHandler0 = (FieldFixedStepHandler<Decimal64>) mock(FieldFixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FieldStepNormalizer<Decimal64> fieldStepNormalizer0 = new FieldStepNormalizer<Decimal64>((-702.895991682), fieldFixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      assertNotNull(fieldStepNormalizer0);
      
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getPreviousState();
      doReturn(false).when(fieldStepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        fieldStepNormalizer0.handleStep(fieldStepInterpolator0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.FieldStepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldFixedStepHandler<Decimal64> fieldFixedStepHandler0 = (FieldFixedStepHandler<Decimal64>) mock(FieldFixedStepHandler.class, new ViolatedAssumptionAnswer());
      FieldStepNormalizer<Decimal64> fieldStepNormalizer0 = new FieldStepNormalizer<Decimal64>((-1130.109), fieldFixedStepHandler0);
      assertNotNull(fieldStepNormalizer0);
      
      Decimal64 decimal64_0 = new Decimal64(32760);
      assertEquals(32760.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(32760, decimal64_0.intValue());
      assertEquals(32760L, decimal64_0.longValue());
      assertEquals((byte) (-8), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(32760.0, decimal64_0.getReal(), 0.01);
      assertEquals((short)32760, decimal64_0.shortValue());
      assertEquals(32760L, decimal64_0.round());
      assertEquals("32760.0", decimal64_0.toString());
      assertFalse(decimal64_0.isNaN());
      assertEquals(32760.0, decimal64_0.doubleValue(), 0.01);
      assertNotNull(decimal64_0);
      
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0, (RealFieldElement) null).when(fieldODEStateAndDerivative0).getTime();
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative1 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldODEStateAndDerivative1).getTime();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn(fieldODEStateAndDerivative1).when(fieldStepInterpolator0).getCurrentState();
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getPreviousState();
      doReturn(false).when(fieldStepInterpolator0).isForward();
      fieldStepNormalizer0.handleStep(fieldStepInterpolator0, true);
      assertEquals(32760.0F, decimal64_0.floatValue(), 0.01F);
      assertEquals(32760, decimal64_0.intValue());
      assertEquals(32760L, decimal64_0.longValue());
      assertEquals((byte) (-8), decimal64_0.byteValue());
      assertFalse(decimal64_0.isInfinite());
      assertEquals(32760.0, decimal64_0.getReal(), 0.01);
      assertEquals((short)32760, decimal64_0.shortValue());
      assertEquals(32760L, decimal64_0.round());
      assertEquals("32760.0", decimal64_0.toString());
      assertFalse(decimal64_0.isNaN());
      assertEquals(32760.0, decimal64_0.doubleValue(), 0.01);
      
      FieldStepInterpolator<Decimal64> fieldStepInterpolator1 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fieldStepNormalizer0.handleStep(fieldStepInterpolator1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.FieldStepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      FieldStepNormalizer<Dfp> fieldStepNormalizer0 = new FieldStepNormalizer<Dfp>(1.0, (FieldFixedStepHandler<Dfp>) null, stepNormalizerMode0, stepNormalizerBounds0);
      FieldODEStateAndDerivative<Dfp> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Dfp>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fieldStepNormalizer0.init(fieldODEStateAndDerivative0, dfp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.FieldStepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldFixedStepHandler<Decimal64> fieldFixedStepHandler0 = (FieldFixedStepHandler<Decimal64>) mock(FieldFixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      FieldStepNormalizer<Decimal64> fieldStepNormalizer0 = new FieldStepNormalizer<Decimal64>(0.0, fieldFixedStepHandler0, stepNormalizerMode0);
      Decimal64 decimal64_0 = new Decimal64(643.7112917122);
      FieldODEStateAndDerivative<Decimal64> fieldODEStateAndDerivative0 = (FieldODEStateAndDerivative<Decimal64>) mock(FieldODEStateAndDerivative.class, new ViolatedAssumptionAnswer());
      doReturn(decimal64_0).when(fieldODEStateAndDerivative0).getTime();
      FieldStepInterpolator<Decimal64> fieldStepInterpolator0 = (FieldStepInterpolator<Decimal64>) mock(FieldStepInterpolator.class, new ViolatedAssumptionAnswer());
      doReturn((FieldODEStateAndDerivative) null).when(fieldStepInterpolator0).getCurrentState();
      doReturn(fieldODEStateAndDerivative0).when(fieldStepInterpolator0).getPreviousState();
      doReturn(true).when(fieldStepInterpolator0).isForward();
      // Undeclared exception!
      try { 
        fieldStepNormalizer0.handleStep(fieldStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.FieldStepNormalizer", e);
      }
  }
}

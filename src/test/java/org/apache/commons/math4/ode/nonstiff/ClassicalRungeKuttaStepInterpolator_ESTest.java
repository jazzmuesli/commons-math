/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:20:15 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassicalRungeKuttaStepInterpolator_ESTest extends ClassicalRungeKuttaStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.doCopy();
      double double0 = (-1.0);
      classicalRungeKuttaStepInterpolator0.setSoftPreviousTime((-68.0));
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime((-68.0));
      double double1 = 2709.254143280913;
      classicalRungeKuttaStepInterpolator0.storeTime(2709.254143280913);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2709.254143280913;
      doubleArray0[1] = 2709.254143280913;
      doubleArray0[2] = 2709.254143280913;
      doubleArray0[3] = (-68.0);
      doubleArray0[4] = 2709.254143280913;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-68.0);
      doubleArray0[7] = (-68.0);
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      boolean boolean0 = false;
      double double2 = 198.50971388813971;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.5, (-2922.603579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-908.7279);
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-908.7279);
      doubleArray2[1] = (-908.7279);
      doubleArray2[2] = (-908.7279);
      doubleArray2[3] = (-908.7279);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-908.7279);
      doubleArray1[2] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-908.7279);
      doubleArray1[3] = doubleArray3;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(12, 12).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      doubleArray0[1] = 0.0;
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      classicalRungeKuttaStepInterpolator0.doCopy();
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double double0 = 682.6969199172546;
      double double1 = 909.2200654374625;
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 682.6969199172546;
      doubleArray0[3] = 3523.7352;
      doubleArray0[4] = 9.0;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.getInterpolatedSecondaryState((-1224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1224
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.setSoftCurrentTime((-3683.0));
      classicalRungeKuttaStepInterpolator0.doCopy();
      double double0 = 8.906422717743473;
      classicalRungeKuttaStepInterpolator0.storeTime(0.0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(2135.94966061614, 8.906422717743473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.setSoftPreviousTime((-3.0));
      classicalRungeKuttaStepInterpolator0.doCopy();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.doCopy();
      double double0 = (-917.3095);
      classicalRungeKuttaStepInterpolator1.setSoftPreviousTime((-3.0));
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator1.computeInterpolatedStateAndDerivatives((-917.3095), (-917.3095));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.setSoftPreviousTime(49.283);
      classicalRungeKuttaStepInterpolator0.copy();
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[] doubleArray0 = new double[0];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[8];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, (double[][]) null, true, equationsMapper0, equationsMapperArray0);
      classicalRungeKuttaStepInterpolator0.getInterpolatedState();
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime((-0.322376179245283));
      classicalRungeKuttaStepInterpolator0.setSoftPreviousTime(126.0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.storeTime(2352.0);
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator2 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator1);
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator2.integrator;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2352.0;
      doubleArray0[1] = 2352.0;
      doubleArray0[2] = 1023.96427857;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1023.96427857;
      doubleArray2[1] = 1023.96427857;
      doubleArray2[2] = 2352.0;
      doubleArray2[3] = 1023.96427857;
      doubleArray2[4] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper1).getDimension();
      equationsMapperArray0[0] = equationsMapper1;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      classicalRungeKuttaStepInterpolator0.shift();
      classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime(0.0);
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 2352.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-908.7279);
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-908.7279);
      doubleArray2[1] = (-908.7279);
      doubleArray2[2] = (-908.7279);
      doubleArray2[3] = (-908.7279);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-908.7279);
      doubleArray1[2] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-908.7279);
      doubleArray1[3] = doubleArray3;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      doubleArray0[1] = 0.0;
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-21.0);
      doubleArray0[1] = (-1465.0);
      classicalRungeKuttaStepInterpolator1.finalizeStep();
      double double0 = (-1525.386);
      doubleArray0[2] = (-1525.386);
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[1];
      equationsMapperArray0[0] = equationsMapper0;
      classicalRungeKuttaStepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator1.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2923.046;
      doubleArray0[1] = 0.0;
      double double0 = 118.474502255;
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[5];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      doubleArray0[2] = 118.474502255;
      doubleArray0[3] = (-2870.9);
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      double double1 = 866.0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(866.0, 118.474502255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.setSoftPreviousTime(22.739487099350505);
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime(22.739487099350505);
      classicalRungeKuttaStepInterpolator0.previousState = null;
      classicalRungeKuttaStepInterpolator0.doCopy();
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 22.739487099350505;
      doubleArray0[3] = 22.739487099350505;
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[3];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.5, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.setSoftPreviousTime(0.0);
      classicalRungeKuttaStepInterpolator1.storeTime(0.0);
      classicalRungeKuttaStepInterpolator1.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives((-2687.414413), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.finalizeStep();
      double double0 = 0.075;
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      classicalRungeKuttaStepInterpolator1.integrator = null;
      classicalRungeKuttaStepInterpolator1.finalizeStep();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2184.3122978179;
      classicalRungeKuttaStepInterpolator1.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator1.computeInterpolatedStateAndDerivatives(0.075, 2184.3122978179);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime((-1210.17481));
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.doCopy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 12.0;
      doubleArray0[1] = (-1210.17481);
      doubleArray0[2] = (-1210.17481);
      doubleArray0[3] = (-1210.17481);
      doubleArray0[4] = (-1210.17481);
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives((-2619.33878646719), (-2619.33878646719));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.getInterpolatedSecondaryDerivatives(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = null;
      try {
        classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator((ClassicalRungeKuttaStepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3170.079952966886;
      doubleArray1[2] = (-333.46288553);
      doubleArray1[3] = 14.0;
      doubleArray1[4] = 105.0;
      doubleArray1[5] = 3.5555555555555554;
      doubleArray1[6] = (-77.8296238);
      doubleArray1[7] = 2200.718;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2200.718;
      doubleArray2[1] = 14.0;
      doubleArray2[2] = 2200.718;
      doubleArray2[3] = 3170.079952966886;
      doubleArray2[4] = (-77.8296238);
      doubleArray2[5] = 105.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3.5555555555555554;
      doubleArray3[1] = (-77.8296238);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 3170.079952966886;
      doubleArray3[4] = (-333.46288553);
      doubleArray3[5] = 2200.718;
      doubleArray3[6] = (-333.46288553);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-333.46288553);
      doubleArray4[1] = 14.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 3170.079952966886;
      doubleArray5[1] = (-333.46288553);
      doubleArray5[2] = 3170.079952966886;
      doubleArray5[3] = 14.0;
      doubleArray5[4] = 3.5555555555555554;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 3170.079952966886;
      doubleArray6[1] = (-77.8296238);
      doubleArray6[2] = 3.5555555555555554;
      doubleArray6[3] = 14.0;
      doubleArray6[4] = 3.5555555555555554;
      doubleArray6[5] = 2200.718;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-333.46288553);
      doubleArray7[1] = 3.5555555555555554;
      doubleArray7[2] = 2200.718;
      doubleArray7[3] = 105.0;
      doubleArray7[4] = 14.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 105.0;
      doubleArray8[1] = 105.0;
      doubleArray8[2] = 3170.079952966886;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 105.0;
      doubleArray8[6] = 105.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 105.0;
      doubleArray9[1] = 3170.079952966886;
      doubleArray9[2] = 14.0;
      doubleArray9[3] = 105.0;
      doubleArray9[4] = 3170.079952966886;
      doubleArray9[5] = (-77.8296238);
      doubleArray9[6] = 105.0;
      doubleArray0[8] = doubleArray9;
      classicalRungeKuttaStepInterpolator0.yDotK = doubleArray0;
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.doCopy();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator0.integrator;
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[4] = doubleArray2;
      classicalRungeKuttaStepInterpolator0.copy();
      doubleArray1[5] = doubleArray0;
      classicalRungeKuttaStepInterpolator0.previousState = doubleArray0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.getInterpolatedSecondaryState(3716);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime((-1.0));
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime((-1.0));
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.getInterpolatedDerivatives();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double double0 = 0.0;
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime(0.0);
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator1.integrator;
      classicalRungeKuttaStepInterpolator0.integrator = null;
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives((-1295.9784086245), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
      classicalRungeKuttaStepInterpolator1.copy();
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime(1013.95469629);
      classicalRungeKuttaStepInterpolator1.doCopy();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator2 = (ClassicalRungeKuttaStepInterpolator)classicalRungeKuttaStepInterpolator1.doCopy();
      classicalRungeKuttaStepInterpolator2.finalizeStep();
      // Undeclared exception!
      try { 
        classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 1013.95469629);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.storeTime(2352.0);
      classicalRungeKuttaStepInterpolator0.finalizeStep();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator2 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator1);
      AbstractIntegrator abstractIntegrator0 = classicalRungeKuttaStepInterpolator2.integrator;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2352.0;
      doubleArray0[1] = 2352.0;
      doubleArray0[2] = 1023.96427857;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1023.96427857;
      doubleArray2[1] = 1023.96427857;
      doubleArray2[2] = 2352.0;
      doubleArray2[3] = 1023.96427857;
      doubleArray2[4] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(7, 7, 7, 3, 2583).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      EquationsMapper equationsMapper1 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(5, 1921).when(equationsMapper1).getDimension();
      equationsMapperArray0[0] = equationsMapper1;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      classicalRungeKuttaStepInterpolator0.shift();
      classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 1023.96427857);
      classicalRungeKuttaStepInterpolator0.setInterpolatedTime(0.0);
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.doCopy();
      classicalRungeKuttaStepInterpolator0.computeInterpolatedStateAndDerivatives(2352.0, 2352.0);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:09:23 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.ClassicalRungeKuttaStepInterpolator;
import org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator;
import org.apache.commons.math4.ode.nonstiff.EulerStepInterpolator;
import org.apache.commons.math4.ode.nonstiff.GillStepInterpolator;
import org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator;
import org.apache.commons.math4.ode.nonstiff.LutherStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RungeKuttaStepInterpolator_ESTest extends RungeKuttaStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[7][1];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 1, 645).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      dormandPrince853StepInterpolator0.shift();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[7][6];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, (-2558)).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      equationsMapperArray0[0] = equationsMapper0;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(8.0, 8.0, 0.0, 8.0, 8.0).when(objectInput0).readDouble();
      doReturn(933).when(objectInput0).readInt();
      doReturn((-1507)).when(objectInput0).read();
      doReturn((String) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        gillStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LutherStepInterpolator lutherStepInterpolator0 = new LutherStepInterpolator();
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 760.901227469718, 1.0, (-518.8659577)).when(objectInput0).readDouble();
      doReturn((-2149)).when(objectInput0).readInt();
      doReturn(lutherStepInterpolator0).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        lutherStepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math4.ode.nonstiff.LutherStepInterpolator cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn((-190.30463903259061), (-190.30463903259061), (-190.30463903259061), (-190.30463903259061), (-190.30463903259061)).when(objectInput0).readDouble();
      doReturn((-3730), (-3730), 0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      dormandPrince853StepInterpolator0.readExternal(objectInput0);
      dormandPrince853StepInterpolator0.doCopy();
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      HighamHall54StepInterpolator highamHall54StepInterpolator1 = new HighamHall54StepInterpolator(highamHall54StepInterpolator0);
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator1.computeInterpolatedStateAndDerivatives((-190.30463903259061), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[4][9];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[9];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      equationsMapperArray0[7] = equationsMapper0;
      equationsMapperArray0[8] = equationsMapper0;
      classicalRungeKuttaStepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, equationsMapperArray0);
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator1 = null;
      try {
        classicalRungeKuttaStepInterpolator1 = new ClassicalRungeKuttaStepInterpolator(classicalRungeKuttaStepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      // Undeclared exception!
      try { 
        gillStepInterpolator0.shift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[7][6];
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[6];
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:19:23 GMT 2019
 */

package org.apache.commons.math4.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import org.apache.commons.math4.ode.AbstractIntegrator;
import org.apache.commons.math4.ode.EquationsMapper;
import org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DormandPrince853StepInterpolator_ESTest extends DormandPrince853StepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      dormandPrince853StepInterpolator1.setSoftCurrentTime((-11.595793324188385));
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.595793324188385);
      doubleArray0[1] = (-11.595793324188385);
      doubleArray0[2] = (-11.595793324188385);
      doubleArray0[3] = (-11.595793324188385);
      doubleArray0[4] = (-11.595793324188385);
      doubleArray0[5] = (-11.595793324188385);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      // Undeclared exception!
      dormandPrince853StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      dormandPrince853StepInterpolator0.setSoftPreviousTime(0.0);
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1338.39883;
      doubleArray0[1] = 1338.39883;
      doubleArray0[2] = 915.19928601;
      doubleArray0[3] = 915.19928601;
      doubleArray0[4] = 915.19928601;
      doubleArray0[5] = 1338.39883;
      doubleArray0[6] = 1338.39883;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      dormandPrince853StepInterpolator0.doCopy();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      double double0 = 0.0;
      dormandPrince853StepInterpolator0.storeTime(0.0);
      dormandPrince853StepInterpolator0.doCopy();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.computeInterpolatedStateAndDerivatives(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(1343.4, 0.0, 1515.670473562863, (-1267.3469), (-1267.3469)).when(objectInput0).readDouble();
      doReturn((-723), (-723)).when(objectInput0).readInt();
      doReturn(dormandPrince853StepInterpolator0).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      double[][] doubleArray0 = new double[0][7];
      dormandPrince853StepInterpolator0.yDotK = doubleArray0;
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince853StepInterpolator0.storeTime(618.019150263);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(618.019150263, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(618.019150263, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(618.019150263, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince853StepInterpolator0.storeTime((-744.434639));
      assertEquals((-744.434639), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-744.434639), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-744.434639), dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn((-744.434639), (-744.434639), 618.019150263, 4.450312892752409, 60.0).when(objectInput0).readDouble();
      doReturn(33, 5).when(objectInput0).readInt();
      doReturn("j)o1PQv-|").when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1381.9590248218274);
      doubleArray0[1] = 0.022651792198360825;
      doubleArray0[2] = 1.3020833333333333;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-39.17726167561544);
      doubleArray0[5] = 5388.0;
      doubleArray0[6] = 471.1;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(31, 4, 31, 31, (-368)).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      dormandPrince853StepInterpolator0.setSoftPreviousTime((-181.75775));
      assertEquals((-181.75775), dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = (DormandPrince853StepInterpolator)dormandPrince853StepInterpolator0.doCopy();
      assertEquals((-181.75775), dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals((-181.75775), dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      dormandPrince853StepInterpolator0.integrator = null;
      assertEquals((-181.75775), dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      
      dormandPrince853StepInterpolator0.doFinalize();
      assertEquals((-181.75775), dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.getInterpolatedSecondaryState(2635);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      dormandPrince853StepInterpolator0.doFinalize();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      double double0 = (-559.606);
      dormandPrince853StepInterpolator0.storeTime((-559.606));
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      
      dormandPrince853StepInterpolator0.setSoftCurrentTime(7.0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-559.606);
      dormandPrince853StepInterpolator0.previousState = doubleArray0;
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      
      dormandPrince853StepInterpolator0.doFinalize();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = (DormandPrince853StepInterpolator)dormandPrince853StepInterpolator0.doCopy();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(7.0, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      dormandPrince853StepInterpolator0.setInterpolatedTime(7.0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      
      dormandPrince853StepInterpolator0.setSoftPreviousTime((-559.606));
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(7.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals((-559.606), dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      
      ObjectOutput objectOutput0 = null;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      dormandPrince853StepInterpolator0.setInterpolatedTime(0.0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince853StepInterpolator0.setSoftCurrentTime(1144.1269376);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(0.0, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      dormandPrince853StepInterpolator1.doFinalize();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(0.0, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator2 = (DormandPrince853StepInterpolator)dormandPrince853StepInterpolator0.doCopy();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator2.isForward());
      assertEquals(0.0, dormandPrince853StepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator2.getGlobalCurrentTime(), 0.01);
      assertEquals(1144.1269376, dormandPrince853StepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator2.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator2);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator2, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator2, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator2.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator2.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator2);
      
      dormandPrince853StepInterpolator0.storeTime((-113.3));
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-113.3), dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals((-113.3), dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals((-113.3), dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator2);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator2));
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1144.1269376;
      doubleArray0[1] = 1144.1269376;
      doubleArray0[2] = 1144.1269376;
      doubleArray0[3] = (-113.3);
      doubleArray0[4] = 1144.1269376;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-113.3);
      doubleArray0[7] = 0.0;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, false, equationsMapper0, (EquationsMapper[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4330.46841485);
      doubleArray0[1] = 380.3137;
      doubleArray0[2] = (-41.010695550419);
      doubleArray0[3] = (-0.3111643669578199);
      dormandPrince853StepInterpolator0.previousState = doubleArray0;
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.computeInterpolatedStateAndDerivatives(775.29, 8.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      dormandPrince853StepInterpolator1.setSoftCurrentTime((-11.595793324188385));
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-11.595793324188385), dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.595793324188385);
      doubleArray0[1] = (-11.595793324188385);
      doubleArray0[2] = (-11.595793324188385);
      doubleArray0[3] = (-11.595793324188385);
      doubleArray0[4] = (-11.595793324188385);
      doubleArray0[5] = (-11.595793324188385);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[7];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      equationsMapperArray0[5] = equationsMapper0;
      equationsMapperArray0[6] = equationsMapper0;
      dormandPrince853StepInterpolator1.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {(-11.595793324188385), (-11.595793324188385), (-11.595793324188385), (-11.595793324188385), (-11.595793324188385), (-11.595793324188385)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, equationsMapperArray0.length);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.writeExternal(objectOutput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      double double0 = (-3350.69510852247);
      double double1 = 1366.36632010333;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.computeInterpolatedStateAndDerivatives((-3350.69510852247), 1366.36632010333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = null;
      try {
        dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator((DormandPrince853StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(objectInput0).readDouble();
      doReturn(0, 0).when(objectInput0).readInt();
      doReturn(0).when(objectInput0).read();
      doReturn((Object) null).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.readExternal((ObjectInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = (DormandPrince853StepInterpolator)dormandPrince853StepInterpolator0.doCopy();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 14.0;
      doubleArray0[1] = (-60.19669523126412);
      doubleArray0[2] = 1001.6667805477;
      doubleArray0[3] = 1473.624281;
      doubleArray0[4] = (-2353.76104);
      doubleArray0[5] = (-30.674084731089398);
      doubleArray0[6] = 18.148505520854727;
      doubleArray0[7] = 104.0996495089623;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-3775.618271805166);
      doubleArray2[1] = 104.0996495089623;
      doubleArray2[2] = 104.0996495089623;
      doubleArray2[3] = 104.0996495089623;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 14.0;
      doubleArray3[1] = (-3775.618271805166);
      doubleArray3[2] = (-2353.76104);
      doubleArray3[3] = (-3775.618271805166);
      doubleArray1[8] = doubleArray3;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[0];
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {14.0, (-60.19669523126412), 1001.6667805477, 1473.624281, (-2353.76104), (-30.674084731089398), 18.148505520854727, 104.0996495089623}, doubleArray0, 0.01);
      assertEquals(0, equationsMapperArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.RungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator1.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-520.8330357);
      doubleArray0[1] = (-1.6380176890978755);
      doubleArray0[2] = (-996.026577);
      doubleArray0[3] = (-483.5386783903);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.125;
      doubleArray0[6] = 30.0;
      doubleArray0[7] = (-246.02086243630495);
      doubleArray0[8] = 2.9525986892242035;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-149.72683625798564);
      doubleArray2[1] = (-246.02086243630495);
      doubleArray2[2] = (-246.02086243630495);
      doubleArray2[3] = 0.125;
      doubleArray2[4] = 30.0;
      doubleArray2[5] = (-483.5386783903);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-520.8330357);
      doubleArray3[1] = (-246.02086243630495);
      doubleArray3[2] = (-483.5386783903);
      doubleArray3[3] = (-996.026577);
      doubleArray3[4] = (-149.72683625798564);
      doubleArray3[5] = (-520.8330357);
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = null;
      equationsMapperArray0[1] = null;
      equationsMapperArray0[2] = null;
      equationsMapperArray0[3] = null;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, (EquationsMapper) null, equationsMapperArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn((-3035.491615), (-3035.491615), (-3035.491615), (-11.595793324188385), (-11.595793324188385)).when(objectInput0).readDouble();
      doReturn(1821, 1821).when(objectInput0).readInt();
      doReturn(dormandPrince853StepInterpolator1).when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3945.03553883;
      doubleArray0[1] = 1641.6883;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1662.677;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1109.5688773349;
      doubleArray0[7] = 478.1754887731;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[5];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      equationsMapperArray0[4] = equationsMapper0;
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {3945.03553883, 1641.6883, 0.0, 1662.677, 0.0, 0.0, 1109.5688773349, 478.1754887731}, doubleArray0, 0.01);
      assertEquals(5, equationsMapperArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      dormandPrince853StepInterpolator1.doFinalize();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator0.equals((Object)dormandPrince853StepInterpolator1));
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1921.8171408244664);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1921.8171408244664);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      dormandPrince853StepInterpolator1.yDotK = doubleArray0;
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.writeExternal(objectOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 7.0;
      doubleArray0[1] = (-9.332130526430229);
      doubleArray0[2] = (-236.2062);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3.0467644718982196);
      doubleArray0[5] = 3019.84;
      doubleArray0[6] = 2.8462752525252526;
      doubleArray0[7] = 762.8751649;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-3.0467644718982196);
      doubleArray2[1] = (-9.332130526430229);
      doubleArray2[2] = 762.8751649;
      doubleArray2[3] = (-3430.252464923);
      doubleArray2[4] = 762.8751649;
      doubleArray2[5] = 7.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3430.252464923);
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[3];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {7.0, (-9.332130526430229), (-236.2062), 0.0, (-3.0467644718982196), 3019.84, 2.8462752525252526, 762.8751649}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(3, equationsMapperArray0.length);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.computeInterpolatedStateAndDerivatives((-623.36), (-623.36));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      dormandPrince853StepInterpolator0.finalizeStep();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      double[] doubleArray0 = new double[0];
      dormandPrince853StepInterpolator0.previousState = doubleArray0;
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = (DormandPrince853StepInterpolator)dormandPrince853StepInterpolator0.copy();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertNotSame(dormandPrince853StepInterpolator0, dormandPrince853StepInterpolator1);
      assertNotSame(dormandPrince853StepInterpolator1, dormandPrince853StepInterpolator0);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, (double[][]) null, false, equationsMapper0, (EquationsMapper[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator0.integrator;
      assertNull(abstractIntegrator0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1457.8898124417083;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 364.5;
      doubleArray0[3] = 0.03709200011850479;
      doubleArray0[4] = 1447.687103246;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      dormandPrince853StepInterpolator0.setSoftCurrentTime(0.0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[4];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      equationsMapperArray0[2] = equationsMapper0;
      equationsMapperArray0[3] = equationsMapper0;
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertArrayEquals(new double[] {1457.8898124417083, 0.0, 364.5, 0.03709200011850479, 1447.687103246}, doubleArray0, 0.01);
      assertEquals(4, equationsMapperArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      
      dormandPrince853StepInterpolator0.storeTime(0.0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(0.0, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(0.0, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.doFinalize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      int int0 = 7;
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.getInterpolatedSecondaryState(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ode.nonstiff.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(dormandPrince853StepInterpolator0);
      
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator1.getGlobalCurrentTime(), 0.01);
      assertTrue(dormandPrince853StepInterpolator1.isForward());
      assertFalse(dormandPrince853StepInterpolator1.equals((Object)dormandPrince853StepInterpolator0));
      assertNotNull(dormandPrince853StepInterpolator1);
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(49.55607407559181, 49.55607407559181, (-1340.623064802058), 49.55607407559181, (-4409.46250990573)).when(objectInput0).readDouble();
      doReturn((-1486), (-1486)).when(objectInput0).readInt();
      doReturn("$)V>Jkp8d#f]").when(objectInput0).readObject();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator1.readExternal(objectInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.math4.ode.EquationsMapper
         //
         verifyException("org.apache.commons.math4.ode.sampling.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator1 = new DormandPrince853StepInterpolator(dormandPrince853StepInterpolator0);
      AbstractIntegrator abstractIntegrator0 = dormandPrince853StepInterpolator1.integrator;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-209.4262984);
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-209.4262984);
      doubleArray2[2] = (-209.4262984);
      doubleArray2[3] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      EquationsMapper equationsMapper0 = mock(EquationsMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(equationsMapper0).getDimension();
      EquationsMapper[] equationsMapperArray0 = new EquationsMapper[2];
      equationsMapperArray0[0] = equationsMapper0;
      equationsMapperArray0[1] = equationsMapper0;
      dormandPrince853StepInterpolator0.reinitialize((AbstractIntegrator) null, doubleArray0, doubleArray1, true, equationsMapper0, equationsMapperArray0);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:32:24 GMT 2019
 */

package org.apache.commons.math4.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.distribution.AbstractMultivariateRealDistribution;
import org.apache.commons.math4.distribution.MixtureMultivariateNormalDistribution;
import org.apache.commons.math4.distribution.MultivariateNormalDistribution;
import org.apache.commons.math4.distribution.MultivariateRealDistribution;
import org.apache.commons.rng.UniformRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractMultivariateRealDistribution_ESTest extends AbstractMultivariateRealDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractMultivariateRealDistribution.sample(0, (MultivariateRealDistribution.Sampler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractMultivariateRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 176.122;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultivariateRealDistribution.Sampler multivariateRealDistribution_Sampler0 = multivariateNormalDistribution0.createSampler(uniformRandomProvider0);
      assertNotNull(multivariateRealDistribution_Sampler0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractMultivariateRealDistribution.sample(1, (MultivariateRealDistribution.Sampler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractMultivariateRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractMultivariateRealDistribution.sample((-729), (MultivariateRealDistribution.Sampler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // number of samples (-729)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractMultivariateRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 176.122;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      double[][][] doubleArray2 = new double[4][2][8];
      doubleArray2[0] = doubleArray1;
      MixtureMultivariateNormalDistribution mixtureMultivariateNormalDistribution0 = new MixtureMultivariateNormalDistribution(doubleArray0, doubleArray1, doubleArray2);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 0.0).when(uniformRandomProvider0).nextDouble();
      doReturn((long)1).when(uniformRandomProvider0).nextLong();
      MultivariateRealDistribution.Sampler multivariateRealDistribution_Sampler0 = mixtureMultivariateNormalDistribution0.createSampler(uniformRandomProvider0);
      double[][] doubleArray3 = AbstractMultivariateRealDistribution.sample(1, multivariateRealDistribution_Sampler0);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 176.122;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      int int0 = multivariateNormalDistribution0.getDimension();
      assertEquals(1, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:17:34 GMT 2019
 */

package org.apache.commons.math4.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import org.apache.commons.math4.distribution.AbstractRealDistribution;
import org.apache.commons.math4.distribution.EmpiricalDistribution;
import org.apache.commons.math4.stat.descriptive.SummaryStatistics;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.core.source32.MultiplyWithCarry256;
import org.apache.commons.rng.core.source32.Well19937a;
import org.apache.commons.rng.core.source32.Well44497a;
import org.apache.commons.statistics.distribution.ContinuousDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractRealDistribution_ESTest extends AbstractRealDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      empiricalDistribution0.probability(1.0E-6, 1.0E-6);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      empiricalDistribution0.load(doubleArray0);
      double double0 = new Integer(1000);
      empiricalDistribution0.getMean();
      int int0 = EmpiricalDistribution.DEFAULT_BIN_COUNT;
      empiricalDistribution0.getSupportUpperBound();
      empiricalDistribution0.logDensity(0.0);
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      empiricalDistribution0.getKernel(summaryStatistics0);
      empiricalDistribution0.getSolverAbsoluteAccuracy();
      empiricalDistribution0.probability(0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1000;
      intArray0[1] = 1000;
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.saveState();
      empiricalDistribution0.createSampler(well19937a0);
      empiricalDistribution0.getGeneratorUpperBounds();
      empiricalDistribution0.density(0.0);
      empiricalDistribution0.isSupportConnected();
      empiricalDistribution0.getBinStats();
      empiricalDistribution0.cumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      // Undeclared exception!
      try { 
        empiricalDistribution0.inverseCumulativeProbability(1.0E-6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1085);
      empiricalDistribution0.density(0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      Well44497a well44497a0 = new Well44497a(intArray0);
      well44497a0.nextLong();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5664617776823250532L;
      doubleArray0[2] = (-1072.6048243732691);
      doubleArray0[3] = (-3309.96718591);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1085;
      doubleArray0[6] = 1.0E-6;
      doubleArray0[7] = (double) 1000;
      doubleArray0[8] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      well44497a0.nextBoolean();
      empiricalDistribution0.createSampler(well44497a0);
      empiricalDistribution0.density(1085);
      empiricalDistribution0.density((-5.238488022920792E-9));
      empiricalDistribution0.density(0.0);
      empiricalDistribution0.probability((-1047.9167870336423), 152.824243897);
      Random.setNextRandom(0);
      try { 
        MockURL.URL("Ri/LoZc/L0W4g", "Ik0C5fVy", "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ri/lozc/l0w4g
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      double[] doubleArray0 = new double[0];
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.getVariance();
      empiricalDistribution0.inverseCumulativeProbability(0.0);
      empiricalDistribution0.logDensity(0.0);
      empiricalDistribution0.density(Double.NaN);
      empiricalDistribution0.getVariance();
      empiricalDistribution0.logDensity(Double.NaN);
      empiricalDistribution0.isSupportConnected();
      empiricalDistribution0.logDensity(Double.NaN);
      empiricalDistribution0.getGeneratorUpperBounds();
      empiricalDistribution0.logDensity((-1835.057193272));
      empiricalDistribution0.inverseCumulativeProbability(0.0);
      empiricalDistribution0.getSampleStats();
      empiricalDistribution0.probability(0.0, 650.269684948032);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-2074.97727);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      intArray0[2] = 1000;
      Well19937a well19937a0 = new Well19937a(intArray0);
      ContinuousDistribution.Sampler continuousDistribution_Sampler0 = empiricalDistribution0.createSampler(well19937a0);
      AbstractRealDistribution.sample(0, continuousDistribution_Sampler0);
      empiricalDistribution0.isLoaded();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      empiricalDistribution0.inverseCumulativeProbability(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = (double) 1000;
      empiricalDistribution0.logDensity((-504.0589));
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      MockFile mockFile0 = new MockFile("-T'[v&{nz1`=hGkq_", "~%tULN._~<=N~");
      File file0 = mockFile0.getCanonicalFile();
      File file1 = MockFile.createTempFile("~%tULN._~<=N~", "~%tULN._~<=N~", file0);
      empiricalDistribution0.load(file1);
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      empiricalDistribution0.load(doubleArray0);
      assertTrue(empiricalDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      empiricalDistribution0.probability((-1558.0));
      empiricalDistribution0.probability((-1558.0), (-1.0));
      double double0 = (-3.614847626733713E-272);
      // Undeclared exception!
      try { 
        empiricalDistribution0.getMean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URI uRI1 = MockURL.toURI(uRL0);
      empiricalDistribution0.probability(0.0, 0.0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.setReadable(false);
      try { 
        empiricalDistribution0.load((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(5454);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.probability(0.0);
      empiricalDistribution0.getUpperBounds();
      empiricalDistribution0.getGeneratorUpperBounds();
      int[] intArray0 = new int[7];
      intArray0[0] = 5454;
      intArray0[1] = 1000;
      intArray0[2] = 5454;
      intArray0[3] = 5454;
      empiricalDistribution0.getMean();
      intArray0[4] = 1000;
      intArray0[5] = 1000;
      intArray0[6] = 1000;
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      multiplyWithCarry256_0.nextBoolean();
      ContinuousDistribution.Sampler continuousDistribution_Sampler0 = empiricalDistribution0.createSampler(multiplyWithCarry256_0);
      empiricalDistribution0.isLoaded();
      empiricalDistribution0.getMean();
      empiricalDistribution0.getMean();
      // Undeclared exception!
      AbstractRealDistribution.sample(5454, continuousDistribution_Sampler0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      double double0 = empiricalDistribution0.cumulativeProbability(7.0816970994232115E-9);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0E-6;
      doubleArray0[4] = (double) 1000;
      doubleArray0[5] = (double) 1000;
      doubleArray0[6] = (double) 1000;
      doubleArray0[7] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.createSampler((UniformRandomProvider) null);
      double double1 = empiricalDistribution0.cumulativeProbability(1969.0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(2092);
      int[] intArray0 = new int[1];
      intArray0[0] = 2092;
      Well19937a well19937a0 = new Well19937a(intArray0);
      // Undeclared exception!
      try { 
        empiricalDistribution0.createSampler(well19937a0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // distribution not loaded
         //
         verifyException("org.apache.commons.math4.distribution.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1);
      // Undeclared exception!
      try { 
        empiricalDistribution0.probability((double) 1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (1) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      empiricalDistribution0.isLoaded();
      empiricalDistribution0.getSupportLowerBound();
      try { 
        empiricalDistribution0.inverseCumulativeProbability(1578.72192026776);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,578.722 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractRealDistribution.sample(443, (ContinuousDistribution.Sampler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(233);
      empiricalDistribution0.inverseCumulativeProbability(1.0);
      double double0 = empiricalDistribution0.logDensity(157.50837597);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.getVariance();
      empiricalDistribution0.probability(0.0);
      empiricalDistribution0.getUpperBounds();
      empiricalDistribution0.getGeneratorUpperBounds();
      int[] intArray0 = new int[7];
      intArray0[0] = 5454;
      intArray0[1] = 1000;
      intArray0[2] = 5454;
      intArray0[3] = 5454;
      empiricalDistribution0.getMean();
      intArray0[4] = 1000;
      intArray0[5] = 1000;
      intArray0[6] = 1000;
      MultiplyWithCarry256 multiplyWithCarry256_0 = new MultiplyWithCarry256(intArray0);
      ContinuousDistribution.Sampler continuousDistribution_Sampler0 = empiricalDistribution0.createSampler(multiplyWithCarry256_0);
      empiricalDistribution0.isLoaded();
      empiricalDistribution0.getMean();
      // Undeclared exception!
      AbstractRealDistribution.sample(5454, continuousDistribution_Sampler0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(61);
      assertEquals(Double.NEGATIVE_INFINITY, empiricalDistribution0.getSupportUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      URI uRI0 = MockURI.aFileURI;
      empiricalDistribution0.probability((double) 1000, (double) 1000);
      int int0 = empiricalDistribution0.getBinCount();
      assertEquals(1000, int0);
      
      // Undeclared exception!
      try { 
        empiricalDistribution0.getGeneratorUpperBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.EmpiricalDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      empiricalDistribution0.cumulativeProbability(2200.23892);
      // Undeclared exception!
      try { 
        AbstractRealDistribution.sample(1000, (ContinuousDistribution.Sampler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      double double0 = empiricalDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        empiricalDistribution0.probability(5485.8, (double) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (5,485.8) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution();
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      empiricalDistribution0.getKernel(summaryStatistics1);
      empiricalDistribution0.logDensity((-393));
      empiricalDistribution0.isLoaded();
      double double0 = empiricalDistribution0.cumulativeProbability(1000);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmpiricalDistribution empiricalDistribution0 = new EmpiricalDistribution(1085);
      empiricalDistribution0.density(0.0);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-1072.6048243732691);
      doubleArray0[3] = (-3309.96718591);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1085;
      doubleArray0[6] = 1.0E-6;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 1000;
      empiricalDistribution0.load(doubleArray0);
      empiricalDistribution0.density(0.0);
      try { 
        MockURL.URL("Ri/LoZc/L0W4g", "Ik0C5fVy", "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ri/lozc/l0w4g
         //
         verifyException("java.net.URL", e);
      }
  }
}

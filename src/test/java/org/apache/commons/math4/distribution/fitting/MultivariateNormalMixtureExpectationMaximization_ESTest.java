/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:40:32 GMT 2019
 */

package org.apache.commons.math4.distribution.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.distribution.MixtureMultivariateNormalDistribution;
import org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateNormalMixtureExpectationMaximization_ESTest extends MultivariateNormalMixtureExpectationMaximization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2001.74;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2001.74;
      doubleArray2[1] = 2001.74;
      doubleArray2[2] = 2001.74;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2001.74;
      doubleArray4[1] = 2001.74;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2001.74;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2001.74;
      doubleArray6[1] = 2001.74;
      doubleArray6[2] = 2001.74;
      doubleArray6[3] = 2001.74;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 2001.74;
      doubleArray7[1] = 2001.74;
      doubleArray7[2] = 2001.74;
      doubleArray7[3] = 2001.74;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 2001.74;
      doubleArray7[6] = 2001.74;
      doubleArray7[7] = 2001.74;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 2001.74;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // insufficient data: only 1 rows and 1 columns.
         //
         verifyException("org.apache.commons.math4.stat.correlation.Covariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.2781631468016048E205;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 465.0097653459289;
      doubleArray1[6] = 0.0;
      doubleArray0[4] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.2781631468016048E205;
      doubleArray2[1] = 1.2781631468016048E205;
      doubleArray2[2] = 1.2781631468016048E205;
      doubleArray2[3] = 465.0097653459289;
      doubleArray2[4] = 465.0097653459289;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 465.0097653459289;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.2781631468016048E205;
      doubleArray3[5] = 465.0097653459289;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1725.09401;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-521.3983041);
      doubleArray6[1] = 1725.09401;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[17];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1725.09401;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3679.24;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1466.261);
      doubleArray1[5] = 5699.661;
      doubleArray1[6] = 1934.7978489745374;
      doubleArray1[7] = 7.630546413718035E-10;
      doubleArray1[8] = (-1466.261);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1934.7978489745374;
      doubleArray2[1] = 1934.7978489745374;
      doubleArray2[2] = (-1466.261);
      doubleArray2[3] = 3679.24;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1934.7978489745374;
      doubleArray2[7] = 5699.661;
      doubleArray2[8] = (-2554.3255248);
      doubleArray0[1] = doubleArray2;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(2, doubleArray0.length);
      
      try { 
        multivariateNormalMixtureExpectationMaximization0.fit((MixtureMultivariateNormalDistribution) null, 3538, (-2554.3255248));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,554.326 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 384.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.2781631468016048E205;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 465.0097653459289;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.2781631468016048E205;
      doubleArray2[1] = 1.2781631468016048E205;
      doubleArray2[2] = 1.2781631468016048E205;
      doubleArray2[3] = 465.0097653459289;
      doubleArray2[4] = 465.0097653459289;
      doubleArray2[5] = 384.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 384.0;
      doubleArray3[2] = 465.0097653459289;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.2781631468016048E205;
      doubleArray3[5] = 465.0097653459289;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 384.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 384.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1725.09401;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1725.09401;
      doubleArray6[1] = 1725.09401;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1725.09401;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3679.24;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1466.261);
      doubleArray1[5] = 5699.661;
      doubleArray1[6] = 1934.7978489745374;
      doubleArray1[7] = 7.630546413718035E-10;
      doubleArray1[8] = (-2756.654);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2756.654);
      doubleArray2[1] = 1934.7978489745374;
      doubleArray2[2] = (-1466.261);
      doubleArray2[3] = 3679.24;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1934.7978489745374;
      doubleArray2[7] = 5699.661;
      doubleArray2[8] = (-2554.3255248);
      doubleArray0[1] = doubleArray2;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization0.fit((MixtureMultivariateNormalDistribution) null, 501, 4.9E-324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1128.3221;
      doubleArray1[1] = (-608.72318386);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-2611.053998);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization0.getFittedModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-254.906113);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 708.4840223;
      doubleArray0[0] = doubleArray1;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = multivariateNormalMixtureExpectationMaximization0.getLogLikelihood();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization0.getFittedModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.2781631468016048E205;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 465.0097653459289;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.2781631468016048E205;
      doubleArray2[1] = 1.2781631468016048E205;
      doubleArray2[2] = 1.2781631468016048E205;
      doubleArray2[3] = 465.0097653459289;
      doubleArray2[4] = 465.0097653459289;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 465.0097653459289;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.2781631468016048E205;
      doubleArray3[5] = 465.0097653459289;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1725.09401;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-521.3983041);
      doubleArray6[1] = 1725.09401;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1725.09401;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1770.886000741;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, (-4016));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -4,016 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      int int0 = 0;
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate((double[][]) null, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1321.9672826765);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1321.9672826765);
      doubleArray0[1] = doubleArray2;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-1147.7344206321);
      doubleArray2[2] = (-1049.341824258056);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1049.341824258056);
      doubleArray3[5] = (-1049.341824258056);
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-1147.7344206321);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1147.7344206321);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1049.341824258056);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, (-1757));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,757 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, (-3217));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1821.3398957699292;
      doubleArray1[3] = 1653.657093;
      doubleArray1[4] = (-2526.6593107866315);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2526.6593107866315);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1821.3398957699292;
      doubleArray2[4] = 1653.657093;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1821.3398957699292;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3378.4277539372;
      doubleArray3[1] = (-2526.6593107866315);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2526.6593107866315);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2526.6593107866315);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 1110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1,110 is larger than the maximum (4)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3679.24;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1466.261);
      doubleArray1[5] = 5699.661;
      doubleArray1[6] = 1934.7978489745374;
      doubleArray1[7] = 7.630546413718035E-10;
      doubleArray1[8] = (-1466.261);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1934.7978489745374;
      doubleArray2[1] = 1934.7978489745374;
      doubleArray2[2] = (-1466.261);
      doubleArray2[3] = 3679.24;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1934.7978489745374;
      doubleArray2[7] = 5699.661;
      doubleArray2[8] = (-2554.3255248);
      doubleArray0[1] = doubleArray2;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization0.fit((MixtureMultivariateNormalDistribution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3679.24;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1466.261);
      doubleArray1[5] = 5699.661;
      doubleArray1[6] = 1934.7978489745374;
      doubleArray1[7] = 7.630546413718035E-10;
      doubleArray1[8] = (-1466.261);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1934.7978489745374;
      doubleArray2[1] = 1934.7978489745374;
      doubleArray2[2] = (-1466.261);
      doubleArray2[3] = 3679.24;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1934.7978489745374;
      doubleArray2[7] = 5699.661;
      doubleArray2[8] = (-2554.3255248);
      doubleArray0[1] = doubleArray2;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertEquals(2, doubleArray0.length);
      
      MixtureMultivariateNormalDistribution mixtureMultivariateNormalDistribution0 = null;
      try { 
        multivariateNormalMixtureExpectationMaximization0.fit((MixtureMultivariateNormalDistribution) null, (-3125), 1.0E-5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -3,125 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.2781631468016048E205;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 465.0097653459289;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.2781631468016048E205;
      doubleArray2[1] = 1.2781631468016048E205;
      doubleArray2[2] = 1.2781631468016048E205;
      doubleArray2[3] = 465.0097653459289;
      doubleArray2[4] = 465.0097653459289;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 465.0097653459289;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.2781631468016048E205;
      doubleArray3[5] = 465.0097653459289;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 465.0097653459289;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1725.09401;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-521.3983041);
      doubleArray6[1] = 1725.09401;
      doubleArray3[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1725.09401;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1509.855379979592;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1509.855379979592;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1509.855379979592;
      doubleArray3[1] = 464.1285009751752;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1509.855379979592;
      doubleArray3[4] = 2128.320824994915;
      doubleArray3[5] = 1509.855379979592;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2128.320824994915;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2128.320824994915;
      doubleArray4[3] = 2128.320824994915;
      doubleArray4[4] = 464.1285009751752;
      doubleArray4[5] = 464.1285009751752;
      doubleArray4[6] = 464.1285009751752;
      doubleArray4[7] = 1509.855379979592;
      doubleArray4[8] = 1509.855379979592;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 464.1285009751752;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2128.320824994915;
      doubleArray5[4] = 2128.320824994915;
      doubleArray5[5] = 2128.320824994915;
      doubleArray5[6] = 464.1285009751752;
      doubleArray5[7] = 2128.320824994915;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 2128.320824994915;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 2537.955429953645;
      doubleArray7[1] = 2128.320824994915;
      doubleArray7[2] = 464.1285009751752;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 464.1285009751752;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 1509.855379979592;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray0[4] = doubleArray3;
      double[][] doubleArray4 = new double[1][5];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      int int0 = 697;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray4);
      assertEquals(0.0, multivariateNormalMixtureExpectationMaximization0.getLogLikelihood(), 0.01);
      assertNotNull(multivariateNormalMixtureExpectationMaximization0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(1, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        multivariateNormalMixtureExpectationMaximization0.getFittedModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3013.69180917629;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 4.9E-324;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 4.878798101459259E-8;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-5169.3);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 4.9E-324;
      doubleArray2[1] = 4.9E-324;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 4.9E-324;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[1] = (-5169.3);
      doubleArray4[2] = (-5169.3);
      doubleArray4[3] = (-5169.3);
      doubleArray4[4] = 3013.69180917629;
      doubleArray4[5] = 3013.69180917629;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 369.7;
      doubleArray5[1] = 3013.69180917629;
      doubleArray5[2] = (-5169.3);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-5169.3);
      doubleArray5[5] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-5169.3);
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 4.878798101459259E-8;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 1915.1;
      doubleArray8[2] = 3013.69180917629;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = (-5169.3);
      doubleArray9[1] = 369.7;
      doubleArray9[2] = 369.7;
      doubleArray9[3] = 4.9E-324;
      doubleArray9[4] = 4.9E-324;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, 306);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 306 is larger than the maximum (9)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 700.7188429;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1326.529889852301;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 700.7188429;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1326.529889852301;
      doubleArray3[1] = 1326.529889852301;
      doubleArray3[2] = 700.7188429;
      doubleArray3[3] = 700.7188429;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 700.7188429;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 700.7188429;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        MultivariateNormalMixtureExpectationMaximization.estimate(doubleArray0, (-1999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,999 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-8.638415150333099E-8);
      doubleArray0[3] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-8.638415150333099E-8);
      doubleArray2[1] = 6908.054384830205;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-8.638415150333099E-8);
      doubleArray3[2] = 6908.054384830205;
      doubleArray3[3] = 0.0;
      doubleArray3[5] = 6908.054384830205;
      doubleArray3[6] = 6908.054384830205;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-401.953622);
      doubleArray4[2] = 1.4733029698334834E-8;
      doubleArray4[3] = (-8.638415150333099E-8);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 3060.83;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (-8.638415150333099E-8);
      doubleArray0[3] = doubleArray4;
      MultivariateNormalMixtureExpectationMaximization multivariateNormalMixtureExpectationMaximization0 = null;
      try {
        multivariateNormalMixtureExpectationMaximization0 = new MultivariateNormalMixtureExpectationMaximization(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math4.distribution.fitting.MultivariateNormalMixtureExpectationMaximization", e);
      }
  }
}

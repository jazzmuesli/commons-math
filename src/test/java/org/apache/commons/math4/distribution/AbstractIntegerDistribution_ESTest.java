/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:57:35 GMT 2019
 */

package org.apache.commons.math4.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.distribution.AbstractIntegerDistribution;
import org.apache.commons.math4.distribution.AbstractIntegerDistributionTest;
import org.apache.commons.math4.distribution.EnumeratedIntegerDistribution;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.statistics.distribution.DiscreteDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[1] = 481;
      intArray0[3] = (-1711);
      intArray0[4] = 870;
      intArray0[3] = Integer.MIN_VALUE;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability(0.0, Integer.MIN_VALUE, 0);
      enumeratedIntegerDistribution0.getMean();
      enumeratedIntegerDistribution0.getMean();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      double double0 = (-1398.67616797669);
      int int0 = 518;
      int int1 = (-1157);
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(2554.993705, (-1157), 3053);
      int int2 = 2146191051;
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(518, 159, 2146191051);
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability((-1398.67616797669));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,398.676 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn((-3289.81997)).when(uniformRandomProvider0).nextDouble();
      DiscreteDistribution.Sampler discreteDistribution_Sampler0 = abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider0);
      abstractIntegerDistributionTest_DiceDistribution0.probability(656, 656);
      abstractIntegerDistributionTest_DiceDistribution0.logProbability(0);
      abstractIntegerDistributionTest_DiceDistribution0.probability((-3391), (-3391));
      abstractIntegerDistributionTest_DiceDistribution0.probability(0);
      abstractIntegerDistributionTest_DiceDistribution0.getSupportUpperBound();
      abstractIntegerDistributionTest_DiceDistribution0.getSupportLowerBound();
      // Undeclared exception!
      try { 
        AbstractIntegerDistribution.sample(6, discreteDistribution_Sampler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -3,289.82 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.logProbability(1306);
      abstractIntegerDistributionTest_DiceDistribution0.getVariance();
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(Double.NEGATIVE_INFINITY, 2360, 2360);
      abstractIntegerDistributionTest_DiceDistribution0.cumulativeProbability((-1251));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1251);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.getMean();
      enumeratedIntegerDistribution0.probability((-1251), (-1251));
      enumeratedIntegerDistribution0.probability((-2016));
      enumeratedIntegerDistribution0.getSupportUpperBound();
      enumeratedIntegerDistribution0.logProbability((-1251));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.isSupportConnected();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1419);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.probability((-1419));
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      enumeratedIntegerDistribution0.probability((-1535));
      enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
      enumeratedIntegerDistribution0.isSupportConnected();
      abstractIntegerDistributionTest_DiceDistribution0.probability((-1419), 0);
      abstractIntegerDistributionTest_DiceDistribution0.getSupportLowerBound();
      UniformRandomProvider uniformRandomProvider1 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider1);
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(0.0);
      enumeratedIntegerDistribution0.getVariance();
      enumeratedIntegerDistribution0.probability((-1419));
      abstractIntegerDistributionTest_DiceDistribution0.logProbability((-3307));
      int int0 = (-3386);
      abstractIntegerDistributionTest_DiceDistribution0.probability((-3386), (-3307));
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(6.3372065441089185E-9);
      try { 
        enumeratedIntegerDistribution0.probability(0, (-1965));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1,965)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.isSupportConnected();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1419);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.probability((-1419));
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      enumeratedIntegerDistribution0.probability((-1535));
      enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
      enumeratedIntegerDistribution0.isSupportConnected();
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(0.0, (-1535), 1409);
      abstractIntegerDistributionTest_DiceDistribution0.probability((-1419), (-1419));
      int int0 = 0;
      abstractIntegerDistributionTest_DiceDistribution0.probability((-1419), 0);
      abstractIntegerDistributionTest_DiceDistribution0.getSupportLowerBound();
      UniformRandomProvider uniformRandomProvider1 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider1);
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(0.0);
      enumeratedIntegerDistribution0.getVariance();
      enumeratedIntegerDistribution0.probability((-1419));
      abstractIntegerDistributionTest_DiceDistribution0.logProbability((-3307));
      abstractIntegerDistributionTest_DiceDistribution0.probability((-3386), (-3307));
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(6.3372065441089185E-9);
      try { 
        enumeratedIntegerDistribution0.probability(0, (-1965));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1,965)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      int[] intArray0 = new int[6];
      intArray0[0] = 553;
      intArray0[1] = 2;
      intArray0[2] = 892;
      intArray0[3] = 0;
      intArray0[4] = (-2790);
      intArray0[5] = 0;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
      enumeratedIntegerDistribution0.probability(0);
      enumeratedIntegerDistribution0.getSupportUpperBound();
      enumeratedIntegerDistribution0.getSupportUpperBound();
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability(892, 892, 841);
      enumeratedIntegerDistribution0.getSupportLowerBound();
      enumeratedIntegerDistribution0.inverseCumulativeProbability(0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.probability(0, 2);
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability((-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider0);
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(0.0, (-1125), 0);
      abstractIntegerDistributionTest_DiceDistribution0.probability((-252));
      int[] intArray0 = new int[4];
      intArray0[0] = (-252);
      intArray0[1] = (-252);
      intArray0[2] = (-252);
      intArray0[3] = (-252);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-252);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = null;
      try {
        enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math4.distribution.EnumeratedIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = AbstractIntegerDistribution.sample(0, (DiscreteDistribution.Sampler) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = null;
      try {
        enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math4.distribution.EnumeratedIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider0 = null;
      abstractIntegerDistributionTest_DiceDistribution0.createSampler((UniformRandomProvider) null);
      DiscreteDistribution.Sampler discreteDistribution_Sampler0 = abstractIntegerDistributionTest_DiceDistribution0.createSampler((UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        AbstractIntegerDistribution.sample(1, discreteDistribution_Sampler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.rng.sampling.distribution.InverseTransformDiscreteSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(uniformRandomProvider0).nextDouble();
      DiscreteDistribution.Sampler discreteDistribution_Sampler0 = abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider0);
      abstractIntegerDistributionTest_DiceDistribution0.probability(656, 656);
      abstractIntegerDistributionTest_DiceDistribution0.logProbability(0);
      abstractIntegerDistributionTest_DiceDistribution0.probability((-3391), (-3391));
      abstractIntegerDistributionTest_DiceDistribution0.probability(0);
      abstractIntegerDistributionTest_DiceDistribution0.getSupportUpperBound();
      abstractIntegerDistributionTest_DiceDistribution0.getSupportLowerBound();
      AbstractIntegerDistribution.sample(6, discreteDistribution_Sampler0);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = null;
      try {
        enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.EnumeratedIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 732;
      intArray0[2] = 2227;
      intArray0[3] = 0;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.inverseCumulativeProbability(0.0);
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.probability(0);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 238;
      intArray0[1] = (-1180);
      intArray0[2] = (-1180);
      intArray0[3] = (-1180);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      enumeratedIntegerDistribution0.getVariance();
      DiscreteDistribution.Sampler discreteDistribution_Sampler0 = enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
      enumeratedIntegerDistribution0.getSupportUpperBound();
      // Undeclared exception!
      try { 
        AbstractIntegerDistribution.sample((-1180), discreteDistribution_Sampler0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      int int0 = 1485;
      int int1 = (-228);
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.probability(1485, (-228));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (1,485) must be less than or equal to upper endpoint (-228)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.getSupportUpperBound();
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability((-2153.190480517877), 6, 1134);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2046);
      intArray0[1] = (-1);
      intArray0[2] = 707;
      intArray0[3] = (-765);
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 0;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.logProbability((-2570));
      enumeratedIntegerDistribution0.getMean();
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability((-300.4285714285715), 0, (-2032));
      try { 
        enumeratedIntegerDistribution0.inverseCumulativeProbability(1.1759889125823975);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1.176 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.probability(0, 0);
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability((-351.5695171));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -351.57 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 770;
      intArray0[1] = 3888;
      intArray0[2] = (-1);
      intArray0[3] = 2;
      intArray0[4] = (-2677);
      intArray0[5] = 322;
      intArray0[6] = 2024;
      intArray0[7] = 0;
      intArray0[8] = 2;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.probability(322, 770);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider0);
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(0.5074998140335083);
      int int0 = 898;
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.probability(1440, (-1281));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (1,440) must be less than or equal to upper endpoint (-1,281)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(2554.993705, (-1157), 3053);
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(518, 159, 2146191051);
      abstractIntegerDistributionTest_DiceDistribution0.getVariance();
      abstractIntegerDistributionTest_DiceDistribution0.getSupportUpperBound();
      abstractIntegerDistributionTest_DiceDistribution0.getMean();
      int[] intArray0 = new int[9];
      intArray0[0] = 2146191051;
      intArray0[1] = (-1157);
      intArray0[2] = (-1287465173);
      intArray0[3] = 518;
      intArray0[4] = (-62);
      intArray0[7] = 1400;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-859.0);
      doubleArray0[1] = (double) (-1157);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = null;
      try {
        enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math4.distribution.EnumeratedIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 481;
      intArray0[3] = (-1711);
      intArray0[4] = 870;
      intArray0[5] = (-1711);
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability(0.0, 0, (-1711));
      enumeratedIntegerDistribution0.getMean();
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability((-1660.205223694), (-67), 2229);
      enumeratedIntegerDistribution0.getMean();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[1] = 481;
      intArray0[3] = (-1711);
      intArray0[4] = 863;
      intArray0[3] = Integer.MIN_VALUE;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.solveInverseCumulativeProbability(0.0, Integer.MIN_VALUE, 0);
      enumeratedIntegerDistribution0.getMean();
      enumeratedIntegerDistribution0.getMean();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 302;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(uniformRandomProvider0).nextDouble();
      DiscreteDistribution.Sampler discreteDistribution_Sampler0 = enumeratedIntegerDistribution0.createSampler(uniformRandomProvider0);
      AbstractIntegerDistribution.sample(302, discreteDistribution_Sampler0);
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      UniformRandomProvider uniformRandomProvider1 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider1);
      UniformRandomProvider uniformRandomProvider2 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider2);
      enumeratedIntegerDistribution0.cumulativeProbability(302);
      abstractIntegerDistributionTest_DiceDistribution0.cumulativeProbability(0);
      abstractIntegerDistributionTest_DiceDistribution0.isSupportConnected();
      enumeratedIntegerDistribution0.isSupportConnected();
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(302);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 302 out of [0, 1] range
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      double double0 = 0.0;
      int int0 = (-1);
      int int1 = 2;
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(0.0, (-1), 2);
      int int2 = (-1050);
      abstractIntegerDistributionTest_DiceDistribution0.logProbability((-1050));
      abstractIntegerDistributionTest_DiceDistribution0.getSupportLowerBound();
      int int3 = 950;
      abstractIntegerDistributionTest_DiceDistribution0.probability(950, 950);
      try { 
        abstractIntegerDistributionTest_DiceDistribution0.probability(2, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractIntegerDistributionTest abstractIntegerDistributionTest0 = mock(AbstractIntegerDistributionTest.class, new ViolatedAssumptionAnswer());
      AbstractIntegerDistributionTest.DiceDistribution abstractIntegerDistributionTest_DiceDistribution0 = abstractIntegerDistributionTest0.new DiceDistribution();
      abstractIntegerDistributionTest_DiceDistribution0.solveInverseCumulativeProbability(619.2635301790683, 1098, 0);
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(0.3346569538116455);
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(0.0);
      abstractIntegerDistributionTest_DiceDistribution0.logProbability(771);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 771;
      intArray0[2] = 771;
      abstractIntegerDistributionTest_DiceDistribution0.inverseCumulativeProbability(1);
      intArray0[3] = 3;
      intArray0[4] = 3;
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      abstractIntegerDistributionTest_DiceDistribution0.createSampler(uniformRandomProvider0);
      intArray0[5] = 1;
      intArray0[6] = 3;
      intArray0[7] = 3;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = null;
      try {
        enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.distribution.EnumeratedIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 180;
      doubleArray0[2] = (double) 180;
      doubleArray0[7] = (-7.3772);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 368;
      intArray0[1] = (-94);
      intArray0[2] = 0;
      EnumeratedIntegerDistribution enumeratedIntegerDistribution0 = new EnumeratedIntegerDistribution(intArray0);
      enumeratedIntegerDistribution0.cumulativeProbability((-329));
      try { 
        enumeratedIntegerDistribution0.probability(368, (-689));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // lower endpoint (368) must be less than or equal to upper endpoint (-689)
         //
         verifyException("org.apache.commons.math4.distribution.AbstractIntegerDistribution", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:02:19 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math4.analysis.MultivariateFunction;
import org.apache.commons.math4.optim.nonlinear.scalar.ObjectiveFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ObjectiveFunction_ESTest extends ObjectiveFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectiveFunction objectiveFunction0 = new ObjectiveFunction((MultivariateFunction) null);
      MultivariateFunction multivariateFunction0 = objectiveFunction0.getObjectiveFunction();
      assertNull(multivariateFunction0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(multivariateFunction0).toString();
      ObjectiveFunction objectiveFunction0 = new ObjectiveFunction(multivariateFunction0);
      MultivariateFunction multivariateFunction1 = objectiveFunction0.getObjectiveFunction();
      assertSame(multivariateFunction1, multivariateFunction0);
  }
}

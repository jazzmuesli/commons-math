/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:16:42 GMT 2019
 */

package org.apache.commons.math4.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.ConvergenceChecker;
import org.apache.commons.math4.optim.OptimizationData;
import org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math4.optim.univariate.UnivariateOptimizer;
import org.apache.commons.math4.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.rng.UniformRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiStartUnivariateOptimizer_ESTest extends MultiStartUnivariateOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(univariateOptimizer0).getConvergenceChecker();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, 1364, uniformRandomProvider0);
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = null;
      try {
        multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer((UnivariateOptimizer) null, 514, uniformRandomProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(univariateOptimizer0).getConvergenceChecker();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, 684, uniformRandomProvider0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(univariateOptimizer0).getConvergenceChecker();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, 1, uniformRandomProvider0);
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.getOptima();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConvergenceChecker<UnivariatePointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariatePointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(univariateOptimizer0).getConvergenceChecker();
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = null;
      try {
        multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, (-1578), uniformRandomProvider0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,578 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(univariateOptimizer0).getConvergenceChecker();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, 1, uniformRandomProvider0);
      int int0 = multiStartUnivariateOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnivariateOptimizer univariateOptimizer0 = mock(UnivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(univariateOptimizer0).getConvergenceChecker();
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(univariateOptimizer0, 1255, uniformRandomProvider0);
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.optimize((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.BaseOptimizer", e);
      }
  }
}

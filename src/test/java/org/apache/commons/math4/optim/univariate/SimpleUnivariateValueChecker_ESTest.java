/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:46:46 GMT 2019
 */

package org.apache.commons.math4.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.univariate.SimpleUnivariateValueChecker;
import org.apache.commons.math4.optim.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleUnivariateValueChecker_ESTest extends SimpleUnivariateValueChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(0.0, 314.87113170298574);
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(186.6289, (double)(-1)).when(univariatePointValuePair0).getValue();
      boolean boolean0 = simpleUnivariateValueChecker0.converged((-1), univariatePointValuePair0, univariatePointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(4055.948536, 4055.948536);
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 4055.948536).when(univariatePointValuePair0).getValue();
      boolean boolean0 = simpleUnivariateValueChecker0.converged(0, univariatePointValuePair0, univariatePointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(0.0, 314.87113170298574);
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((-534.4831555223316)).when(univariatePointValuePair0).getValue();
      UnivariatePointValuePair univariatePointValuePair1 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(1295.549201).when(univariatePointValuePair1).getValue();
      boolean boolean0 = simpleUnivariateValueChecker0.converged(1473, univariatePointValuePair0, univariatePointValuePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker((-2470.45), (-2123.8), 1192);
      boolean boolean0 = simpleUnivariateValueChecker0.converged(2181, (UnivariatePointValuePair) null, (UnivariatePointValuePair) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(2575.4472, (-1.0));
      // Undeclared exception!
      try { 
        simpleUnivariateValueChecker0.converged(3631, (UnivariatePointValuePair) null, (UnivariatePointValuePair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.SimpleUnivariateValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(97.42, 1.0, 309);
      boolean boolean0 = simpleUnivariateValueChecker0.converged(309, univariatePointValuePair0, univariatePointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = null;
      try {
        simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(0.0, (-1844.81), (-474));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -474 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.SimpleUnivariateValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker(97.42, 1.0, 309);
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(univariatePointValuePair0).getValue();
      boolean boolean0 = simpleUnivariateValueChecker0.converged(37, univariatePointValuePair0, univariatePointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleUnivariateValueChecker simpleUnivariateValueChecker0 = new SimpleUnivariateValueChecker((-1870), 0.0);
      UnivariatePointValuePair univariatePointValuePair0 = mock(UnivariatePointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(270.0335837285464, 270.0335837285464).when(univariatePointValuePair0).getValue();
      boolean boolean0 = simpleUnivariateValueChecker0.converged((-1870), univariatePointValuePair0, univariatePointValuePair0);
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:31:30 GMT 2019
 */

package org.apache.commons.math4.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.SimplePointChecker;
import org.apache.commons.math4.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplePointChecker_ESTest extends SimplePointChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, 0.0);
      Pair<Integer, Object> pair0 = (Pair<Integer, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      Pair<Integer, Object> pair1 = (Pair<Integer, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair1).getKey();
      // Undeclared exception!
      try { 
        simplePointChecker0.converged((-3562), pair0, pair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, 0.0, 2262);
      Pair<Integer, Object> pair0 = (Pair<Integer, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = simplePointChecker0.converged(3172, pair0, pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(858.58518723799, 858.58518723799, 1);
      Pair<Object, Object> pair0 = (Pair<Object, Object>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("").when(pair0).getKey();
      // Undeclared exception!
      try { 
        simplePointChecker0.converged((-1396), pair0, pair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to [D
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = null;
      try {
        simplePointChecker0 = new SimplePointChecker((-401.447366561464), 0.0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }
}

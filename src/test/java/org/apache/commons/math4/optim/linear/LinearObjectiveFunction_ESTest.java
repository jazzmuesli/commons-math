/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:39:54 GMT 2019
 */

package org.apache.commons.math4.optim.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.optim.linear.LinearObjectiveFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearObjectiveFunction_ESTest extends LinearObjectiveFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 1383894.1695453154);
      boolean boolean0 = linearObjectiveFunction1.equals(linearObjectiveFunction0);
      assertFalse(boolean0);
      assertEquals(1383894.1695453154, linearObjectiveFunction1.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      double double0 = linearObjectiveFunction0.value(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-588.32017);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-588.32017));
      double double0 = linearObjectiveFunction0.value(doubleArray0);
      assertEquals(345532.30225882883, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVector0).dotProduct(any(org.apache.commons.math4.linear.RealVector.class));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-3131.66291425));
      double[] doubleArray0 = new double[3];
      double double0 = linearObjectiveFunction0.value(doubleArray0);
      assertEquals((-3131.66291425), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 5600.0);
      RealVector realVector0 = linearObjectiveFunction0.getCoefficients();
      double double0 = linearObjectiveFunction0.value(realVector0);
      assertEquals(5600.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVector0).dotProduct(any(org.apache.commons.math4.linear.RealVector.class));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-3131.66291425));
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      double double0 = linearObjectiveFunction0.value(realVector1);
      assertEquals((-3131.66291425), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      double double0 = linearObjectiveFunction0.getConstantTerm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      double double0 = linearObjectiveFunction0.getConstantTerm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, 0.0);
      linearObjectiveFunction0.getCoefficients();
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.value((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2449.40455478);
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.value(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, 0.0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearObjectiveFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1504.71831207);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realVector0).getDimension();
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.value(realVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 6161.958666902);
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.value((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, (-706.70371356932));
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearObjectiveFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) null, 0.0);
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) null, 0.0);
      // Undeclared exception!
      try { 
        linearObjectiveFunction0.equals(linearObjectiveFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearObjectiveFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realVector0).dotProduct(any(org.apache.commons.math4.linear.RealVector.class));
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, 0.0);
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      double double0 = linearObjectiveFunction0.value(realVector1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, 1383894.1695453154);
      boolean boolean0 = linearObjectiveFunction0.equals(linearObjectiveFunction1);
      assertFalse(boolean0);
      assertEquals(1383894.1695453154, linearObjectiveFunction1.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      boolean boolean0 = linearObjectiveFunction0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-588.32017), linearObjectiveFunction0.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      boolean boolean0 = linearObjectiveFunction0.equals(linearObjectiveFunction0);
      assertEquals((-588.32017), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, (-588.32017));
      boolean boolean0 = linearObjectiveFunction0.equals(linearObjectiveFunction1);
      assertEquals((-588.32017), linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      double double0 = linearObjectiveFunction0.getConstantTerm();
      assertEquals((-588.32017), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      linearObjectiveFunction0.hashCode();
      assertEquals((-588.32017), linearObjectiveFunction0.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn("^^n X").when(realVector0).toString();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(realVector0, (-588.32017));
      RealVector realVector1 = linearObjectiveFunction0.getCoefficients();
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(realVector1, (-588.32017));
      boolean boolean0 = linearObjectiveFunction1.equals(linearObjectiveFunction0);
      assertTrue(boolean0);
      assertEquals((-588.32017), linearObjectiveFunction1.getConstantTerm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = null;
      try {
        linearObjectiveFunction0 = new LinearObjectiveFunction((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:01:09 GMT 2019
 */

package org.apache.commons.math4.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math4.optim.univariate.BracketFinder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BracketFinder_ESTest extends BracketFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3280.0), 0.0, 0.8414709568023682, 927.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 2138.68991);
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3280.0), (-4540.0), 2138.68991, 0.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, 4835.981077859934, (-868.69));
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(659.37610532338, 4835.981077859934, (-747.5), 0.0).when(univariateFunction2).value(anyDouble());
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4835.981077859934, (-3280.0), (-3280.0)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType0, 1727.9277, 3050.48176964);
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction2, goalType1, 0.0, 0.0);
      bracketFinder0.getLo();
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2138.68991, 6545.082160483863, 2649.2196425529).when(univariateFunction4).value(anyDouble());
      GoalType goalType2 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction5 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1727.9277, (-3280.0), 2138.68991).when(univariateFunction5).value(anyDouble());
      bracketFinder0.search(univariateFunction5, goalType2, 0.0, 2061.0113674);
      bracketFinder0.search(univariateFunction4, goalType2, 0.0, 0.0);
      UnivariateFunction univariateFunction6 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.8414709568023682, 659.37610532338, 1727.9277).when(univariateFunction6).value(anyDouble());
      bracketFinder0.search(univariateFunction6, goalType2, 4835.981077859934, 6545.082160483863);
      UnivariateFunction univariateFunction7 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-491.59341), 2094.36221, (-1024.4579174946205), (-3280.0)).when(univariateFunction7).value(anyDouble());
      bracketFinder0.search(univariateFunction7, goalType1, 2061.0113674, 0.0);
      bracketFinder0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      bracketFinder0.getFMid();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3280.0), 0.0, 0.8414709568023682, (-2511.793053)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 2138.68991);
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(735.2665184259575, (-3366.259), 0.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, 4835.981077859934, (-868.69));
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(659.37610532338, 4835.981077859934, (-747.5), (-868.69), 0.0).when(univariateFunction2).value(anyDouble());
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4835.981077859934, (-3280.0), (-3280.0)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType0, 1727.9277, 3050.48176964);
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction2, goalType1, 0.0, 0.0);
      bracketFinder0.getLo();
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2138.68991, 6545.082160483863, 2649.2196425529).when(univariateFunction4).value(anyDouble());
      GoalType goalType2 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction5 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1727.9277, (-3280.0), 2649.2196425529).when(univariateFunction5).value(anyDouble());
      bracketFinder0.search(univariateFunction5, goalType2, 0.0, 2061.0113674);
      bracketFinder0.search(univariateFunction4, goalType2, 0.0, 0.0);
      UnivariateFunction univariateFunction6 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-746.0), 2061.0113674).when(univariateFunction6).value(anyDouble());
      bracketFinder0.search(univariateFunction6, goalType2, 4835.981077859934, 6545.082160483863);
      UnivariateFunction univariateFunction7 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-491.59341), 2094.36221, (-1054.9742120690914), 31847.27312750231).when(univariateFunction7).value(anyDouble());
      bracketFinder0.search(univariateFunction7, goalType1, 2061.0113674, 0.0);
      bracketFinder0.getEvaluations();
      bracketFinder0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0E-21, (-2645.3975119), 525.35982, (-2645.3975119)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 1173.061574554, 1173.061574554);
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-860.796050854), (-2539.54), (-2539.54)).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(451.31637777, (-2539.54), 751.99377, (-700.09)).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType0, 1.0708593250394448E-7, 0.07692307692307693);
      bracketFinder0.search(univariateFunction1, goalType1, (-270.95146237), 1.0E-21);
      bracketFinder0.getHi();
      bracketFinder0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder(4396.68140954174, 814);
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(10357.879760172, 100.0, 2567.0889).when(univariateFunction0).value(anyDouble());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1782461614697106E7, 10357.879760172, 2567.0889, 603.97699314826).when(univariateFunction1).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType0, (-1062.811973924678), 0.5);
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType1, 4396.68140954174, 814);
      bracketFinder0.getLo();
      bracketFinder0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      bracketFinder0.getEvaluations();
      bracketFinder0.getLo();
      bracketFinder0.getMaxEvaluations();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, (-2740.89978), (double)500).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, 1.0E-21, (-1134.660296544621), 0.167).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, (-3318.0), 1.618034);
      bracketFinder0.search(univariateFunction0, goalType0, 1.0E-21, 3956.358);
      bracketFinder0.getEvaluations();
      bracketFinder0.getFLo();
      bracketFinder0.getFHi();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1054.9742120690914), (-2728.862798926539), 100.0, 660.4777648377975, 0.0).when(univariateFunction0).value(anyDouble());
      bracketFinder0.search(univariateFunction0, goalType0, 248.586346537465, (-252.619866272175));
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4848.28, 1.1795268640216787E-8, 4848.28).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(248.586346537465, 1.0, 1.1795268640216787E-8).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType2, 5.0, 5.0);
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-7.0886934867418E11), (-0.16624879837036133), 5.0).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType1, (-1875.138), 5.0);
      bracketFinder0.getMaxEvaluations();
      bracketFinder0.getMid();
      bracketFinder0.getMaxEvaluations();
      bracketFinder0.getFLo();
      bracketFinder0.getFMid();
      bracketFinder0.getMid();
      bracketFinder0.getFHi();
      bracketFinder0.getMaxEvaluations();
      GoalType goalType3 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction3, goalType3, (-1293.19), 576.9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1054.9742120690914), (-2728.862798926539), 100.0, 0.0).when(univariateFunction0).value(anyDouble());
      bracketFinder0.search(univariateFunction0, goalType0, 248.586346537465, (-252.619866272175));
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4848.28, 1.1795268640216787E-8, 4848.28).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(248.586346537465, 1.0, 1.1795268640216787E-8).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType2, 5.0, 5.0);
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-7.0886934867418E11), (-0.16624879837036133), 5.0).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType1, (-1875.138), 5.0);
      bracketFinder0.getMaxEvaluations();
      bracketFinder0.getMid();
      bracketFinder0.getMaxEvaluations();
      bracketFinder0.getFLo();
      bracketFinder0.getFMid();
      bracketFinder0.getMid();
      bracketFinder0.getFHi();
      bracketFinder0.getMaxEvaluations();
      GoalType goalType3 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction3, goalType3, (-1293.19), 576.9);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      bracketFinder0.getEvaluations();
      bracketFinder0.getLo();
      bracketFinder0.getMaxEvaluations();
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 3242.804, 3242.804).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 500, (-1.4472550496687578E7));
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, (-2740.89978), (double)500).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2740.89978), 1.0, 3242.804, 0.0).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType2, 500.0, 2894.872956749964);
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, 1.0E-21, (-1134.660296544621), (double)0, (-2740.89978)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType1, (-3318.0), 1.618034);
      bracketFinder0.search(univariateFunction1, goalType1, 1.0E-21, 3956.358);
      bracketFinder0.getEvaluations();
      bracketFinder0.getFLo();
      bracketFinder0.getFHi();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2058.4074370197, 100.0, 2058.4074370197).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, (-441.818151868402));
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(2058.4074370197, bracketFinder0.getFMid(), 0.01);
      assertEquals(714.876791540238, bracketFinder0.getHi(), 0.01);
      assertEquals(100.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-441.818151868402), bracketFinder0.getLo(), 0.01);
      assertEquals(2058.4074370197, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.043831661111192E-37), 2.800552834259E-8, (-441.818151868402), 100.0).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType1, (-3367.7978242), (-3466.813175002319));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-1.043831661111192E-37), bracketFinder0.getFLo(), 0.01);
      assertEquals((-3207.5876200799203), bracketFinder0.getMid(), 0.01);
      assertEquals(100.0, bracketFinder0.getFHi(), 0.01);
      assertEquals((-441.818151868402), bracketFinder0.getFMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2948.362062666691), bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getLo(), 0.01);
      
      double double0 = bracketFinder0.getLo();
      assertEquals((-3367.7978242), double0, 0.01);
      assertEquals((-1.043831661111192E-37), bracketFinder0.getFLo(), 0.01);
      assertEquals((-3207.5876200799203), bracketFinder0.getMid(), 0.01);
      assertEquals(100.0, bracketFinder0.getFHi(), 0.01);
      assertEquals((-441.818151868402), bracketFinder0.getFMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2948.362062666691), bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(803.733, (-1501.700563838302), (-3367.7978242), (-103995.20581094414), 0.0).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType1, (-1.0), 251.66202228);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(787.1502410668568, bracketFinder0.getMid(), 0.01);
      assertEquals(992.1106144696664, bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      assertEquals((-103995.20581094414), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(660.4777648377975, bracketFinder0.getLo(), 0.01);
      assertEquals((-103995.20581094414), bracketFinder0.getFHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-116.14731319), (-3367.7978242), (-3367.7978242)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType1, 0.0, (-3367.7978242));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double1 = bracketFinder0.getMid();
      assertEquals((-3367.7978242), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double2 = bracketFinder0.getHi();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      int int0 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int0);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double3 = bracketFinder0.getLo();
      assertEquals((-8817.009208881624), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double4 = bracketFinder0.getFHi();
      assertEquals((-116.14731319), double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double5 = bracketFinder0.getLo();
      assertEquals((-8817.009208881624), double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      
      double double6 = bracketFinder0.getHi();
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.9808930158615112, (-2060.77151), 2.0E-21).when(univariateFunction0).value(anyDouble());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1243.8045), 2406.806891, 0.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, (-2497.831629858377), (-2060.77151));
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals((-1353.5933760250714), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-1243.8045), bracketFinder0.getFLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getMid(), 0.01);
      assertEquals((-2497.831629858377), bracketFinder0.getLo(), 0.01);
      assertEquals(2406.806891, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 2713.751038861516);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getFLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getFHi(), 0.01);
      assertEquals(0.9808930158615112, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-4390.941448413254), bracketFinder0.getLo(), 0.01);
      assertEquals(2713.751038861516, bracketFinder0.getHi(), 0.01);
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(3, int0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getFLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getFHi(), 0.01);
      assertEquals(0.9808930158615112, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-4390.941448413254), bracketFinder0.getLo(), 0.01);
      assertEquals(2713.751038861516, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0E-21, 0.0, 1912.91844, 0.0).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType0, (-2060.77151), 3);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(1912.91844, bracketFinder0.getFMid(), 0.01);
      assertEquals((-10803.048014738917), bracketFinder0.getLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getHi(), 0.01);
      assertEquals((-5400.02398141134), bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double0 = bracketFinder0.getFLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(1912.91844, bracketFinder0.getFMid(), 0.01);
      assertEquals((-10803.048014738917), bracketFinder0.getLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getHi(), 0.01);
      assertEquals((-5400.02398141134), bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      int int1 = bracketFinder0.getEvaluations();
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(1912.91844, bracketFinder0.getFMid(), 0.01);
      assertEquals((-10803.048014738917), bracketFinder0.getLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getHi(), 0.01);
      assertEquals((-5400.02398141134), bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2406.806891, (-2060.77151), 2713.751038861516, 0.0).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType0, 3, 4);
      assertEquals(4.0, bracketFinder0.getHi(), 0.01);
      assertEquals(2.132934799665069, bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-2060.77151), bracketFinder0.getFHi(), 0.01);
      assertEquals(3.0, bracketFinder0.getMid(), 0.01);
      assertEquals(2406.806891, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3753351.1901602754, 3418.1003991213383, 4396.68140954174).when(univariateFunction4).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction4, goalType1, 942.8064, 0.5);
      assertSame(goalType1, goalType0);
      assertEquals(942.8064, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.5, bracketFinder0.getLo(), 0.01);
      assertEquals(2467.4901936176, bracketFinder0.getHi(), 0.01);
      assertEquals(3753351.1901602754, bracketFinder0.getFMid(), 0.01);
      assertEquals(3418.1003991213383, bracketFinder0.getFLo(), 0.01);
      assertEquals(4396.68140954174, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      int int2 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(942.8064, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.5, bracketFinder0.getLo(), 0.01);
      assertEquals(2467.4901936176, bracketFinder0.getHi(), 0.01);
      assertEquals(3753351.1901602754, bracketFinder0.getFMid(), 0.01);
      assertEquals(3418.1003991213383, bracketFinder0.getFLo(), 0.01);
      assertEquals(4396.68140954174, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double1 = bracketFinder0.getLo();
      assertEquals(0.5, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(942.8064, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.5, bracketFinder0.getLo(), 0.01);
      assertEquals(2467.4901936176, bracketFinder0.getHi(), 0.01);
      assertEquals(3753351.1901602754, bracketFinder0.getFMid(), 0.01);
      assertEquals(3418.1003991213383, bracketFinder0.getFLo(), 0.01);
      assertEquals(4396.68140954174, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2058.4074370197, 100.0, 2058.4074370197).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, (-441.818151868402));
      assertEquals(714.876791540238, bracketFinder0.getHi(), 0.01);
      assertEquals(2058.4074370197, bracketFinder0.getFMid(), 0.01);
      assertEquals(2058.4074370197, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-441.818151868402), bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(100.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.043831661111192E-37), 2.800552834259E-8, (-441.818151868402), 0.0).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType1, (-3367.7978242), (-3466.813175002319));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-2948.362062666691), bracketFinder0.getHi(), 0.01);
      assertEquals((-1.043831661111192E-37), bracketFinder0.getFLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getLo(), 0.01);
      assertEquals((-3207.5876200799203), bracketFinder0.getMid(), 0.01);
      assertEquals((-441.818151868402), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals((-441.818151868402), bracketFinder0.getFHi(), 0.01);
      
      double double0 = bracketFinder0.getLo();
      assertEquals((-3367.7978242), double0, 0.01);
      assertEquals((-2948.362062666691), bracketFinder0.getHi(), 0.01);
      assertEquals((-1.043831661111192E-37), bracketFinder0.getFLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getLo(), 0.01);
      assertEquals((-3207.5876200799203), bracketFinder0.getMid(), 0.01);
      assertEquals((-441.818151868402), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals((-441.818151868402), bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(803.733, (-1501.700563838302), (-3367.7978242), 0.0).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType1, (-1.0), 251.66202228);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(251.66202228, bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFHi(), 0.01);
      assertEquals(787.1502410668568, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-1501.700563838302), bracketFinder0.getFLo(), 0.01);
      assertEquals(660.4777648377975, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-116.14731319), (-3367.7978242), (-3367.7978242)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType1, 0.0, (-3367.7978242));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getMid();
      assertEquals((-3367.7978242), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double2 = bracketFinder0.getHi();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int0 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int0);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double3 = bracketFinder0.getLo();
      assertEquals((-8817.009208881624), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double4 = bracketFinder0.getFHi();
      assertEquals((-116.14731319), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double5 = bracketFinder0.getLo();
      assertEquals((-8817.009208881624), double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double6 = bracketFinder0.getHi();
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getMid(), 0.01);
      assertEquals((-8817.009208881624), bracketFinder0.getLo(), 0.01);
      assertEquals((-3367.7978242), bracketFinder0.getFMid(), 0.01);
      assertEquals((-116.14731319), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3409.3766), (-3409.3766), (-3409.3766)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 4847.0, 2.19);
      assertEquals((-3409.3766), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-7836.877303540001), bracketFinder0.getLo(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4847.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFMid(), 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      
      double double0 = bracketFinder0.getFHi();
      assertEquals((-3409.3766), double0, 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-7836.877303540001), bracketFinder0.getLo(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4847.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFMid(), 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      
      double double1 = bracketFinder0.getHi();
      assertEquals(4847.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-7836.877303540001), bracketFinder0.getLo(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4847.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFMid(), 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      
      double double2 = bracketFinder0.getFMid();
      assertEquals((-3409.3766), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-7836.877303540001), bracketFinder0.getLo(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4847.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-3409.3766), bracketFinder0.getFMid(), 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      double double0 = bracketFinder0.getLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      int int1 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, (-2740.89978), (double)500).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, 1.0E-21, (-1134.660296544621), 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, (-3318.0), 1.618034);
      assertEquals(5372.8728800251565, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getFLo(), 0.01);
      assertEquals(1.618034, bracketFinder0.getLo(), 0.01);
      assertEquals((-1134.660296544621), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(14063.745843558623, bracketFinder0.getHi(), 0.01);
      assertEquals((-1134.660296544621), bracketFinder0.getFHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      bracketFinder0.search(univariateFunction0, goalType0, 1.0E-21, 3956.358);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      
      int int2 = bracketFinder0.getEvaluations();
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      
      double double1 = bracketFinder0.getFLo();
      assertEquals(2894.872956749964, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      
      double double2 = bracketFinder0.getFHi();
      assertEquals(500.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-4000.97746157004), (-1.0), (-1234.3831049463681)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, (-1.0), 0.0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getFMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals((-1234.3831049463681), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-4000.97746157004), bracketFinder0.getFLo(), 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1.0), 314.30197901573, 0.0).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 0.0, (-1234.3831049463681)).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType0, (-1.0), 0.0);
      assertSame(goalType0, goalType1);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals((-1234.3831049463681), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(308.1594747283571, 0.0, 0.0).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType1, 0.0, 0.0);
      assertSame(goalType1, goalType0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(308.1594747283571, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      bracketFinder0.search(univariateFunction1, goalType1, 3187.38, 2.0);
      assertSame(goalType1, goalType0);
      assertEquals(314.30197901573, bracketFinder0.getFMid(), 0.01);
      assertEquals(16680.866365971415, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(8341.43314292, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3187.38, bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getMid();
      assertEquals(8341.43314292, double0, 0.01);
      assertEquals(314.30197901573, bracketFinder0.getFMid(), 0.01);
      assertEquals(16680.866365971415, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(8341.43314292, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3187.38, bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getFMid();
      assertEquals(314.30197901573, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(314.30197901573, bracketFinder0.getFMid(), 0.01);
      assertEquals(16680.866365971415, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(8341.43314292, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3187.38, bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      double double2 = bracketFinder0.getLo();
      assertEquals(3187.38, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(314.30197901573, bracketFinder0.getFMid(), 0.01);
      assertEquals(16680.866365971415, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(8341.43314292, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3187.38, bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, (-1542.23), (-1234.3831049463681)).when(univariateFunction4).value(anyDouble());
      bracketFinder0.search(univariateFunction4, goalType0, 0.0, 58.95976);
      assertSame(goalType0, goalType1);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-95.39889631184), bracketFinder0.getLo(), 0.01);
      assertEquals((-1234.3831049463681), bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-1542.23), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(58.95976, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double3 = bracketFinder0.getFLo();
      assertEquals((-1234.3831049463681), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-95.39889631184), bracketFinder0.getLo(), 0.01);
      assertEquals((-1234.3831049463681), bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-1542.23), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(58.95976, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double4 = bracketFinder0.getMid();
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-95.39889631184), bracketFinder0.getLo(), 0.01);
      assertEquals((-1234.3831049463681), bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-1542.23), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(58.95976, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.3090169999999999, 1.3090169999999999, 2631.114856190273, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-71.5878998646915), (-2001.2569975669), (-71.5878998646915)).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, 0.0, 0.5);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-71.5878998646915), bracketFinder0.getFMid(), 0.01);
      assertEquals((-71.5878998646915), bracketFinder0.getFLo(), 0.01);
      assertEquals((-0.809017), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.5, bracketFinder0.getHi(), 0.01);
      assertEquals((-2001.2569975669), bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 3696.758421574);
      assertEquals(1.3090169999999999, bracketFinder0.getFLo(), 0.01);
      assertEquals(2631.114856190273, bracketFinder0.getFHi(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(3696.758421574, bracketFinder0.getLo(), 0.01);
      assertEquals(19356.478567929786, bracketFinder0.getHi(), 0.01);
      assertEquals(2631.114856190273, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(9678.239237467065, bracketFinder0.getMid(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-71.5878998646915), 0.5, (-1249.95445)).when(univariateFunction3).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction3, goalType1, 0.0, 0.0);
      assertSame(goalType1, goalType0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-1249.95445), bracketFinder0.getFHi(), 0.01);
      assertEquals((-71.5878998646915), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.5, bracketFinder0.getFMid(), 0.01);
      
      GoalType goalType2 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-71.5878998646915), 0.0, (-1230.4), 0.0).when(univariateFunction4).value(anyDouble());
      bracketFinder0.search(univariateFunction4, goalType2, 0.0, 0.0);
      assertNotSame(goalType2, goalType1);
      assertNotSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType1));
      assertFalse(goalType2.equals((Object)goalType0));
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-1230.4), bracketFinder0.getFHi(), 0.01);
      assertEquals((-1230.4), bracketFinder0.getFMid(), 0.01);
      assertEquals((-71.5878998646915), bracketFinder0.getFLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2131.8616, 2131.8616, 2131.8616).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 0.0);
      assertEquals(2131.8616, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(2131.8616, bracketFinder0.getFLo(), 0.01);
      assertEquals(2131.8616, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2131.8616, 2131.8616, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 6545.082160483863, 0.0).when(univariateFunction2).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType1, 100.0, 0.0);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-423.6068025156), bracketFinder0.getLo(), 0.01);
      assertEquals(6545.082160483863, bracketFinder0.getFMid(), 0.01);
      assertEquals((-161.8034), bracketFinder0.getMid(), 0.01);
      assertEquals(6545.082160483863, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      GoalType goalType2 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType2, (-3395.3494294203388), 3335.39249135);
      assertSame(goalType2, goalType0);
      assertNotSame(goalType2, goalType1);
      assertFalse(goalType2.equals((Object)goalType1));
      assertEquals(3335.39249135, bracketFinder0.getLo(), 0.01);
      assertEquals(14225.961764381713, bracketFinder0.getMid(), 0.01);
      assertEquals(2131.8616, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(31847.27312750231, bracketFinder0.getHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder(1.618034, 416);
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(416, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-294.603414847), 2.0E-21, 1.618034).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 1.618034);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(416, bracketFinder0.getMaxEvaluations());
      assertEquals((-2.6180340251559997), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(1.618034, bracketFinder0.getFLo(), 0.01);
      assertEquals((-294.603414847), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int0 = bracketFinder0.getMaxEvaluations();
      assertEquals(416, int0);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(416, bracketFinder0.getMaxEvaluations());
      assertEquals((-2.6180340251559997), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(1.618034, bracketFinder0.getFLo(), 0.01);
      assertEquals((-294.603414847), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFMid();
      assertEquals((-294.603414847), double0, 0.01);
      assertEquals(2.0E-21, bracketFinder0.getFHi(), 0.01);
      assertEquals(416, bracketFinder0.getMaxEvaluations());
      assertEquals((-2.6180340251559997), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(1.618034, bracketFinder0.getFLo(), 0.01);
      assertEquals((-294.603414847), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(56.2344170213597, 0.0, (-1230.4)).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction1, goalType1, 0.0, 0.0);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1230.4), bracketFinder0.getFHi(), 0.01);
      assertEquals(416, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(56.2344170213597, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.618034, 1.618034, (-493.9702725146682)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 2482.906932566885, (-2011.62016076));
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1.618034, bracketFinder0.getFHi(), 0.01);
      assertEquals((-2011.62016076), bracketFinder0.getMid(), 0.01);
      assertEquals((-9283.917811684074), bracketFinder0.getLo(), 0.01);
      assertEquals((-493.9702725146682), bracketFinder0.getFLo(), 0.01);
      assertEquals(1.618034, bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2482.906932566885, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-493.9702725146682), 0.0, 118.8).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType1, (-2008.8), (-2008.8));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-493.9702725146682), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2008.8), bracketFinder0.getLo(), 0.01);
      assertEquals(118.8, bracketFinder0.getFHi(), 0.01);
      assertEquals((-2008.8), bracketFinder0.getMid(), 0.01);
      assertEquals((-2008.8), bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFMid();
      assertEquals((-493.9702725146682), double0, 0.01);
      assertEquals((-493.9702725146682), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2008.8), bracketFinder0.getLo(), 0.01);
      assertEquals(118.8, bracketFinder0.getFHi(), 0.01);
      assertEquals((-2008.8), bracketFinder0.getMid(), 0.01);
      assertEquals((-2008.8), bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1.618034;
      int int0 = 1;
      BracketFinder bracketFinder0 = new BracketFinder(1.618034, 1);
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(1, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search(univariateFunction2, goalType0, (-3598.6772), 1029.297470599);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1375.86842;
      BracketFinder bracketFinder0 = new BracketFinder(1375.86842, 1);
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(1, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double1 = (-1.0);
      // Undeclared exception!
      try { 
        bracketFinder0.search(univariateFunction0, goalType0, (-1.0), (-1280.4670745));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, (-1.0), 0.0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(1.618034, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      bracketFinder0.search(univariateFunction0, goalType0, (-1.0), (-1.0));
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1.0), bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(3, int0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1.0), bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1.0), bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      int int1 = bracketFinder0.getEvaluations();
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1.0), bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      double double1 = bracketFinder0.getHi();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1.0), bracketFinder0.getMid(), 0.01);
      assertEquals((-1.0), bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1.0), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType0, 1.0, 0.0);
      assertEquals((-1.618034), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType0, 1459.423653, 1459.423653);
      assertEquals(1459.423653, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(1459.423653, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(1459.423653, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction4).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction4, goalType1, 3, 0.0);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-4.854102), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      double double2 = bracketFinder0.getLo();
      assertEquals((-4.854102), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-4.854102), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction5 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction5).value(anyDouble());
      bracketFinder0.search(univariateFunction5, goalType0, 0.0, 1.0);
      assertNotSame(goalType0, goalType1);
      assertFalse(goalType0.equals((Object)goalType1));
      assertEquals(2.6180339999999998, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(1.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      double double3 = bracketFinder0.getHi();
      assertEquals(2.6180339999999998, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2.6180339999999998, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(1.0, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 314.30197901573, 314.30197901573);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getMid(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getMid(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double1 = bracketFinder0.getLo();
      assertEquals(314.30197901573, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getMid(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getLo(), 0.01);
      assertEquals(314.30197901573, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType0, 0.0, 0.0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType1, (-101.2829), (-101.2829));
      assertSame(goalType1, goalType0);
      assertEquals((-101.2829), bracketFinder0.getLo(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-101.2829), bracketFinder0.getLo(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getMid();
      assertEquals((-101.2829), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-101.2829), bracketFinder0.getLo(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-101.2829), bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 2.0, 803.35);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(803.35, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getLo(), 0.01);
      assertEquals(2099.9615459, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getMid();
      assertEquals(803.35, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(803.35, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getLo(), 0.01);
      assertEquals(2099.9615459, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getFHi();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(803.35, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2.0, bracketFinder0.getLo(), 0.01);
      assertEquals(2099.9615459, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 2.19);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(5.733494459999999, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFHi();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(5.733494459999999, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getHi();
      assertEquals(5.733494459999999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(5.733494459999999, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double2 = bracketFinder0.getFMid();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(2.19, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(5.733494459999999, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder(4396.68140954174, 814);
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(814, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction1).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType0, (-1062.811973924678), 0.5);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(1720.9749264172422, bracketFinder0.getHi(), 0.01);
      assertEquals((-1062.811973924678), bracketFinder0.getLo(), 0.01);
      assertEquals(0.5, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(814, bracketFinder0.getMaxEvaluations());
      
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType1, 4396.68140954174, 814);
      assertSame(goalType1, goalType0);
      assertEquals(814.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-4982.900331806461), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(4396.68140954174, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(814, bracketFinder0.getMaxEvaluations());
      
      double double0 = bracketFinder0.getLo();
      assertEquals((-4982.900331806461), double0, 0.01);
      assertEquals(814.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals((-4982.900331806461), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(4396.68140954174, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(814, bracketFinder0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 2.0E-21, 2.0E-21);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getLo(), 0.01);
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getLo(), 0.01);
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(3, int0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2.0E-21, bracketFinder0.getLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      double double1 = bracketFinder0.getFLo();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      double double0 = bracketFinder0.getMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      
      int int0 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFHi();
      assertEquals(0.0, double0, 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      
      double double0 = bracketFinder0.getFLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 2196.9332699866213, 2196.9332699866213);
      assertEquals(2196.9332699866213, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(2196.9332699866213, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(2196.9332699866213, bracketFinder0.getHi(), 0.01);
      
      double double0 = bracketFinder0.getHi();
      assertEquals(2196.9332699866213, double0, 0.01);
      assertEquals(2196.9332699866213, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(2196.9332699866213, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(2196.9332699866213, bracketFinder0.getHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder(0.0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 1691.164416051, 1691.164416051);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(1691.164416051, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1691.164416051, bracketFinder0.getLo(), 0.01);
      assertEquals(1691.164416051, bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      GoalType goalType1 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      double double0 = 2664.0;
      bracketFinder0.search(univariateFunction2, goalType2, 2664.0, 2664.0);
      assertSame(goalType2, goalType0);
      assertSame(goalType2, goalType1);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2664.0, bracketFinder0.getHi(), 0.01);
      assertEquals(2664.0, bracketFinder0.getMid(), 0.01);
      assertEquals(2664.0, bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction3).value(anyDouble());
      GoalType goalType3 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction3, goalType3, 2664.0, 0.0);
      assertNotSame(goalType3, goalType1);
      assertNotSame(goalType3, goalType0);
      assertNotSame(goalType3, goalType2);
      assertFalse(goalType3.equals((Object)goalType1));
      assertFalse(goalType3.equals((Object)goalType0));
      assertFalse(goalType3.equals((Object)goalType2));
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2664.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-4310.442576), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      // Undeclared exception!
      try { 
        bracketFinder0.search((UnivariateFunction) null, goalType2, 0.0, (-98.924102918));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder(0.0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 3055.13263, 0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3055.13263, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-4943.30846984942), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      double double0 = bracketFinder0.getHi();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 0.0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction0 = null;
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search((UnivariateFunction) null, goalType0, 0.0, 1.0E-21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder(1.0E-21, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3280.0), 0.0, 0.8414709568023682, 0.8414709568023682, (-2529.873)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 0.0, 2138.68991);
      assertEquals(11198.325853474762, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.8414709568023682, bracketFinder0.getFMid(), 0.01);
      assertEquals(2138.68991, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2529.873), bracketFinder0.getFHi(), 0.01);
      assertEquals(5599.16289983694, bracketFinder0.getMid(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 4388.430565718607, 100.0).when(univariateFunction1).value(anyDouble());
      bracketFinder0.search(univariateFunction1, goalType0, 4835.981077859934, (-868.69));
      assertEquals((-868.69), bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(100.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(4388.430565718607, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(4835.981077859934, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-10099.04176279402), bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(659.37610532338, 4835.981077859934, (-747.5), (-3280.0), 0.0).when(univariateFunction2).value(anyDouble());
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4835.981077859934, (-3280.0), (-3280.0)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType0, 1727.9277, 3050.48176964);
      assertEquals(3050.48176964, bracketFinder0.getHi(), 0.01);
      assertEquals(1727.9277, bracketFinder0.getMid(), 0.01);
      assertEquals((-412.00975151588796), bracketFinder0.getLo(), 0.01);
      assertEquals(4835.981077859934, bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-3280.0), bracketFinder0.getFLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-3280.0), bracketFinder0.getFHi(), 0.01);
      
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction2, goalType1, 0.0, 0.0);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-3280.0), bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-747.5), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      double double1 = bracketFinder0.getLo();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals((-3280.0), bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-747.5), bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2138.68991, 6545.082160483863, 2649.2196425529).when(univariateFunction4).value(anyDouble());
      GoalType goalType2 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction5 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1727.9277, (-3280.0), 1727.9277).when(univariateFunction5).value(anyDouble());
      bracketFinder0.search(univariateFunction5, goalType2, 0.0, 2061.0113674);
      assertSame(goalType2, goalType1);
      assertNotSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType0));
      assertEquals(1727.9277, bracketFinder0.getFLo(), 0.01);
      assertEquals((-3280.0), bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-3334.7864668396915), bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-8730.584352926184), bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      bracketFinder0.search(univariateFunction4, goalType2, 0.0, 0.0);
      assertSame(goalType2, goalType1);
      assertNotSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType0));
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(2649.2196425529, bracketFinder0.getFHi(), 0.01);
      assertEquals(6545.082160483863, bracketFinder0.getFLo(), 0.01);
      assertEquals(2138.68991, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction6 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-239.1119699441022), 0.07692307692307693, 0.167).when(univariateFunction6).value(anyDouble());
      bracketFinder0.search(univariateFunction6, goalType2, 4835.981077859934, 6545.082160483863);
      assertSame(goalType2, goalType1);
      assertNotSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType0));
      assertEquals(2070.5974167376075, bracketFinder0.getLo(), 0.01);
      assertEquals(0.07692307692307693, bracketFinder0.getFHi(), 0.01);
      assertEquals(4835.981077859934, bracketFinder0.getMid(), 0.01);
      assertEquals(0.167, bracketFinder0.getFLo(), 0.01);
      assertEquals(6545.082160483863, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-239.1119699441022), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction7 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-491.59341), 2094.36221, (-1054.9742120690914), 0.7214844226837158).when(univariateFunction7).value(anyDouble());
      bracketFinder0.search(univariateFunction7, goalType1, 2061.0113674, 0.0);
      assertNotSame(goalType1, goalType0);
      assertSame(goalType1, goalType2);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-491.59341), bracketFinder0.getFMid(), 0.01);
      assertEquals(2094.36221, bracketFinder0.getFLo(), 0.01);
      assertEquals(4148.187925087503, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.7214844226837158, bracketFinder0.getFHi(), 0.01);
      assertEquals(2061.0113674, bracketFinder0.getMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(4, int0);
      assertEquals((-491.59341), bracketFinder0.getFMid(), 0.01);
      assertEquals(2094.36221, bracketFinder0.getFLo(), 0.01);
      assertEquals(4148.187925087503, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.7214844226837158, bracketFinder0.getFHi(), 0.01);
      assertEquals(2061.0113674, bracketFinder0.getMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      int int1 = bracketFinder0.getEvaluations();
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      assertEquals((-491.59341), bracketFinder0.getFMid(), 0.01);
      assertEquals(2094.36221, bracketFinder0.getFLo(), 0.01);
      assertEquals(4148.187925087503, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.7214844226837158, bracketFinder0.getFHi(), 0.01);
      assertEquals(2061.0113674, bracketFinder0.getMid(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0E-21, (-2645.3975119), 525.35982, (-7.44321345601866E-11)).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 1173.061574554, 1173.061574554);
      assertEquals((-7.44321345601866E-11), bracketFinder0.getFHi(), 0.01);
      assertEquals(1173.061574554, bracketFinder0.getHi(), 0.01);
      assertEquals(525.35982, bracketFinder0.getFMid(), 0.01);
      assertEquals(1173.061574554, bracketFinder0.getMid(), 0.01);
      assertEquals(2.0E-21, bracketFinder0.getFLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1173.061574554, bracketFinder0.getLo(), 0.01);
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-860.796050854), (-2539.54), (-2539.54)).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(451.31637777, (-2539.54), 751.99377, 1199.9).when(univariateFunction2).value(anyDouble());
      bracketFinder0.search(univariateFunction2, goalType0, 1.0708593250394448E-7, 0.07692307692307693);
      assertSame(goalType0, goalType1);
      assertEquals(751.99377, bracketFinder0.getFLo(), 0.01);
      assertEquals(1199.9, bracketFinder0.getFMid(), 0.01);
      assertEquals(451.31637777, bracketFinder0.getFHi(), 0.01);
      assertEquals(1.0708593250394448E-7, bracketFinder0.getHi(), 0.01);
      assertEquals((-0.06890267419027533), bracketFinder0.getMid(), 0.01);
      assertEquals((-0.12446387349154162), bracketFinder0.getLo(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      bracketFinder0.search(univariateFunction1, goalType1, (-270.95146237), 1.0E-21);
      assertSame(goalType1, goalType0);
      assertEquals((-860.796050854), bracketFinder0.getFMid(), 0.01);
      assertEquals((-709.3601408343806), bracketFinder0.getLo(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFHi(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals((-270.95146237), bracketFinder0.getMid(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getHi();
      assertEquals(1.0E-21, double0, 0.01);
      assertEquals((-860.796050854), bracketFinder0.getFMid(), 0.01);
      assertEquals((-709.3601408343806), bracketFinder0.getLo(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFHi(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals((-270.95146237), bracketFinder0.getMid(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(3, int0);
      assertEquals((-860.796050854), bracketFinder0.getFMid(), 0.01);
      assertEquals((-709.3601408343806), bracketFinder0.getLo(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFHi(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getHi(), 0.01);
      assertEquals((-270.95146237), bracketFinder0.getMid(), 0.01);
      assertEquals((-2539.54), bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3332.199607), 5.2240336371356666E-9, 1405.905914049781, 5.2240336371356666E-9, 5.2240336371356666E-9).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(345.75858, 0.0, (-218.634953), 1.7976931348623157E308).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction1, goalType1, (-2465.66), (-1007.025311));
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(1.7976931348623157E308, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals((-1007.025311), bracketFinder0.getLo(), 0.01);
      assertEquals((-218.634953), bracketFinder0.getFMid(), 0.01);
      assertEquals(1353.0952093814262, bracketFinder0.getMid(), 0.01);
      assertEquals(1397.915546742653, bracketFinder0.getHi(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      bracketFinder0.search(univariateFunction0, goalType0, 1982.38, (-2465.66));
      assertNotSame(goalType0, goalType1);
      assertFalse(goalType0.equals((Object)goalType1));
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-9662.73995336), bracketFinder0.getMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFLo(), 0.01);
      assertEquals(1405.905914049781, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFHi(), 0.01);
      assertEquals((-21307.860018614894), bracketFinder0.getLo(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      double double0 = bracketFinder0.getFMid();
      assertEquals(1405.905914049781, double0, 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-9662.73995336), bracketFinder0.getMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFLo(), 0.01);
      assertEquals(1405.905914049781, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFHi(), 0.01);
      assertEquals((-21307.860018614894), bracketFinder0.getLo(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(5, int0);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-9662.73995336), bracketFinder0.getMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFLo(), 0.01);
      assertEquals(1405.905914049781, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.2240336371356666E-9, bracketFinder0.getFHi(), 0.01);
      assertEquals((-21307.860018614894), bracketFinder0.getLo(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getHi(), 0.01);
      assertEquals(5, bracketFinder0.getEvaluations());
      
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1405.905914049781, (-3238.8054707912), (-2465.66)).when(univariateFunction2).value(anyDouble());
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.2998793003370395E15, 1716.983, (-2465.66), (-3332.199607)).when(univariateFunction3).value(anyDouble());
      GoalType goalType2 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction3, goalType2, (-1007.025311), (-1565.3));
      assertSame(goalType2, goalType1);
      assertNotSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType0));
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2016.9537140721661), bracketFinder0.getMid(), 0.01);
      assertEquals((-3332.199607), bracketFinder0.getFMid(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getFLo(), 0.01);
      assertEquals((-2468.6074281414258), bracketFinder0.getLo(), 0.01);
      assertEquals((-1565.3), bracketFinder0.getHi(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(4, bracketFinder0.getEvaluations());
      
      GoalType goalType3 = GoalType.MINIMIZE;
      bracketFinder0.search(univariateFunction2, goalType3, (-2465.66), (-2465.66));
      assertNotSame(goalType3, goalType0);
      assertSame(goalType3, goalType2);
      assertSame(goalType3, goalType1);
      assertFalse(goalType3.equals((Object)goalType0));
      assertEquals((-3238.8054707912), bracketFinder0.getFMid(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2465.66), bracketFinder0.getFHi(), 0.01);
      assertEquals(1405.905914049781, bracketFinder0.getFLo(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2465.66), bracketFinder0.getHi(), 0.01);
      
      double double1 = bracketFinder0.getFMid();
      assertEquals((-3238.8054707912), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3238.8054707912), bracketFinder0.getFMid(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-2465.66), bracketFinder0.getFHi(), 0.01);
      assertEquals(1405.905914049781, bracketFinder0.getFLo(), 0.01);
      assertEquals((-2465.66), bracketFinder0.getMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-2465.66), bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction4 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2308.724317629603), 2876.53, (-218.634953)).when(univariateFunction4).value(anyDouble());
      bracketFinder0.search(univariateFunction4, goalType3, (-3238.8054707912), (-1565.3));
      assertNotSame(goalType3, goalType0);
      assertSame(goalType3, goalType2);
      assertSame(goalType3, goalType1);
      assertFalse(goalType3.equals((Object)goalType0));
      assertEquals((-2308.724317629603), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1565.3), bracketFinder0.getHi(), 0.01);
      assertEquals((-3238.8054707912), bracketFinder0.getMid(), 0.01);
      assertEquals((-5946.594221717369), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-218.634953), bracketFinder0.getFLo(), 0.01);
      assertEquals(2876.53, bracketFinder0.getFHi(), 0.01);
      
      int int1 = bracketFinder0.getEvaluations();
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals((-2308.724317629603), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1565.3), bracketFinder0.getHi(), 0.01);
      assertEquals((-3238.8054707912), bracketFinder0.getMid(), 0.01);
      assertEquals((-5946.594221717369), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-218.634953), bracketFinder0.getFLo(), 0.01);
      assertEquals(2876.53, bracketFinder0.getFHi(), 0.01);
      
      int int2 = bracketFinder0.getEvaluations();
      assertEquals(3, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2308.724317629603), bracketFinder0.getFMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals((-1565.3), bracketFinder0.getHi(), 0.01);
      assertEquals((-3238.8054707912), bracketFinder0.getMid(), 0.01);
      assertEquals((-5946.594221717369), bracketFinder0.getLo(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-218.634953), bracketFinder0.getFLo(), 0.01);
      assertEquals(2876.53, bracketFinder0.getFHi(), 0.01);
      
      UnivariateFunction univariateFunction5 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2386.4, 0.16666666666745392, 1716.983).when(univariateFunction5).value(anyDouble());
      bracketFinder0.search(univariateFunction5, goalType0, 45.1519964, 5);
      assertNotSame(goalType0, goalType1);
      assertNotSame(goalType0, goalType2);
      assertNotSame(goalType0, goalType3);
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(goalType0.equals((Object)goalType2));
      assertFalse(goalType0.equals((Object)goalType3));
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double2 = bracketFinder0.getFLo();
      assertEquals(0.16666666666745392, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double3 = bracketFinder0.getFHi();
      assertEquals(1716.983, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int3 = bracketFinder0.getEvaluations();
      assertEquals(3, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double4 = bracketFinder0.getMid();
      assertEquals(45.1519964, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int4 = bracketFinder0.getEvaluations();
      assertEquals(3, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double5 = bracketFinder0.getHi();
      assertEquals(110.1192917430776, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      double double6 = bracketFinder0.getMid();
      assertEquals(45.1519964, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int5 = bracketFinder0.getEvaluations();
      assertEquals(3, int5);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      
      int int6 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int6);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertEquals(0.16666666666745392, bracketFinder0.getFLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(45.1519964, bracketFinder0.getMid(), 0.01);
      assertEquals(2386.4, bracketFinder0.getFMid(), 0.01);
      assertEquals(5.0, bracketFinder0.getLo(), 0.01);
      assertEquals(1716.983, bracketFinder0.getFHi(), 0.01);
      assertEquals(110.1192917430776, bracketFinder0.getHi(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 1.0;
      int int0 = (-974);
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder(1.0, (-974));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -974 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      assertNotNull(bracketFinder0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      int int0 = bracketFinder0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double0 = bracketFinder0.getLo();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      int int1 = bracketFinder0.getMaxEvaluations();
      assertEquals(500, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction0).value(anyDouble());
      GoalType goalType0 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction0, goalType0, 500, (-1.4472550496687578E7));
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals((-3.7890438284044966E7), bracketFinder0.getLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(500.0, bracketFinder0.getHi(), 0.01);
      assertEquals((-1.4472550496687578E7), bracketFinder0.getMid(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, (-2740.89978), (double)500).when(univariateFunction1).value(anyDouble());
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType2, 500.0, 2894.872956749964);
      assertNotSame(goalType2, goalType1);
      assertSame(goalType2, goalType0);
      assertFalse(goalType2.equals((Object)goalType1));
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getMid(), 0.01);
      assertEquals(500.0, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      assertEquals(6769.858826451935, bracketFinder0.getHi(), 0.01);
      
      UnivariateFunction univariateFunction3 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2894.872956749964, 1.0E-21, (-1134.660296544621), (double)0, (-2740.89978)).when(univariateFunction3).value(anyDouble());
      bracketFinder0.search(univariateFunction3, goalType1, (-3318.0), 1.618034);
      assertNotSame(goalType1, goalType2);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType2));
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-2740.89978), bracketFinder0.getFHi(), 0.01);
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(6, bracketFinder0.getEvaluations());
      assertEquals(58889.32670070427, bracketFinder0.getHi(), 0.01);
      assertEquals(14063.745843558623, bracketFinder0.getMid(), 0.01);
      assertEquals((-1134.660296544621), bracketFinder0.getFLo(), 0.01);
      assertEquals(5372.8728800251565, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      bracketFinder0.search(univariateFunction1, goalType1, 1.0E-21, 3956.358);
      assertNotSame(goalType1, goalType2);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType2));
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      int int2 = bracketFinder0.getEvaluations();
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double1 = bracketFinder0.getFLo();
      assertEquals(2894.872956749964, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
      
      double double2 = bracketFinder0.getFHi();
      assertEquals(500.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2740.89978), bracketFinder0.getFMid(), 0.01);
      assertEquals(3, bracketFinder0.getEvaluations());
      assertEquals(500.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(10357.879760172, bracketFinder0.getHi(), 0.01);
      assertEquals(2894.872956749964, bracketFinder0.getFLo(), 0.01);
      assertEquals(3956.358, bracketFinder0.getMid(), 0.01);
      assertEquals(1.0E-21, bracketFinder0.getLo(), 0.01);
      assertEquals(500, bracketFinder0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      BracketFinder bracketFinder0 = null;
      try {
        bracketFinder0 = new BracketFinder((-2.1811899173804496), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2.181 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 1498.61507853268;
      int int0 = 508;
      BracketFinder bracketFinder0 = new BracketFinder(1498.61507853268, 508);
      assertNotNull(bracketFinder0);
      assertEquals(0, bracketFinder0.getEvaluations());
      assertEquals(0.0, bracketFinder0.getHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFHi(), 0.01);
      assertEquals(0.0, bracketFinder0.getFLo(), 0.01);
      assertEquals(0.0, bracketFinder0.getLo(), 0.01);
      assertEquals(508, bracketFinder0.getMaxEvaluations());
      assertEquals(0.0, bracketFinder0.getMid(), 0.01);
      assertEquals(0.0, bracketFinder0.getFMid(), 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search((UnivariateFunction) null, goalType0, 2.0, 508);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BracketFinder bracketFinder0 = new BracketFinder();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1054.9742120690914), (-2728.862798926539), 100.0, 4148.187925087503, 0.0).when(univariateFunction0).value(anyDouble());
      bracketFinder0.search(univariateFunction0, goalType0, 248.586346537465, (-252.619866272175));
      UnivariateFunction univariateFunction1 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateFunction univariateFunction2 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(248.586346537465, 1.0, 1.1795268640216787E-8).when(univariateFunction2).value(anyDouble());
      GoalType goalType2 = GoalType.MAXIMIZE;
      bracketFinder0.search(univariateFunction2, goalType2, 5.0, 5.0);
      double double0 = (-1875.138);
      double double1 = 5.0;
      double double2 = (-7.0886934867418E11);
      double double3 = (-0.16624879837036133);
      GoalType goalType3 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        bracketFinder0.search((UnivariateFunction) null, goalType3, 5.0, 4883.891429863596);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.univariate.BracketFinder$FunctionEvaluator", e);
      }
  }
}

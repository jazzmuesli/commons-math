/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:56:04 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.ConvergenceChecker;
import org.apache.commons.math4.optim.OptimizationData;
import org.apache.commons.math4.optim.PointValuePair;
import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer;
import org.apache.commons.math4.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math4.random.RandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiStartMultivariateOptimizer_ESTest extends MultiStartMultivariateOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = (ConvergenceChecker<PointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      GoalType goalType0 = GoalType.MINIMIZE;
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateOptimizer0).getConvergenceChecker();
      doReturn(goalType0).when(multivariateOptimizer0).getGoalType();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 403, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      int int0 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      Double double0 = new Double(403);
      assertEquals(403.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pointValuePair0).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(pointValuePair1).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      PointValuePair[] pointValuePairArray1 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray1.equals((Object)pointValuePairArray0));
      assertNotSame(pointValuePairArray1, pointValuePairArray0);
      assertEquals(2, pointValuePairArray1.length);
      assertNotNull(pointValuePairArray1);
      
      PointValuePair pointValuePair2 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      multiStartMultivariateOptimizer0.store(pointValuePair2);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = (ConvergenceChecker<PointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateOptimizer0).getConvergenceChecker();
      doReturn((GoalType) null).when(multivariateOptimizer0).getGoalType();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 403, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      int int0 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      Double double0 = new Double(2149.3076);
      assertEquals(2149.3076, (double)double0, 0.01);
      assertNotNull(double0);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pointValuePair0).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double1).when(pointValuePair1).getValue();
      PointValuePair[] pointValuePairArray1 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray1.equals((Object)pointValuePairArray0));
      assertNotSame(pointValuePairArray1, pointValuePairArray0);
      assertEquals(1, pointValuePairArray1.length);
      assertNotNull(pointValuePairArray1);
      
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      PointValuePair[] pointValuePairArray2 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray2.equals((Object)pointValuePairArray1));
      assertFalse(pointValuePairArray2.equals((Object)pointValuePairArray0));
      assertNotSame(pointValuePairArray2, pointValuePairArray1);
      assertNotSame(pointValuePairArray2, pointValuePairArray0);
      assertEquals(2, pointValuePairArray2.length);
      assertNotNull(pointValuePairArray2);
      
      PointValuePair pointValuePair2 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      multiStartMultivariateOptimizer0.store(pointValuePair2);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = (ConvergenceChecker<PointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 403, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      int int0 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pointValuePair0).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pointValuePair1).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      // Undeclared exception!
      try { 
        multiStartMultivariateOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = null;
      try {
        multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer((MultivariateOptimizer) null, 15, randomVectorGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 212, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      int int0 = multiStartMultivariateOptimizer0.getMaxEvaluations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      int int1 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      multiStartMultivariateOptimizer0.store((PointValuePair) null);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(1, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      PointValuePair[] pointValuePairArray1 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray1.equals((Object)pointValuePairArray0));
      assertNotSame(pointValuePairArray1, pointValuePairArray0);
      assertEquals(1, pointValuePairArray1.length);
      assertNotNull(pointValuePairArray1);
      
      int int2 = multiStartMultivariateOptimizer0.getMaxIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, int2);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      PointValuePair pointValuePair2 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pointValuePair2).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair2);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      // Undeclared exception!
      try { 
        multiStartMultivariateOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 650, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      int int0 = multiStartMultivariateOptimizer0.getMaxIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = multiStartMultivariateOptimizer0.getMaxIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertTrue(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pointValuePair1).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      // Undeclared exception!
      try { 
        multiStartMultivariateOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 403, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      int int0 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pointValuePair1).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      // Undeclared exception!
      try { 
        multiStartMultivariateOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 21201, (RandomVectorGenerator) null);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = null;
      try {
        multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 0, randomVectorGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.BaseMultiStartMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(multivariateOptimizer0).getConvergenceChecker();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 2527, randomVectorGenerator0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertNotNull(multiStartMultivariateOptimizer0);
      
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      int int0 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      int int1 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      multiStartMultivariateOptimizer0.clear();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      int int2 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      int int3 = multiStartMultivariateOptimizer0.getIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = multiStartMultivariateOptimizer0.getMaxIterations();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(Integer.MAX_VALUE, int4);
      
      multiStartMultivariateOptimizer0.store((PointValuePair) null);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      multiStartMultivariateOptimizer0.store((PointValuePair) null);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      
      PointValuePair[] pointValuePairArray0 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertEquals(3, pointValuePairArray0.length);
      assertNotNull(pointValuePairArray0);
      
      PointValuePair[] pointValuePairArray1 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray1.equals((Object)pointValuePairArray0));
      assertNotSame(pointValuePairArray1, pointValuePairArray0);
      assertEquals(3, pointValuePairArray1.length);
      assertNotNull(pointValuePairArray1);
      
      PointValuePair[] pointValuePairArray2 = multiStartMultivariateOptimizer0.getOptima();
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
      assertFalse(pointValuePairArray2.equals((Object)pointValuePairArray0));
      assertFalse(pointValuePairArray2.equals((Object)pointValuePairArray1));
      assertNotSame(pointValuePairArray2, pointValuePairArray0);
      assertNotSame(pointValuePairArray2, pointValuePairArray1);
      assertEquals(3, pointValuePairArray2.length);
      assertNotNull(pointValuePairArray2);
      
      multiStartMultivariateOptimizer0.store((PointValuePair) null);
      assertEquals(0, multiStartMultivariateOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConvergenceChecker<PointValuePair> convergenceChecker0 = (ConvergenceChecker<PointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(multivariateOptimizer0).getConvergenceChecker();
      doReturn((GoalType) null).when(multivariateOptimizer0).getGoalType();
      RandomVectorGenerator randomVectorGenerator0 = mock(RandomVectorGenerator.class, new ViolatedAssumptionAnswer());
      MultiStartMultivariateOptimizer multiStartMultivariateOptimizer0 = new MultiStartMultivariateOptimizer(multivariateOptimizer0, 212, randomVectorGenerator0);
      multiStartMultivariateOptimizer0.getMaxEvaluations();
      multiStartMultivariateOptimizer0.getIterations();
      multiStartMultivariateOptimizer0.store((PointValuePair) null);
      multiStartMultivariateOptimizer0.getOptima();
      multiStartMultivariateOptimizer0.getOptima();
      multiStartMultivariateOptimizer0.getMaxIterations();
      Double double0 = new Double(Integer.MAX_VALUE);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(pointValuePair0).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair0);
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      Double double1 = new Double(0);
      PointValuePair pointValuePair2 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double1, (Object) null).when(pointValuePair2).getValue();
      multiStartMultivariateOptimizer0.store(pointValuePair2);
      multiStartMultivariateOptimizer0.store(pointValuePair1);
      // Undeclared exception!
      try { 
        multiStartMultivariateOptimizer0.getOptima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1", e);
      }
  }
}

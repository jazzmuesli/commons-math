/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:52:22 GMT 2019
 */

package org.apache.commons.math4.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.SimpleBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleBounds_ESTest extends SimpleBounds_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      double[] doubleArray0 = simpleBounds0.getUpper();
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      double[] doubleArray0 = simpleBounds0.getLower();
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleBounds.unbounded((-278));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleBounds", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleBounds simpleBounds0 = null;
      try {
        simpleBounds0 = new SimpleBounds((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleBounds", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(427);
      double[] doubleArray0 = simpleBounds0.getUpper();
      assertEquals(427, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(427);
      double[] doubleArray0 = simpleBounds0.getLower();
      assertEquals(427, doubleArray0.length);
  }
}

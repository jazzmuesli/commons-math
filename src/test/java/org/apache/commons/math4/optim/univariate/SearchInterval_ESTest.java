/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:16:46 GMT 2019
 */

package org.apache.commons.math4.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.univariate.SearchInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchInterval_ESTest extends SearchInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 2003.474444582094, 0.0);
      double double0 = searchInterval0.getStartValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2003.474444582094, searchInterval0.getMax(), 0.01);
      assertEquals(0.0, searchInterval0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 1042.74111238768);
      double double0 = searchInterval0.getStartValue();
      assertEquals(0.0, searchInterval0.getMin(), 0.01);
      assertEquals(521.37055619384, double0, 0.01);
      assertEquals(1042.74111238768, searchInterval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(0.0, 1042.74111238768);
      double double0 = searchInterval0.getMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1042.74111238768, searchInterval0.getMax(), 0.01);
      assertEquals(521.37055619384, searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval(1.0, 2363.8045961472785, 1.0);
      double double0 = searchInterval0.getMin();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, searchInterval0.getStartValue(), 0.01);
      assertEquals(2363.8045961472785, searchInterval0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-1198.9110871741), (-510.0));
      double double0 = searchInterval0.getMax();
      assertEquals((-854.45554358705), searchInterval0.getStartValue(), 0.01);
      assertEquals((-1198.9110871741), searchInterval0.getMin(), 0.01);
      assertEquals((-510.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-2750.32), (-2750.32), (-2750.32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -2,750.32 is larger than, or equal to, the maximum (-2,750.32)
         //
         verifyException("org.apache.commons.math4.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-375.0992096), 0.0);
      double double0 = searchInterval0.getMax();
      assertEquals((-375.0992096), searchInterval0.getMin(), 0.01);
      assertEquals((-187.5496048), searchInterval0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval((-1.0), 0.5, 574.06186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 574.062 out of [-1, 0.5] range
         //
         verifyException("org.apache.commons.math4.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval(0.0, 0.5, (-916.551));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -916.551 out of [0, 0.5] range
         //
         verifyException("org.apache.commons.math4.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-414.324708), 141.83, (-414.324708));
      double double0 = searchInterval0.getStartValue();
      assertEquals((-414.324708), searchInterval0.getMin(), 0.01);
      assertEquals(141.83, searchInterval0.getMax(), 0.01);
      assertEquals((-414.324708), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-414.324708), 141.83, (-414.324708));
      double double0 = searchInterval0.getMax();
      assertEquals(141.83, double0, 0.01);
      assertEquals((-414.324708), searchInterval0.getMin(), 0.01);
      assertEquals((-414.324708), searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchInterval searchInterval0 = new SearchInterval((-414.324708), 141.83, (-414.324708));
      double double0 = searchInterval0.getMin();
      assertEquals(141.83, searchInterval0.getMax(), 0.01);
      assertEquals((-414.324708), double0, 0.01);
      assertEquals((-414.324708), searchInterval0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchInterval searchInterval0 = null;
      try {
        searchInterval0 = new SearchInterval(1.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.SearchInterval", e);
      }
  }
}

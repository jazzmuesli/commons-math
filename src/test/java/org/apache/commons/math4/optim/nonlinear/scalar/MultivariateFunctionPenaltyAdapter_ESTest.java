/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:34:41 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MultivariateFunction;
import org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultivariateFunctionPenaltyAdapter_ESTest extends MultivariateFunctionPenaltyAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1.0);
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 1.0, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 1.0;
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 1.0, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 1.0, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = Double.NaN;
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 1.0, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (-57.33051563);
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-57.33051563), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2443.8124800917853;
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, (-1.0), doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, 2443.8124800917853}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 919.7;
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2442.8124800917853, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2443.8124800917853}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {919.7, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(multivariateFunction0).value(any(double[].class));
      double[] doubleArray0 = new double[2];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 3763.9392858911992, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1399.290311), 1.1921056801463227E-8, 0.0).when(multivariateFunction0).value(any(double[].class));
      double[] doubleArray0 = new double[2];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, (-1.0), doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = multivariateFunctionPenaltyAdapter0.value(doubleArray0);
      assertEquals((-1399.290311), double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = multivariateFunctionPenaltyAdapter0.value(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1921056801463227E-8, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double2 = multivariateFunctionPenaltyAdapter0.value(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter((MultivariateFunction) null, doubleArray0, doubleArray0, 1.0, doubleArray0);
      assertNotNull(multivariateFunctionPenaltyAdapter0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multivariateFunctionPenaltyAdapter0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 2188.0, doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        multivariateFunctionPenaltyAdapter0.value(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, (double[]) null, (double[]) null, (-2196.85878), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-10.211707765948);
      double[] doubleArray1 = new double[8];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 0.0, doubleArray1);
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter1 = null;
      try {
        multivariateFunctionPenaltyAdapter1 = new MultivariateFunctionPenaltyAdapter(multivariateFunctionPenaltyAdapter0, doubleArray1, doubleArray0, (-1152.362174539), doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -10.212 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[13];
      double[] doubleArray1 = new double[14];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = null;
      try {
        multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, (-607.60135204931), doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 13 != 14
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter0 = new MultivariateFunctionPenaltyAdapter(multivariateFunction0, doubleArray0, doubleArray0, 0.0, doubleArray0);
      double[] doubleArray1 = new double[7];
      MultivariateFunctionPenaltyAdapter multivariateFunctionPenaltyAdapter1 = null;
      try {
        multivariateFunctionPenaltyAdapter1 = new MultivariateFunctionPenaltyAdapter(multivariateFunctionPenaltyAdapter0, doubleArray1, doubleArray0, (-2849.0), doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter", e);
      }
  }
}

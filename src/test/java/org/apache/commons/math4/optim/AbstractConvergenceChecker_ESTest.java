/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:52:00 GMT 2019
 */

package org.apache.commons.math4.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.SimplePointChecker;
import org.apache.commons.math4.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractConvergenceChecker_ESTest extends AbstractConvergenceChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, 0.0, 856);
      double double0 = simplePointChecker0.getRelativeThreshold();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker((-1.0), (-595));
      double double0 = simplePointChecker0.getRelativeThreshold();
      assertEquals((-595.0), simplePointChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, 284.3218043);
      double double0 = simplePointChecker0.getAbsoluteThreshold();
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01);
      assertEquals(284.3218043, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, (-2651.313592701597));
      double double0 = simplePointChecker0.getAbsoluteThreshold();
      assertEquals((-2651.313592701597), double0, 0.01);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker((-2691.0), (-2691.0), 1);
      Integer integer0 = new Integer((-1));
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, (String) null);
      simplePointChecker0.converged(1220, pair0, pair0);
      assertEquals((-2691.0), simplePointChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals((-2691.0), simplePointChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      SimplePointChecker<Pair<double[], Integer>> simplePointChecker0 = new SimplePointChecker((-1.0), (-595));
      Integer integer0 = new Integer(53);
      Pair<double[], Integer> pair0 = Pair.create(doubleArray0, integer0);
      boolean boolean0 = simplePointChecker0.converged(3142, pair0, pair0);
      assertEquals((-1.0), simplePointChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-595.0), simplePointChecker0.getAbsoluteThreshold(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePointChecker<Pair<double[], Object>> simplePointChecker0 = new SimplePointChecker<Pair<double[], Object>>(0.0, 0.0);
      double[] doubleArray0 = new double[2];
      Pair<double[], Object> pair0 = new Pair<double[], Object>(doubleArray0, simplePointChecker0);
      Pair<double[], String> pair1 = (Pair<double[], String>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair1).getKey();
      doReturn((Object) null).when(pair1).getValue();
      Pair<double[], Object> pair2 = new Pair<double[], Object>(pair1);
      // Undeclared exception!
      try { 
        simplePointChecker0.converged(0, pair2, pair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker((-2691.0), (-2691.0), 1);
      Integer integer0 = new Integer((-1));
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, (String) null);
      // Undeclared exception!
      try { 
        simplePointChecker0.converged((-1), pair0, pair0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to [D
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(1.0, 1416.14064824, 2);
      double double0 = simplePointChecker0.getRelativeThreshold();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1416.14064824, simplePointChecker0.getAbsoluteThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePointChecker simplePointChecker0 = new SimplePointChecker(0.0, 0.0);
      double double0 = simplePointChecker0.getAbsoluteThreshold();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePointChecker<Pair<double[], Object>> simplePointChecker0 = new SimplePointChecker(0.0, 0.0);
      double[] doubleArray0 = new double[2];
      Pair<double[], Object> pair0 = new Pair<double[], Object>(doubleArray0, simplePointChecker0);
      double[] doubleArray1 = new double[0];
      Pair<double[], Object> pair1 = new Pair<double[], Object>(doubleArray1, simplePointChecker0);
      // Undeclared exception!
      try { 
        simplePointChecker0.converged(0, pair0, pair1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.optim.SimplePointChecker", e);
      }
  }
}

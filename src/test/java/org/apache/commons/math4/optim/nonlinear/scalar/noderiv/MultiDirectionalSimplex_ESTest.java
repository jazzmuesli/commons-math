/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:25:38 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math4.analysis.MultivariateFunction;
import org.apache.commons.math4.optim.PointValuePair;
import org.apache.commons.math4.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiDirectionalSimplex_ESTest extends MultiDirectionalSimplex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3424.2958);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-343.61), (-3424.2958));
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1019.28014, (-1.0), 0.0, 0.0).when(multivariateFunction0).value(any(double[].class));
      multiDirectionalSimplex0.build(doubleArray0);
      Comparator<PointValuePair> comparator0 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2048), (-2048), (-109), (-109)).when(comparator0).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      multiDirectionalSimplex0.iterate(multivariateFunction0, comparator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1503.493;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-860.794);
      doubleArray0[4] = (-4802.08896753391);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 1503.493, (-4802.08896753391));
      multiDirectionalSimplex0.build(doubleArray0);
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 722.6589341, (-1227.53), (-4802.08896753391), 0.0).when(multivariateFunction0).value(any(double[].class));
      Comparator<PointValuePair> comparator0 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(111, (-1603), (-851), 111, 111).when(comparator0).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      multiDirectionalSimplex0.iterate(multivariateFunction0, comparator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2148.898;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 2148.898, 2148.898);
      multiDirectionalSimplex0.build(doubleArray0);
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(multivariateFunction0).value(any(double[].class));
      // Undeclared exception!
      try { 
        multiDirectionalSimplex0.iterate(multivariateFunction0, (Comparator<PointValuePair>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math4.optim.PointValuePair cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-1.0), (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // simplex must contain at least one point
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 1566.27467, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // equal vertices 1 and 0 in simplex configuration
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, 0.0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // simplex must contain at least one point
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // equal vertices 1 and 0 in simplex configuration
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[]) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1146, (-1528.3643136), 199.318528, 199.318528);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0, 0.0, 0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0, 0.0, (-532.4796779185));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-2219), 911.3142256978, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(493, 493);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(156, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // equal vertices 0 and {1} in simplex configuration
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-511), (-511));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1484);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero not allowed here
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-1182));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1, 1, 1791.7231373538723, 1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1390.0;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(32, 32, 32);
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      Comparator<PointValuePair> comparator0 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectionalSimplex0.iterate(multivariateFunction0, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1, 1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3424.2958);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-343.61), (-3424.2958));
      MultivariateFunction multivariateFunction0 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 2437.41).when(multivariateFunction0).value(any(double[].class));
      multiDirectionalSimplex0.build(doubleArray0);
      Comparator<PointValuePair> comparator0 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4074, (-1), 4074, 0).when(comparator0).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      MultivariateFunction multivariateFunction1 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2437.41, (-3424.2958), 0.0, (-3424.2958)).when(multivariateFunction1).value(any(double[].class));
      Comparator<PointValuePair> comparator1 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-2048), 0, 0).when(comparator1).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      multiDirectionalSimplex0.iterate(multivariateFunction1, comparator1);
      multiDirectionalSimplex0.iterate(multivariateFunction0, comparator0);
      MultivariateFunction multivariateFunction2 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2437.41, 0.0).when(multivariateFunction2).value(any(double[].class));
      Comparator<PointValuePair> comparator2 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1650), 0, (-1)).when(comparator2).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      multiDirectionalSimplex0.iterate(multivariateFunction2, comparator2);
      MultivariateFunction multivariateFunction3 = mock(MultivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(multivariateFunction3).value(any(double[].class));
      Comparator<PointValuePair> comparator3 = (Comparator<PointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator3).compare(any(org.apache.commons.math4.optim.PointValuePair.class) , any(org.apache.commons.math4.optim.PointValuePair.class));
      multiDirectionalSimplex0.iterate(multivariateFunction3, comparator3);
      assertEquals(1, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 3
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // equal vertices 0 and {1} in simplex configuration
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(3442, 3442, 3442);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((double[][]) null, 767.936011164911, 767.936011164911);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-343.61), (-3424.2958));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // equal vertices 0 and {1} in simplex configuration
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(1);
      assertEquals(1, multiDirectionalSimplex0.getDimension());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = null;
      try {
        multiDirectionalSimplex0 = new MultiDirectionalSimplex((-92), 2302.08779144042, (-92), 1512.4857);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }
}

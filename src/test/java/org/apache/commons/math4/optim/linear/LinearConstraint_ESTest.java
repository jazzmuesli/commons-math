/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:23:21 GMT 2019
 */

package org.apache.commons.math4.optim.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.optim.linear.LinearConstraint;
import org.apache.commons.math4.optim.linear.Relationship;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearConstraint_ESTest extends LinearConstraint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 7.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4275.5222048518;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      linearConstraint0.hashCode();
      linearConstraint0.getCoefficients();
      linearConstraint0.hashCode();
      linearConstraint0.equals(linearConstraint0);
      linearConstraint0.equals(relationship0);
      linearConstraint0.getValue();
      linearConstraint0.equals("");
      linearConstraint0.getRelationship();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-596.986687872);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      linearConstraint1.hashCode();
      linearConstraint0.equals(linearConstraint1);
      linearConstraint0.equals(relationship0);
      linearConstraint0.getValue();
      linearConstraint0.hashCode();
      linearConstraint0.hashCode();
      linearConstraint1.hashCode();
      linearConstraint0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-301.095374624);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1.0);
      linearConstraint0.getValue();
      linearConstraint0.hashCode();
      linearConstraint0.getValue();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-301.095374624);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-301.095374624);
      doubleArray1[6] = (-301.095374624);
      doubleArray1[7] = (-301.095374624);
      doubleArray1[8] = 1.0;
      Relationship relationship1 = Relationship.GEQ;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 690.042;
      doubleArray2[2] = 1.0;
      LinearConstraint linearConstraint1 = null;
      try {
        linearConstraint1 = new LinearConstraint(doubleArray1, (-1.0), relationship1, doubleArray2, (-301.095374624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.046638237);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 907.25905);
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 0.0);
      linearConstraint1.hashCode();
      linearConstraint1.equals(relationship0);
      linearConstraint0.equals(linearConstraint1);
      linearConstraint0.hashCode();
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      linearConstraint0.getValue();
      linearConstraint0.hashCode();
      linearConstraint0.getRelationship();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, Double.POSITIVE_INFINITY);
      Relationship relationship1 = Relationship.LEQ;
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship1, 0.0);
      linearConstraint1.hashCode();
      linearConstraint0.equals(linearConstraint1);
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      linearConstraint0.equals(relationship0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = null;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = null;
      try {
        linearConstraint0 = new LinearConstraint((double[]) null, 1973.3669, relationship0, (double[]) null, 1021.387);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = null;
      try {
        linearConstraint0 = new LinearConstraint((double[]) null, relationship0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(realVector0).subtract(any(org.apache.commons.math4.linear.RealVector.class));
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, 0.0, relationship0, realVector0, 0.0);
      linearConstraint0.getCoefficients();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = null;
      try {
        linearConstraint0 = new LinearConstraint((RealVector) null, (-134.80029459924), relationship0, (RealVector) null, (-2883.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 740.422069, relationship0, doubleArray0, 740.422069);
      linearConstraint0.hashCode();
      linearConstraint0.getCoefficients();
      linearConstraint0.getValue();
      linearConstraint0.getCoefficients();
      linearConstraint0.getCoefficients();
      linearConstraint0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1918.40065);
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, 1.0);
      linearConstraint0.equals(relationship0);
      linearConstraint0.getValue();
      linearConstraint0.getCoefficients();
      linearConstraint0.getRelationship();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((RealVector) null).when(realVector0).subtract(any(org.apache.commons.math4.linear.RealVector.class));
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, (-205.5173435), relationship0, realVector0, 225.4457);
      // Undeclared exception!
      try { 
        linearConstraint0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 238.5363691001;
      doubleArray0[1] = (-694.3);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-241.55);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 449.91070652926, relationship0, doubleArray0, 4.0);
      linearConstraint0.equals(relationship0);
      RealVector realVector0 = linearConstraint0.getCoefficients();
      linearConstraint0.hashCode();
      LinearConstraint linearConstraint1 = new LinearConstraint(realVector0, 0.0, relationship0, realVector0, 4.0);
      linearConstraint0.equals(linearConstraint1);
      linearConstraint0.getCoefficients();
      linearConstraint0.getCoefficients();
      linearConstraint0.getValue();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = null;
      try {
        linearConstraint0 = new LinearConstraint((RealVector) null, 0.0, relationship0, (RealVector) null, 1980.24759102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 0.0, relationship0, doubleArray0, (-663.0216297));
      linearConstraint0.getCoefficients();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = null;
      try {
        linearConstraint0 = new LinearConstraint((double[]) null, (-1.0), relationship0, (double[]) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.LinearConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3545.61463794283;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      Relationship relationship0 = Relationship.GEQ;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3545.61463794283;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, (-2092.1), relationship0, doubleArray1, 0.0);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(realVector1).subtract(any(org.apache.commons.math4.linear.RealVector.class));
      LinearConstraint linearConstraint1 = new LinearConstraint(realVector1, 0.0, relationship0, realVector1, 493.55471805264114);
      linearConstraint1.equals("Z K=I#A=Oh(=P");
      linearConstraint0.equals(linearConstraint1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      RealVector realVector1 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(realVector0).when(realVector1).subtract(any(org.apache.commons.math4.linear.RealVector.class));
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector1, -0.0, relationship0, realVector1, -0.0);
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      linearConstraint0.equals(relationship0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = -0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = -0.0;
      linearConstraint0.equals(linearConstraint0);
      linearConstraint0.getValue();
      linearConstraint0.getValue();
      linearConstraint0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn("", "\"i", "2>fwlp9@O").when(realVector0).toString();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, relationship0, (-2231.91));
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      linearConstraint0.hashCode();
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      boolean boolean0 = linearConstraint0.equals(relationship0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertFalse(boolean0);
      
      Relationship relationship1 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship1);
      assertSame(relationship1, relationship0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship1.toString());
      assertEquals(Relationship.EQ, relationship1);
      
      boolean boolean1 = linearConstraint0.equals("coefficients");
      assertTrue(boolean1 == boolean0);
      assertSame(relationship0, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertFalse(boolean1);
      
      boolean boolean2 = linearConstraint0.equals(relationship1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(relationship0, relationship1);
      assertSame(relationship1, relationship0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship1.toString());
      assertFalse(boolean2);
      
      boolean boolean3 = linearConstraint0.equals(relationship1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertSame(relationship0, relationship1);
      assertSame(relationship1, relationship0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship1.toString());
      assertFalse(boolean3);
      
      Relationship relationship2 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertSame(relationship2, relationship0);
      assertSame(relationship2, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship2.toString());
      assertEquals(Relationship.EQ, relationship2);
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      RealVector realVector1 = linearConstraint0.getCoefficients();
      assertNotNull(realVector1);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertSame(realVector1, realVector0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      boolean boolean4 = linearConstraint0.equals((Object) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertFalse(boolean4);
      
      RealVector realVector2 = linearConstraint0.getCoefficients();
      assertNotNull(realVector2);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertSame(realVector2, realVector1);
      assertSame(realVector2, realVector0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      Relationship relationship3 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship3, relationship2);
      assertSame(relationship3, relationship0);
      assertSame(relationship3, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship3.toString());
      assertEquals(Relationship.EQ, relationship3);
      
      Relationship relationship4 = linearConstraint0.getRelationship();
      assertSame(relationship4, relationship0);
      assertSame(relationship4, relationship2);
      assertSame(relationship4, relationship1);
      assertSame(relationship4, relationship3);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertEquals("=", relationship4.toString());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, relationship4);
      
      double double0 = linearConstraint0.getValue();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals((-2231.91), double0, 0.01);
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      RealVector realVector3 = linearConstraint0.getCoefficients();
      assertNotNull(realVector3);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(realVector3, realVector0);
      assertSame(realVector3, realVector2);
      assertSame(realVector3, realVector1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      Relationship relationship5 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship5, relationship3);
      assertSame(relationship5, relationship0);
      assertSame(relationship5, relationship2);
      assertSame(relationship5, relationship4);
      assertSame(relationship5, relationship1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship5.toString());
      assertEquals(Relationship.EQ, relationship5);
      
      LinearConstraint linearConstraint1 = new LinearConstraint(realVector3, relationship4, (-2231.91));
      assertTrue(linearConstraint1.equals((Object)linearConstraint0));
      assertNotNull(linearConstraint1);
      assertEquals("=", relationship4.toString());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertEquals((-2231.91), linearConstraint1.getValue(), 0.01);
      
      boolean boolean5 = linearConstraint0.equals(linearConstraint1);
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertTrue(linearConstraint1.equals((Object)linearConstraint0));
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertSame(relationship4, relationship0);
      assertSame(relationship4, relationship5);
      assertSame(relationship4, relationship2);
      assertSame(relationship4, relationship1);
      assertSame(relationship4, relationship3);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertSame(realVector3, realVector0);
      assertSame(realVector3, realVector2);
      assertSame(realVector3, realVector1);
      assertNotSame(linearConstraint1, linearConstraint0);
      assertEquals("=", relationship4.toString());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertEquals((-2231.91), linearConstraint1.getValue(), 0.01);
      assertTrue(boolean5);
      
      double double1 = linearConstraint0.getValue();
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertEquals(double1, double0, 0.01);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals((-2231.91), double1, 0.01);
      
      boolean boolean6 = linearConstraint0.equals((Object) null);
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertFalse(boolean6);
      
      boolean boolean7 = linearConstraint0.equals(relationship0);
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertFalse(boolean7);
      
      linearConstraint0.hashCode();
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      linearConstraint0.hashCode();
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2231.91);
      doubleArray0[2] = (-2231.91);
      doubleArray0[3] = (-2231.91);
      doubleArray0[4] = (-2231.91);
      doubleArray0[5] = (-2231.91);
      LinearConstraint linearConstraint2 = new LinearConstraint(doubleArray0, (-2231.91), relationship1, doubleArray0, (-2231.91));
      assertFalse(linearConstraint2.equals((Object)linearConstraint1));
      assertFalse(linearConstraint2.equals((Object)linearConstraint0));
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertNotNull(linearConstraint2);
      assertEquals(0.0, linearConstraint2.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint2.getRelationship());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals("=", relationship1.toString());
      assertArrayEquals(new double[] {(-2231.91), 0.0, (-2231.91), (-2231.91), (-2231.91), (-2231.91)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean8 = linearConstraint1.equals(linearConstraint2);
      assertFalse(linearConstraint2.equals((Object)linearConstraint1));
      assertFalse(linearConstraint2.equals((Object)linearConstraint0));
      assertTrue(linearConstraint0.equals((Object)linearConstraint1));
      assertFalse(linearConstraint0.equals((Object)linearConstraint2));
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertFalse(linearConstraint1.equals((Object)linearConstraint2));
      assertTrue(linearConstraint1.equals((Object)linearConstraint0));
      assertSame(relationship4, relationship0);
      assertSame(relationship4, relationship5);
      assertSame(relationship4, relationship2);
      assertSame(relationship4, relationship1);
      assertSame(relationship4, relationship3);
      assertSame(relationship0, relationship2);
      assertSame(relationship0, relationship5);
      assertSame(relationship0, relationship4);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertNotSame(linearConstraint2, linearConstraint1);
      assertNotSame(linearConstraint2, linearConstraint0);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertNotSame(linearConstraint0, linearConstraint2);
      assertSame(realVector3, realVector0);
      assertSame(realVector3, realVector2);
      assertSame(realVector3, realVector1);
      assertNotSame(linearConstraint1, linearConstraint2);
      assertNotSame(linearConstraint1, linearConstraint0);
      assertSame(relationship1, relationship2);
      assertSame(relationship1, relationship5);
      assertSame(relationship1, relationship0);
      assertSame(relationship1, relationship3);
      assertSame(relationship1, relationship4);
      assertEquals("=", relationship4.toString());
      assertEquals(0.0, linearConstraint2.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint2.getRelationship());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-2231.91), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint1.getRelationship());
      assertEquals((-2231.91), linearConstraint1.getValue(), 0.01);
      assertEquals("=", relationship1.toString());
      assertFalse(boolean8);
      assertArrayEquals(new double[] {(-2231.91), 0.0, (-2231.91), (-2231.91), (-2231.91), (-2231.91)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(realVector0).toString();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, relationship0, 0.0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linearConstraint0.hashCode();
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      Relationship relationship1 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship1);
      assertSame(relationship1, relationship0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("=", relationship1.toString());
      assertEquals(Relationship.EQ, relationship1);
      
      boolean boolean0 = linearConstraint0.equals((Object) null);
      assertSame(relationship0, relationship1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertFalse(boolean0);
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      Relationship relationship2 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship2);
      assertSame(relationship2, relationship1);
      assertSame(relationship2, relationship0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("=", relationship2.toString());
      assertEquals(Relationship.EQ, relationship2);
      
      RealVector realVector1 = linearConstraint0.getCoefficients();
      assertNotNull(realVector1);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship2);
      assertSame(realVector1, realVector0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      Relationship relationship3 = linearConstraint0.getRelationship();
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertSame(relationship3, relationship1);
      assertSame(relationship3, relationship0);
      assertSame(relationship3, relationship2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("=", relationship3.toString());
      assertEquals(Relationship.EQ, relationship3);
      
      RealVector realVector2 = linearConstraint0.getCoefficients();
      assertNotNull(realVector2);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertSame(realVector2, realVector1);
      assertSame(realVector2, realVector0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      linearConstraint0.hashCode();
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      
      boolean boolean1 = linearConstraint0.equals("|ZY\"!t+R");
      assertTrue(boolean1 == boolean0);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertFalse(boolean1);
      
      boolean boolean2 = linearConstraint0.equals((Object) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertFalse(boolean2);
      
      double double0 = linearConstraint0.getValue();
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, double0, 0.01);
      
      Relationship relationship4 = Relationship.LEQ;
      LinearConstraint linearConstraint1 = new LinearConstraint(realVector1, relationship4, 0.0);
      assertFalse(relationship0.equals((Object)relationship4));
      assertFalse(relationship4.equals((Object)relationship0));
      assertFalse(relationship4.equals((Object)relationship2));
      assertFalse(relationship4.equals((Object)relationship1));
      assertFalse(relationship4.equals((Object)relationship3));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertNotNull(linearConstraint1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(Relationship.LEQ, linearConstraint1.getRelationship());
      assertEquals(0.0, linearConstraint1.getValue(), 0.01);
      
      boolean boolean3 = linearConstraint0.equals(linearConstraint1);
      assertFalse(relationship0.equals((Object)relationship4));
      assertFalse(relationship4.equals((Object)relationship0));
      assertFalse(relationship4.equals((Object)relationship2));
      assertFalse(relationship4.equals((Object)relationship1));
      assertFalse(relationship4.equals((Object)relationship3));
      assertFalse(linearConstraint0.equals((Object)linearConstraint1));
      assertFalse(linearConstraint1.equals((Object)linearConstraint0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertSame(relationship0, relationship1);
      assertSame(relationship0, relationship3);
      assertSame(relationship0, relationship2);
      assertNotSame(relationship0, relationship4);
      assertNotSame(relationship4, relationship0);
      assertNotSame(relationship4, relationship2);
      assertNotSame(relationship4, relationship1);
      assertNotSame(relationship4, relationship3);
      assertNotSame(linearConstraint0, linearConstraint1);
      assertNotSame(linearConstraint1, linearConstraint0);
      assertSame(realVector1, realVector2);
      assertSame(realVector1, realVector0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(Relationship.LEQ, linearConstraint1.getRelationship());
      assertEquals(0.0, linearConstraint1.getValue(), 0.01);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(realVector0).toString();
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(realVector0, relationship0, (-448.92));
      linearConstraint0.equals(relationship0);
      linearConstraint0.hashCode();
      linearConstraint0.hashCode();
      linearConstraint0.equals(relationship0);
      RealVector realVector1 = linearConstraint0.getCoefficients();
      linearConstraint0.hashCode();
      boolean boolean0 = linearConstraint0.equals(realVector1);
      assertFalse(boolean0);
      
      linearConstraint0.getCoefficients();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-448.92);
      doubleArray0[1] = (-448.92);
      doubleArray0[2] = (-448.92);
      doubleArray0[3] = (-448.92);
      LinearConstraint linearConstraint1 = new LinearConstraint(doubleArray0, relationship0, (-448.92));
      boolean boolean1 = linearConstraint0.equals(linearConstraint1);
      assertFalse(boolean1);
      
      linearConstraint0.hashCode();
      linearConstraint0.hashCode();
      linearConstraint0.getValue();
      linearConstraint0.getRelationship();
      linearConstraint0.hashCode();
      linearConstraint0.hashCode();
      linearConstraint0.getValue();
      linearConstraint0.getCoefficients();
      linearConstraint0.getValue();
      double double0 = linearConstraint0.getValue();
      assertEquals((-448.92), double0, 0.01);
      
      linearConstraint0.getCoefficients();
      linearConstraint0.getRelationship();
      assertFalse(linearConstraint0.equals((Object)linearConstraint1));
  }
}

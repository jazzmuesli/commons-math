/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:05:32 GMT 2019
 */

package org.apache.commons.math4.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.PointVectorValuePair;
import org.apache.commons.math4.optim.SimpleVectorValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleVectorValueChecker_ESTest extends SimpleVectorValueChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(1.0, 0.0);
      assertEquals(0.0, simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(1.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(pointVectorValuePair0).getValueRef();
      boolean boolean0 = simpleVectorValueChecker0.converged((-242), pointVectorValuePair0, pointVectorValuePair0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0.0, simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(1.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals(0.0, simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-458);
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(pointVectorValuePair0).getValueRef();
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      PointVectorValuePair pointVectorValuePair1 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(pointVectorValuePair1).getValueRef();
      boolean boolean0 = simpleVectorValueChecker0.converged((-458), pointVectorValuePair0, pointVectorValuePair1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-458.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals(0.0, simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, (-924.4631608877), 1);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-924.4631608877), simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      PointVectorValuePair pointVectorValuePair1 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = simpleVectorValueChecker0.converged(1, pointVectorValuePair0, pointVectorValuePair1);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-924.4631608877), simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, (-924.4631608877), 1);
      assertEquals((-924.4631608877), simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(0.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(pointVectorValuePair0).getValueRef();
      // Undeclared exception!
      try { 
        simpleVectorValueChecker0.converged(0, pointVectorValuePair0, pointVectorValuePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(1.0, 0.0);
      assertEquals(0.0, simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(1.0, simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray0).when(pointVectorValuePair0).getValueRef();
      // Undeclared exception!
      try { 
        simpleVectorValueChecker0.converged((-242), pointVectorValuePair0, pointVectorValuePair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.optim.SimpleVectorValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-108.76), (-108.76));
      assertEquals((-108.76), simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-108.76), simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertNotNull(simpleVectorValueChecker0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-108.76);
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(pointVectorValuePair0).getValueRef();
      boolean boolean0 = simpleVectorValueChecker0.converged(0, pointVectorValuePair0, pointVectorValuePair0);
      assertArrayEquals(new double[] {(-108.76), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-108.76), simpleVectorValueChecker0.getRelativeThreshold(), 0.01);
      assertEquals((-108.76), simpleVectorValueChecker0.getAbsoluteThreshold(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker((-1.0), 1229);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1229;
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(pointVectorValuePair0).getValueRef();
      boolean boolean0 = simpleVectorValueChecker0.converged(8, pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, (-924.4631608877), 1);
      PointVectorValuePair pointVectorValuePair0 = mock(PointVectorValuePair.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = simpleVectorValueChecker0.converged(478, pointVectorValuePair0, pointVectorValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleVectorValueChecker simpleVectorValueChecker0 = null;
      try {
        simpleVectorValueChecker0 = new SimpleVectorValueChecker(0.0, 0.0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.SimpleVectorValueChecker", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:37:03 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.MultivariateVectorFunction;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeastSquaresConverter_ESTest extends LeastSquaresConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      double[] doubleArray1 = new double[1];
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray1, doubleArray1);
      double double0 = leastSquaresConverter0.value(doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      double[] doubleArray1 = new double[0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealMatrix) null).when(realMatrix0).copy();
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray1, realMatrix0);
      // Undeclared exception!
      try { 
        leastSquaresConverter0.value(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5337.03;
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray0);
      leastSquaresConverter0.value(doubleArray0);
      double double0 = leastSquaresConverter0.value(doubleArray0);
      assertArrayEquals(new double[] {(-5337.03), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.84838892209E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-446.300087087007);
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray1, doubleArray1);
      double double0 = leastSquaresConverter0.value(doubleArray0);
      assertArrayEquals(new double[] {446.300087087007, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-8.889573288594438E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(multivariateVectorFunction0).value(any(double[].class));
      double[] doubleArray0 = new double[0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((RealMatrix) null).when(realMatrix0).copy();
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray0, realMatrix0);
      // Undeclared exception!
      try { 
        leastSquaresConverter0.value(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, (double[]) null, realMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(multivariateVectorFunction0).value(any(double[].class));
      double[] doubleArray1 = new double[1];
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        leastSquaresConverter0.value(doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2828), 0).when(realMatrix0).getColumnDimension();
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray0, realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != -2,828
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultivariateVectorFunction multivariateVectorFunction0 = mock(MultivariateVectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      LeastSquaresConverter leastSquaresConverter0 = null;
      try {
        leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorFunction0, doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LeastSquaresConverter", e);
      }
  }
}

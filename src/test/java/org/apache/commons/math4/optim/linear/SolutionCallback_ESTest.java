/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:38:24 GMT 2019
 */

package org.apache.commons.math4.optim.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.apache.commons.math4.optim.PointValuePair;
import org.apache.commons.math4.optim.linear.LinearConstraint;
import org.apache.commons.math4.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math4.optim.linear.SimplexTableau;
import org.apache.commons.math4.optim.linear.SolutionCallback;
import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SolutionCallback_ESTest extends SolutionCallback_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SolutionCallback solutionCallback0 = new SolutionCallback();
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      solutionCallback0.setTableau(simplexTableau0);
      boolean boolean0 = solutionCallback0.isSolutionOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SolutionCallback solutionCallback0 = new SolutionCallback();
      boolean boolean0 = solutionCallback0.isSolutionOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionCallback solutionCallback0 = new SolutionCallback();
      PointValuePair pointValuePair0 = solutionCallback0.getSolution();
      assertNull(pointValuePair0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SolutionCallback solutionCallback0 = new SolutionCallback();
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      solutionCallback0.setTableau(simplexTableau0);
      PointValuePair pointValuePair0 = solutionCallback0.getSolution();
      assertNotNull(pointValuePair0);
  }
}

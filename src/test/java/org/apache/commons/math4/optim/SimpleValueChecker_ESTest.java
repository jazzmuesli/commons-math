/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:40:07 GMT 2019
 */

package org.apache.commons.math4.optim;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.PointValuePair;
import org.apache.commons.math4.optim.SimpleValueChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleValueChecker_ESTest extends SimpleValueChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-2541.803491227), 0.0);
      Double double0 = new Double((-2541.803491227));
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (Object) null).when(pointValuePair0).getValue();
      // Undeclared exception!
      try { 
        simpleValueChecker0.converged(0, pointValuePair0, pointValuePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.0, 1.0);
      Double double0 = new Double(1.0);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (Object) null).when(pointValuePair0).getValue();
      // Undeclared exception!
      try { 
        simpleValueChecker0.converged((-1506), pointValuePair0, pointValuePair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(421.0, 421.0);
      Double double0 = new Double(0.0);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pointValuePair0).getValue();
      PointValuePair pointValuePair1 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleValueChecker0.converged(16, pointValuePair0, pointValuePair1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.SimpleValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0, 2317);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = simpleValueChecker0.converged(2896, pointValuePair0, pointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0, 2317);
      Double double0 = new Double(0.0);
      Double double1 = new Double(2896);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double0).when(pointValuePair0).getValue();
      boolean boolean0 = simpleValueChecker0.converged(0, pointValuePair0, pointValuePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.0, 1.0, 1);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = simpleValueChecker0.converged(1, pointValuePair0, pointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = null;
      try {
        simpleValueChecker0 = new SimpleValueChecker(0.0, (-3229.0), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.optim.SimpleValueChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0, 2317);
      Double double0 = new Double(0.0);
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0).when(pointValuePair0).getValue();
      boolean boolean0 = simpleValueChecker0.converged(1, pointValuePair0, pointValuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-384.4236873442), 73.391);
      Double double0 = new Double((-384.4236873442));
      PointValuePair pointValuePair0 = mock(PointValuePair.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0).when(pointValuePair0).getValue();
      boolean boolean0 = simpleValueChecker0.converged((-26), pointValuePair0, pointValuePair0);
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:32:38 GMT 2019
 */

package org.apache.commons.math4.optim.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math4.optim.InitialGuess;
import org.apache.commons.math4.optim.OptimizationData;
import org.apache.commons.math4.optim.SimpleBounds;
import org.apache.commons.math4.optim.linear.LinearConstraint;
import org.apache.commons.math4.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math4.optim.linear.PivotSelectionRule;
import org.apache.commons.math4.optim.linear.SimplexSolver;
import org.apache.commons.math4.optim.linear.SimplexTableau;
import org.apache.commons.math4.optim.linear.SolutionCallback;
import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimplexSolver_ESTest extends SimplexSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(1736.0, (-1612), 2660.7782);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 2660.7782;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1772.36);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1772.36, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 2660.7782, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1830.90165993));
      assertNotNull(simplexTableau0);
      assertEquals(1772.36, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 2660.7782, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math4.optim.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-397.348), 0, 0);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      // Undeclared exception!
      try { 
        simplexSolver0.solvePhase1((SimplexTableau) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      assertNotNull(simpleBounds0);
      
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      double[] doubleArray0 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexSolver0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math4.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(0.0, 1286);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      // Undeclared exception!
      try { 
        simplexSolver0.parseOptimizationData((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.BaseOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(1851.747154040471, (-1));
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      SolutionCallback solutionCallback0 = new SolutionCallback();
      assertNotNull(solutionCallback0);
      
      optimizationDataArray0[1] = (OptimizationData) solutionCallback0;
      simplexSolver0.parseOptimizationData(optimizationDataArray0);
      assertNull(simplexSolver0.getGoalType());
      assertEquals(5, optimizationDataArray0.length);
      
      // Undeclared exception!
      try { 
        simplexSolver0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(1736.0, (-1612), 2660.7782);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1772.36);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1772.36, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1772.36, 10);
      assertNotNull(simplexTableau0);
      assertEquals(1772.36, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      simplexSolver0.solvePhase1(simplexTableau0);
      assertNull(simplexSolver0.getGoalType());
      assertEquals(1772.36, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-10);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 580.7114008090895;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 580.7114008090895);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(580.7114008090895, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {580.7114008090895, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-10);
      assertNotNull(simplexTableau0);
      assertEquals(580.7114008090895, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {580.7114008090895, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math4.optim.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(1.0E-10);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 580.7114008090895);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(580.7114008090895, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-10);
      assertNotNull(simplexTableau0);
      assertEquals(580.7114008090895, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1582.5648942), (-625), 1.0);
      assertNotNull(simplexSolver0);
      assertNull(simplexSolver0.getGoalType());
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      PivotSelectionRule pivotSelectionRule0 = PivotSelectionRule.DANTZIG;
      assertEquals(PivotSelectionRule.DANTZIG, pivotSelectionRule0);
      
      optimizationDataArray0[4] = (OptimizationData) pivotSelectionRule0;
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(12.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      double[] doubleArray0 = new double[6];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      double[] doubleArray1 = new double[5];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math4.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      // Undeclared exception!
      try { 
        simplexSolver0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:53:20 GMT 2019
 */

package org.apache.commons.math4.optim.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.optim.univariate.UnivariateObjectiveFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnivariateObjectiveFunction_ESTest extends UnivariateObjectiveFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnivariateObjectiveFunction univariateObjectiveFunction0 = new UnivariateObjectiveFunction((UnivariateFunction) null);
      UnivariateFunction univariateFunction0 = univariateObjectiveFunction0.getObjectiveFunction();
      assertNull(univariateFunction0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(univariateFunction0).toString();
      UnivariateObjectiveFunction univariateObjectiveFunction0 = new UnivariateObjectiveFunction(univariateFunction0);
      UnivariateFunction univariateFunction1 = univariateObjectiveFunction0.getObjectiveFunction();
      assertSame(univariateFunction1, univariateFunction0);
  }
}

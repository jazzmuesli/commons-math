/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:33:18 GMT 2019
 */

package org.apache.commons.math4.optim.nonlinear.scalar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math4.optim.nonlinear.scalar.LineSearch;
import org.apache.commons.math4.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math4.optim.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LineSearch_ESTest extends LineSearch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(2303.55, (-480.50709570449), 0.0, 3.1660099222737955E-7, (-480.50709570449)).when(multivariateOptimizer0).computeObjectiveValue(any(double[].class));
      doReturn(goalType0).when(multivariateOptimizer0).getGoalType();
      LineSearch lineSearch0 = new LineSearch(multivariateOptimizer0, 2.0E-21, 1506.91939187666, 1025.4993);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1506.91939187666;
      UnivariatePointValuePair univariatePointValuePair0 = lineSearch0.search(doubleArray0, doubleArray0);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GoalType goalType0 = GoalType.MAXIMIZE;
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(2303.55, (-480.50709570449), 0.0, 3.1660099222737955E-7, (-480.50709570449)).when(multivariateOptimizer0).computeObjectiveValue(any(double[].class));
      doReturn(goalType0, goalType0).when(multivariateOptimizer0).getGoalType();
      LineSearch lineSearch0 = new LineSearch(multivariateOptimizer0, 2.0E-21, 1506.91939187666, 1025.4993);
      double[] doubleArray0 = new double[2];
      UnivariatePointValuePair univariatePointValuePair0 = lineSearch0.search(doubleArray0, doubleArray0);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      
      UnivariatePointValuePair univariatePointValuePair1 = lineSearch0.search(doubleArray0, doubleArray0);
      assertEquals(1025.4993, univariatePointValuePair1.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(multivariateOptimizer0).computeObjectiveValue(any(double[].class));
      doReturn((GoalType) null).when(multivariateOptimizer0).getGoalType();
      LineSearch lineSearch0 = new LineSearch(multivariateOptimizer0, (-2672.950497), (-1780.21416), (-2672.950497));
      double[] doubleArray0 = new double[1];
      UnivariatePointValuePair univariatePointValuePair0 = lineSearch0.search(doubleArray0, doubleArray0);
      assertEquals((-2672.950497), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(multivariateOptimizer0).computeObjectiveValue(any(double[].class));
      doReturn((GoalType) null).when(multivariateOptimizer0).getGoalType();
      LineSearch lineSearch0 = new LineSearch(multivariateOptimizer0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        lineSearch0.search(doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is larger than, or equal to, the maximum (0)
         //
         verifyException("org.apache.commons.math4.optim.univariate.SearchInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LineSearch lineSearch0 = new LineSearch((MultivariateOptimizer) null, (-812.04584322), (-812.04584322), 0.0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        lineSearch0.search(doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LineSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultivariateOptimizer multivariateOptimizer0 = mock(MultivariateOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((GoalType) null).when(multivariateOptimizer0).getGoalType();
      LineSearch lineSearch0 = new LineSearch(multivariateOptimizer0, 1016.0, 1016.0, 1016.0);
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        lineSearch0.search(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math4.optim.nonlinear.scalar.LineSearch$1", e);
      }
  }
}

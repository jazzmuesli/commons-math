/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:10:15 GMT 2019
 */

package org.apache.commons.math4.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math4.geometry.euclidean.threed.RotationOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RotationOrder_ESTest extends RotationOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertEquals(1.0, vector3D0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertEquals(3, vector3D0.getDimension());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertFalse(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertEquals(1.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      String string0 = rotationOrder0.toString();
      assertEquals("ZXZ", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertEquals(0.0, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertEquals(1.0, vector3D0.normSq(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:48:51 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealMatrixChangingVisitor;
import org.apache.commons.math4.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Array2DRowRealMatrix_ESTest extends Array2DRowRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      RealMatrixChangingVisitor realMatrixChangingVisitor1 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.createMatrix(186, 1799);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4054.766640526);
      doubleArray0[3] = (-452.8407603873903);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-3100.98161);
      doubleArray0[6] = 3107.9;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-642.39689317);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      double[] doubleArray1 = array2DRowRealMatrix0.getRow(0);
      assertEquals(1, doubleArray1.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.copy();
      assertEquals(9, array2DRowRealMatrix1.getRowDimension());
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
      array2DRowRealMatrix2.getRowDimension();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1495.516805083325);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-6.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      double[] doubleArray1 = array2DRowRealMatrix0.preMultiply(doubleArray0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = (-255);
      array2DRowRealMatrix0.operate(doubleArray1);
      int int1 = 0;
      int int2 = (-555);
      try { 
        array2DRowRealMatrix0.multiplyEntry((-555), (-1355), (-136.1958412));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (-555)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getDataRef();
      array2DRowRealMatrix0.getNorm();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-375.479175279368)).when(realMatrixChangingVisitor0).end();
      doReturn(1998.508).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      int int0 = 0;
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 0, 0, 0, 0);
      int int1 = 155;
      try { 
        array2DRowRealMatrix0.getSubMatrix(0, 186, 155, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (186)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-948.789996)).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0);
      doubleArray0[0] = (double) 137;
      doubleArray0[1] = (double) 137;
      doubleArray0[2] = (double) 137;
      doubleArray0[3] = (double) 137;
      doubleArray0[4] = (double) 137;
      doubleArray0[5] = (double) 0;
      array2DRowRealMatrix0.getRowDimension();
      array2DRowRealMatrix0.getColumnDimension();
      try { 
        array2DRowRealMatrix0.setColumn(137, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (137)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 314;
      RealVector realVector0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      array2DRowRealMatrix1.getData();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getDataRef();
      array2DRowRealMatrix0.getNorm();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(235.82196).when(realMatrixChangingVisitor0).end();
      doReturn(204.1883075037).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      int int0 = 0;
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 0, 0, 0, 0);
      int int1 = 155;
      try { 
        array2DRowRealMatrix0.getSubMatrix(0, 186, 155, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (186)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3788.591);
      doubleArray0[1] = 13.0;
      doubleArray0[2] = (-1249.393941);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-3788.591)).when(realMatrixChangingVisitor0).end();
      doReturn((-3788.591), 13.0, 1916.2541833).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0);
      array2DRowRealMatrix0.getDataRef();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2968.021519);
      doubleArray0[4] = 478.403;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.preMultiply(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(realMatrixChangingVisitor0).end();
      doReturn(0.0, (-2968.021519), (-2968.021519), 0.0, (-171.5835352606242)).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0);
      try { 
        array2DRowRealMatrix0.createMatrix((-4993), (-4993));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -4,993 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-2047.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2047.0);
      doubleArray3[1] = (-2047.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 1.9868161777724352E-8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 958.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 5.865827662008209E-8;
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 5.865827662008209E-8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 5.865827662008209E-8;
      doubleArray7[1] = (-2047.0);
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 1.9868161777724352E-8;
      doubleArray0[7] = doubleArray8;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-870.0);
      doubleArray0[1] = 910.017539478825;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-109.88626241743)).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixPreservingVisitor0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(0.0);
      array2DRowRealMatrix0.subtract(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(55, 55);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(realMatrixChangingVisitor0).end();
      doReturn((-2082.2934), (-2082.2934), (-1.0), 1137.0, 0.4794255495071411).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0, 55, 4923, 4923, (-964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (55)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = (-1);
      int int1 = 3326;
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.add(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(55, 55);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)55).when(realMatrixChangingVisitor0).end();
      doReturn((double)55, (double)55, (double)55, (-1570.9901638439), (double)55).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0, 55, 4923, 4923, (-964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (55)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[0];
      array2DRowRealMatrix0.preMultiply(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 0;
      int int1 = 137;
      double[] doubleArray0 = new double[6];
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((double)137).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0);
      try { 
        array2DRowRealMatrix0.addToEntry(137, 137, 2988.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (137)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3903.778584617301;
      doubleArray0[1] = (-691.62175614);
      doubleArray0[2] = 4601.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-4196.749268353);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      try { 
        array2DRowRealMatrix0.preMultiply(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-295.0);
      doubleArray0[2] = 1.0E-16;
      doubleArray0[3] = 783.0271493;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getRowDimension();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1303, 1303);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1303;
      doubleArray0[1] = (double) 1303;
      try { 
        array2DRowRealMatrix0.operate(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 1,303
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Array2DRowRealMatrix array2DRowRealMatrix1 = null;
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.subtract((Array2DRowRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(305, 305);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 305;
      doubleArray0[1] = (double) 305;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 305;
      try { 
        array2DRowRealMatrix0.setRow(305, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (305)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1495.1460342014539);
      doubleArray0[1] = (-2318.821194433);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 277.508652216;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      int int0 = 0;
      try { 
        array2DRowRealMatrix0.getEntry(134, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (134)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2442.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getDataRef();
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 150;
      int int2 = 259;
      try { 
        array2DRowRealMatrix0.createMatrix(259, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1177.9261667698);
      doubleArray0[2] = 1113.51885928;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        array2DRowRealMatrix0.setEntry(811, 12, 2765.6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (811)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-870.0);
      doubleArray0[1] = 910.017539478825;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixPreservingVisitor0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = 0;
      int int1 = (-640);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarMultiply(0.0);
      array2DRowRealMatrix0.subtract(realMatrix0);
      try { 
        array2DRowRealMatrix0.getTrace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (4x1) matrix
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.718281828459045;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-58.2184);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.operate(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.718281828459045;
      doubleArray0[1] = 736.5194097554;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.preMultiply(doubleArray0);
      double[][] doubleArray1 = array2DRowRealMatrix0.getData();
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1);
      int int0 = (-1618);
      try { 
        array2DRowRealMatrix0.getColumnVector(2846);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (2,846)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(55, 55);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0, 55, 4923, 4923, (-964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (55)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getDataRef();
      array2DRowRealMatrix0.getNorm();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      doReturn(0.0).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      int int0 = 0;
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 0, 0, 0, 0);
      int int1 = 155;
      try { 
        array2DRowRealMatrix0.getSubMatrix(0, 186, 155, 26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (186)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[3] = 2956;
      intArray0[1] = 0;
      intArray0[2] = (-1066);
      intArray0[3] = (-1066);
      intArray0[4] = (-1066);
      double[] doubleArray1 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.getDataRef();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1368.2520671);
      doubleArray0[1] = (-192.0295864);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2076.397928596548;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1643.601271);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3886.7222127782;
      doubleArray0[1] = 1728.4845793323;
      doubleArray0[2] = 1731.132;
      doubleArray0[3] = (-653.2);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.copy();
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      array2DRowRealMatrix0.transpose();
      doubleArray1[3] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray1, false);
      try { 
        array2DRowRealMatrix0.add(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 4x1 but expected 4x4
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 14;
      doubleArray1[1] = (double) 14;
      doubleArray1[2] = (double) 14;
      doubleArray1[3] = (double) 14;
      doubleArray1[4] = 1183.66921;
      doubleArray1[5] = (double) 14;
      doubleArray1[6] = (double) 14;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1183.66921;
      doubleArray2[2] = 1183.66921;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1183.66921;
      doubleArray3[3] = 1183.66921;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 14;
      doubleArray4[2] = (-561.4377128582);
      doubleArray4[3] = (double) 14;
      doubleArray4[4] = (double) 14;
      doubleArray4[5] = 1183.66921;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-561.4377128582);
      doubleArray5[1] = 1183.66921;
      doubleArray0[4] = doubleArray5;
      try { 
        array2DRowRealMatrix0.setSubMatrix(doubleArray0, 14, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInOptimizedOrder(realMatrixPreservingVisitor0);
      try { 
        array2DRowRealMatrix0.operate(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      int int0 = 1100;
      array2DRowRealMatrix0.createMatrix(1100, 1100);
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      double double1 = 12.0;
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.add((Array2DRowRealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(144, 5025);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 144;
      doubleArray1[1] = 2803.06505855973;
      doubleArray1[2] = (double) 144;
      doubleArray1[3] = (double) 5025;
      doubleArray1[4] = (double) 5025;
      doubleArray1[5] = (double) 144;
      doubleArray1[6] = (double) 5025;
      doubleArray0[0] = doubleArray1;
      array2DRowRealMatrix0.setSubMatrix(doubleArray0, 0, 211);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 296;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(296, 296);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      RealMatrix realMatrix0 = array2DRowRealMatrix0.copy();
      array2DRowRealMatrix0.checkMultiply(realMatrix0);
      int int1 = 496;
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 496;
      doubleArray1[1] = (double) 296;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 496;
      doubleArray2[1] = (double) 296;
      doubleArray2[2] = (double) 296;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 296;
      doubleArray3[1] = (double) 296;
      doubleArray3[2] = (double) 496;
      doubleArray3[3] = (double) 496;
      doubleArray3[4] = (double) 496;
      doubleArray3[5] = (double) 296;
      doubleArray0[2] = doubleArray3;
      Array2DRowRealMatrix array2DRowRealMatrix1 = null;
      try {
        array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2587.08487723);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-3110.2775189591453);
      doubleArray1[4] = (-2402.9789158);
      doubleArray1[5] = 868.265500335103;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 868.265500335103;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-2587.08487723);
      doubleArray2[4] = (-3110.2775189591453);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3058.638;
      doubleArray0[3] = (-250.392715345939);
      doubleArray0[4] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(0.0);
      array2DRowRealMatrix0.add(realMatrix0);
      int int0 = 0;
      try { 
        array2DRowRealMatrix0.createMatrix(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-4194.244198);
      doubleArray1[5] = 1288.635685;
      doubleArray1[6] = (-415.266855506428);
      doubleArray1[7] = (-820.1444535373);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-415.266855506428);
      doubleArray2[4] = (-549.23);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (-820.1444535373);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.setSubMatrix(doubleArray0, 1840, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // first 1,840 rows are not initialized yet
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = (-1024);
      try { 
        array2DRowRealMatrix0.walkInColumnOrder(realMatrixPreservingVisitor0, (-1024), (-1024), (-1024), (-1024));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (-1,024)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.getFrobeniusNorm();
      array2DRowRealMatrix0.getRowDimension();
      array2DRowRealMatrix0.getColumnDimension();
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      Array2DRowRealMatrix array2DRowRealMatrix1 = null;
      try {
        array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1467.6338016;
      doubleArray0[2] = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      array2DRowRealMatrix0.getColumn(0);
      try { 
        array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor0, 0, 0, 0, 3286);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (3,286)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 664.2;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-2349.9175);
      doubleArray2[1] = (-9.0);
      doubleArray2[2] = 664.2;
      doubleArray2[3] = 664.2;
      doubleArray2[4] = 664.2;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 664.2;
      doubleArray2[7] = 664.2;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.getNorm();
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInOptimizedOrder(realMatrixPreservingVisitor0);
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2.0);
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2.0);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 4056.68316772;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2.0);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 4056.68316772;
      doubleArray5[5] = (-2.0);
      doubleArray5[6] = (-2.0);
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 3752.7026561669286;
      doubleArray8[2] = (-2.0);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.setSubMatrix(doubleArray0, (-1028), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // first 1 columns are not initialized yet
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[8];
      double double0 = (-2117.0);
      try { 
        array2DRowRealMatrix0.multiplyEntry(180, 180, (-9.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (180)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1220.2722442008);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1506.92);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1220.2722442008);
      doubleArray0[2] = doubleArray3;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 0;
      int int1 = (-2553);
      try { 
        array2DRowRealMatrix0.getSubMatrix(0, 0, 0, (-2553));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (0)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1870.964);
      doubleArray2[1] = (-3584.8916737066406);
      doubleArray2[2] = 3968.18;
      doubleArray2[3] = (-154.8418709503);
      doubleArray2[4] = (-2281.0);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 8.0;
      doubleArray0[1] = doubleArray2;
      try { 
        array2DRowRealMatrix0.setSubMatrix(doubleArray0, (-2249), (-2249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.multiply(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = (-2200.027251152);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-280.36553);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 1476, 1476, 0, 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (1,476)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1539.9628519383098);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = 1.0E-16;
      doubleArray0[3] = 2821.635396004996;
      doubleArray0[4] = (-1753.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      try { 
        array2DRowRealMatrix0.subtract(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 5x1 but expected 0x0
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.multiply(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1590.465;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2.0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.multiply(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 1, 1333, 1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.copy();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 250;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(250, 250);
      try { 
        array2DRowRealMatrix0.getRow(250);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (250)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6455.91);
      doubleArray0[1] = 1910.7244984312;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1530.590176599932;
      doubleArray0[5] = 1556.017502187;
      doubleArray0[6] = (-62.98214);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getColumnDimension();
      array2DRowRealMatrix0.createMatrix(1, 1);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0, 0, 0, 0, (-1148));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (-1,148)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      array2DRowRealMatrix0.getTrace();
      try { 
        array2DRowRealMatrix0.walkInOptimizedOrder(realMatrixPreservingVisitor0, 173, 173, 173, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (173)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1162.3717);
      doubleArray1[2] = (-623.4852758480313);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 12.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 12.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-623.4852758480313);
      doubleArray2[4] = 1024.0;
      doubleArray2[5] = (-623.4852758480313);
      doubleArray2[6] = 12.0;
      doubleArray2[7] = 12.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 12.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1024.0;
      doubleArray3[5] = 1024.0;
      doubleArray3[6] = 12.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1162.3717);
      doubleArray4[1] = (-1162.3717);
      doubleArray4[2] = 1024.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1024.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-1162.3717);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-1300.8492872);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 12.0;
      doubleArray6[4] = (-623.4852758480313);
      doubleArray6[5] = 2.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 2.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      int int0 = (-1918);
      int int1 = 2056;
      try { 
        array2DRowRealMatrix0.addToEntry((-1918), 2056, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (-1,918)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[][] doubleArray0 = new double[0][8];
      Array2DRowRealMatrix array2DRowRealMatrix1 = null;
      try {
        array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4596.44511826;
      doubleArray0[2] = (-8.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix0.addToEntry(26, (-1968), 2.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (26)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix((double[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 917.1;
      doubleArray0[1] = 3903.5939696;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-5598.329659);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      int int0 = 0;
      array2DRowRealMatrix0.getSubMatrix(0, 0, 0, 0);
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = null;
      // Undeclared exception!
      try { 
        array2DRowRealMatrix0.walkInColumnOrder((RealMatrixPreservingVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      int int0 = 0;
      double[] doubleArray0 = new double[6];
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixPreservingVisitor0).end();
      array2DRowRealMatrix0.walkInRowOrder(realMatrixPreservingVisitor0);
      doubleArray0[0] = (double) 137;
      doubleArray0[1] = (double) 137;
      doubleArray0[2] = (double) 137;
      doubleArray0[3] = (double) 137;
      doubleArray0[4] = (double) 137;
      doubleArray0[5] = (double) 0;
      try { 
        array2DRowRealMatrix0.setColumn(137, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (137)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.getDataRef();
      array2DRowRealMatrix0.getNorm();
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor0).end();
      doReturn(0.0).when(realMatrixChangingVisitor0).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 0, 0, 0, 0);
      array2DRowRealMatrix0.preMultiply((RealMatrix) array2DRowRealMatrix0);
      RealMatrixChangingVisitor realMatrixChangingVisitor1 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realMatrixChangingVisitor1).end();
      doReturn(0.0).when(realMatrixChangingVisitor1).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInColumnOrder(realMatrixChangingVisitor1);
      try { 
        array2DRowRealMatrix0.addToEntry(0, 155, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (155)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1603.1);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1413.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      array2DRowRealMatrix0.scalarAdd(1413.0);
      int int0 = 134;
      int[] intArray0 = new int[9];
      intArray0[0] = 134;
      intArray0[1] = 134;
      intArray0[2] = 134;
      intArray0[3] = 134;
      intArray0[4] = 134;
      intArray0[5] = 134;
      intArray0[6] = 134;
      intArray0[7] = 134;
      intArray0[8] = 134;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      try { 
        array2DRowRealMatrix0.copySubMatrix(intArray0, intArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (134)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-1562);
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(0, (-1562));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-3523);
      double[][] doubleArray0 = new double[2][1];
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(39, 156);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix();
      try { 
        array2DRowRealMatrix0.add(array2DRowRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 39x156 but expected 0x0
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3788.591);
      doubleArray0[1] = 13.0;
      doubleArray0[2] = (-1249.393941);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrixChangingVisitor realMatrixChangingVisitor0 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      RealMatrixChangingVisitor realMatrixChangingVisitor1 = mock(RealMatrixChangingVisitor.class, new ViolatedAssumptionAnswer());
      doReturn((-2286.794807496166)).when(realMatrixChangingVisitor1).end();
      doReturn(5683.0592362699, (-2594.243), 14.101419448852539).when(realMatrixChangingVisitor1).visit(anyInt() , anyInt() , anyDouble());
      array2DRowRealMatrix0.walkInOptimizedOrder(realMatrixChangingVisitor1);
      try { 
        array2DRowRealMatrix0.walkInRowOrder(realMatrixChangingVisitor0, 1, 1, (-2126), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (-2,126)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-87.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = 1461.90878951132;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-87.0);
      doubleArray2[1] = 1.0E-12;
      doubleArray2[2] = (-87.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.0E-12;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 2001.04;
      doubleArray3[5] = 1461.90878951132;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-87.0);
      doubleArray0[3] = doubleArray4;
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }
}

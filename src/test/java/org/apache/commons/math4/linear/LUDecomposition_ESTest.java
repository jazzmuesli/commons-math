/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:54:40 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.DecompositionSolver;
import org.apache.commons.math4.linear.LUDecomposition;
import org.apache.commons.math4.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LUDecomposition_ESTest extends LUDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0, 1.0E-11);
      lUDecomposition0.getSolver();
      // Undeclared exception!
      try { 
        lUDecomposition0.getL();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-496);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-496);
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) (-496);
      doubleArray2[3] = (double) (-496);
      doubleArray2[4] = (double) (-496);
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) (-496);
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0);
      lUDecomposition0.getP();
      lUDecomposition0.getU();
      lUDecomposition0.getP();
      lUDecomposition0.getSolver();
      lUDecomposition0.getPivot();
      lUDecomposition0.getL();
      lUDecomposition0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1068);
      doubleArray1[1] = (double) 3522;
      doubleArray1[2] = (double) 3522;
      doubleArray1[3] = (double) (-1068);
      doubleArray1[4] = (double) 3522;
      doubleArray1[5] = (double) (-1068);
      doubleArray1[6] = (double) (-1068);
      doubleArray1[7] = (double) 3522;
      doubleArray1[8] = (double) (-1068);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-1068);
      doubleArray2[1] = (double) 3522;
      doubleArray2[2] = (double) 3522;
      doubleArray2[3] = (double) 3522;
      doubleArray2[4] = (double) (-1068);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 3522;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.9489846229553223;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) (-1068);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) (-1068);
      doubleArray4[2] = (double) 3522;
      doubleArray4[3] = 0.9489846229553223;
      doubleArray4[4] = (double) (-1068);
      doubleArray4[5] = 0.9489846229553223;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.9489846229553223;
      doubleArray0[4] = doubleArray5;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3522).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 716;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3477).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, (-142.57));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3522).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(762).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-3439)).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-684)).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition((RealMatrix) null, 138.2072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, (-555.47353));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-496);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-496);
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) (-496);
      doubleArray2[3] = (double) (-496);
      doubleArray2[4] = (double) (-496);
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) (-496);
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertNotNull(lUDecomposition0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)lUDecomposition0.getP();
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)lUDecomposition0.getU();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertTrue(array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      DecompositionSolver decompositionSolver0 = lUDecomposition0.getSolver();
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertTrue(decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
      
      int[] intArray0 = lUDecomposition0.getPivot();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)lUDecomposition0.getL();
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertFalse(array2DRowRealMatrix2.isTransposable());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertTrue(array2DRowRealMatrix2.isSquare());
      assertNotNull(array2DRowRealMatrix2);
      
      double double0 = lUDecomposition0.getDeterminant();
      assertEquals((-496.0), double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-496.0), lUDecomposition0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0, 1676.995660639237);
      assertEquals(1.0, lUDecomposition0.getDeterminant(), 0.01);
      assertNotNull(lUDecomposition0);
      
      // Undeclared exception!
      try { 
        lUDecomposition0.getP();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-365)).when(realMatrix0).getColumnDimension();
      doReturn((-365)).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (-365x-365) matrix
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2034).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0, 1.0E-11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      LUDecomposition lUDecomposition0 = null;
      try {
        lUDecomposition0 = new LUDecomposition(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.LUDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      LUDecomposition lUDecomposition0 = new LUDecomposition(realMatrix0, Double.NaN);
      // Undeclared exception!
      try { 
        lUDecomposition0.getU();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }
}

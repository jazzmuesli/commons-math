/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:28:03 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.JacobiPreconditioner;
import org.apache.commons.math4.linear.RealLinearOperator;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JacobiPreconditioner_ESTest extends JacobiPreconditioner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getRowDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      int int0 = jacobiPreconditioner0.getColumnDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, false);
      JacobiPreconditioner jacobiPreconditioner1 = JacobiPreconditioner.create(jacobiPreconditioner0);
      assertNotSame(jacobiPreconditioner0, jacobiPreconditioner1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      double[] doubleArray1 = new double[7];
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(realVector0).toArray();
      // Undeclared exception!
      try { 
        jacobiPreconditioner0.operate(realVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      // Undeclared exception!
      try { 
        jacobiPreconditioner0.operate((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        JacobiPreconditioner.create((RealLinearOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.JacobiPreconditioner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JacobiPreconditioner jacobiPreconditioner0 = null;
      try {
        jacobiPreconditioner0 = new JacobiPreconditioner((double[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realVector0).toArray();
      RealVector realVector1 = jacobiPreconditioner0.operate(realVector0);
      assertEquals(0, realVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      int int0 = jacobiPreconditioner0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      JacobiPreconditioner jacobiPreconditioner0 = new JacobiPreconditioner(doubleArray0, true);
      RealLinearOperator realLinearOperator0 = jacobiPreconditioner0.sqrt();
      JacobiPreconditioner jacobiPreconditioner1 = JacobiPreconditioner.create(realLinearOperator0);
      assertEquals(1, jacobiPreconditioner1.getColumnDimension());
  }
}

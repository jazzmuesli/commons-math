/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:50:51 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.SchurTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SchurTransformer_ESTest extends SchurTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1519;
      doubleArray1[1] = (double) 297;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.SchurTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn((-148)).when(realMatrix0).getRowDimension();
      doReturn(true, false).when(realMatrix0).isSquare();
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (-148x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(1, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)schurTransformer0.getP();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 297;
      doubleArray1[1] = (double) 297;
      doubleArray0[1] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 297;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(2, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)schurTransformer0.getT();
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertEquals(2, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)schurTransformer0.getT();
      assertNotNull(array2DRowRealMatrix1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertTrue(array2DRowRealMatrix1.isSquare());
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      assertNotNull(schurTransformer0);
      assertEquals(2, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)schurTransformer0.getPT();
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(array2DRowRealMatrix0.isTransposable());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertTrue(array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, doubleArray0.length);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)schurTransformer0.getPT();
      assertNotNull(array2DRowRealMatrix1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(2, array2DRowRealMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix1.isTransposable());
      assertEquals(2, array2DRowRealMatrix1.getRowDimension());
      assertTrue(array2DRowRealMatrix1.isSquare());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(297).when(realMatrix0).getRowDimension();
      doReturn(true, true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      SchurTransformer schurTransformer0 = new SchurTransformer(realMatrix0);
      RealMatrix realMatrix1 = schurTransformer0.getPT();
      assertNotNull(realMatrix1);
      
      RealMatrix realMatrix2 = schurTransformer0.getP();
      assertFalse(realMatrix2.equals((Object)realMatrix1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      SchurTransformer schurTransformer0 = null;
      try {
        schurTransformer0 = new SchurTransformer(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.SchurTransformer", e);
      }
  }
}

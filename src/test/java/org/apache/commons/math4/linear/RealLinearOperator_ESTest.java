/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:18:35 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.linear.HilbertMatrix;
import org.apache.commons.math4.linear.OpenMapRealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RealLinearOperator_ESTest extends RealLinearOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix(0);
      int int0 = hilbertMatrix0.getRowDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(28, 28);
      int int0 = openMapRealMatrix0.getRowDimension();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix((-2522));
      int int0 = hilbertMatrix0.getRowDimension();
      assertEquals((-2522), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix(0);
      int int0 = hilbertMatrix0.getColumnDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(19, 19);
      int int0 = openMapRealMatrix0.getColumnDimension();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(4, 4);
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix((-1438));
      RealVector realVector0 = openMapRealMatrix0.getRowVector(0);
      try { 
        hilbertMatrix0.operate(realVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != -1,438
         //
         verifyException("org.apache.commons.math4.linear.HilbertMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix((-95));
      // Undeclared exception!
      try { 
        hilbertMatrix0.operate((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.HilbertMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HilbertMatrix hilbertMatrix0 = new HilbertMatrix((-95));
      try { 
        hilbertMatrix0.operateTranspose((RealVector) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.RealLinearOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(593, 593);
      boolean boolean0 = blockRealMatrix0.isTransposable();
      assertFalse(boolean0);
  }
}

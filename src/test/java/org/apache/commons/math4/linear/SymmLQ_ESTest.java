/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:49:19 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.RealLinearOperator;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.linear.SymmLQ;
import org.apache.commons.math4.util.IterationManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SymmLQ_ESTest extends SymmLQ_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(0, 0, false);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realLinearOperator0).getColumnDimension();
      RealLinearOperator realLinearOperator1 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solve(realLinearOperator0, realLinearOperator1, (RealVector) null, true, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn(314).when(realLinearOperator0).getColumnDimension();
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-748.1021229), true);
      try { 
        symmLQ0.solve(realLinearOperator0, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-1383), (-1383), false);
      boolean boolean0 = symmLQ0.getCheck();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-2062.587912), true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solveInPlace(realLinearOperator0, realLinearOperator0, (RealVector) null, (RealVector) null, false, 0.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.1, true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-393)).when(realLinearOperator0).getColumnDimension();
      // Undeclared exception!
      try { 
        symmLQ0.solve(realLinearOperator0, (RealVector) null, false, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-1232), (-1232), true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-1232)).when(realLinearOperator0).getColumnDimension();
      // Undeclared exception!
      try { 
        symmLQ0.solve(realLinearOperator0, (RealVector) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ(498, 498, true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2553)).when(realLinearOperator0).getColumnDimension();
      // Undeclared exception!
      try { 
        symmLQ0.solve(realLinearOperator0, realLinearOperator0, (RealVector) null, false, (-335.8927683612004));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-837), (-1124.347656624), true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-837)).when(realLinearOperator0).getColumnDimension();
      // Undeclared exception!
      try { 
        symmLQ0.solve(realLinearOperator0, realLinearOperator0, (RealVector) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymmLQ symmLQ0 = null;
      try {
        symmLQ0 = new SymmLQ((IterationManager) null, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 2111.697518, true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realLinearOperator0).getColumnDimension();
      RealLinearOperator realLinearOperator1 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solve(realLinearOperator0, realLinearOperator1, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 44.71029198167993, true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realLinearOperator0).getColumnDimension();
      try { 
        symmLQ0.solve(realLinearOperator0, (RealVector) null, true, 44.71029198167993);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 3375.151044474, true);
      try { 
        symmLQ0.solveInPlace((RealLinearOperator) null, (RealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-2235.4), false);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solve(realLinearOperator0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, 0.0, true);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      RealLinearOperator realLinearOperator1 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solveInPlace(realLinearOperator1, realLinearOperator0, (RealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SymmLQ symmLQ0 = new SymmLQ((-850), 0.0, true);
      boolean boolean0 = symmLQ0.getCheck();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IterationManager iterationManager0 = mock(IterationManager.class, new ViolatedAssumptionAnswer());
      SymmLQ symmLQ0 = new SymmLQ(iterationManager0, (-1944.16), false);
      RealLinearOperator realLinearOperator0 = mock(RealLinearOperator.class, new ViolatedAssumptionAnswer());
      try { 
        symmLQ0.solve(realLinearOperator0, (RealLinearOperator) null, (RealVector) null, (RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }
}

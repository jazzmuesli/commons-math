/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:15:52 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.QRDecomposition;
import org.apache.commons.math4.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class QRDecomposition_ESTest extends QRDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getR();
      qRDecomposition0.getH();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 4962;
      doubleArray1[2] = 4962.0;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = (double) 4962;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(4962).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getR();
      // Undeclared exception!
      try { 
        qRDecomposition0.getQ();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4962;
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getR();
      // Undeclared exception!
      try { 
        qRDecomposition0.getQT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2420;
      doubleArray2[1] = (double) 2420;
      doubleArray2[2] = (double) 2420;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2420;
      doubleArray2[6] = (double) 2420;
      doubleArray2[7] = (double) 2420;
      doubleArray2[8] = (double) 2420;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2420).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1);
      // Undeclared exception!
      try { 
        qRDecomposition0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      // Undeclared exception!
      try { 
        qRDecomposition0.performHouseholderReflection(2616, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2616
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray1[3] = (double) 2616;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getSolver();
      qRDecomposition0.getR();
      qRDecomposition0.getR();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      // Undeclared exception!
      try { 
        qRDecomposition0.getQT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 80;
      doubleArray1[1] = (double) 4655;
      doubleArray1[2] = (double) 2554;
      doubleArray1[3] = (double) 80;
      doubleArray1[4] = (double) 80;
      doubleArray1[5] = (double) 4655;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4655;
      doubleArray2[1] = (double) 4655;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 80;
      doubleArray4[1] = (double) 2554;
      doubleArray0[3] = doubleArray4;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(80).when(realMatrix1).getColumnDimension();
      doReturn(4655).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2420;
      doubleArray2[1] = (double) 2420;
      doubleArray2[2] = (double) 2420;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2420;
      doubleArray2[6] = (double) 2420;
      doubleArray2[7] = (double) 2420;
      doubleArray2[8] = (double) 2420;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2420).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1);
      qRDecomposition0.decompose(doubleArray0);
      // Undeclared exception!
      try { 
        qRDecomposition0.getQT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2420;
      doubleArray2[1] = (double) 2420;
      doubleArray2[2] = (double) 2420;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2420;
      doubleArray2[6] = (double) 2420;
      doubleArray2[7] = (double) 2420;
      doubleArray2[8] = (double) 2420;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2420).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1);
      // Undeclared exception!
      try { 
        qRDecomposition0.getR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      // Undeclared exception!
      try { 
        qRDecomposition0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2420;
      doubleArray2[1] = (double) 2420;
      doubleArray2[2] = (double) 2420;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2420;
      doubleArray2[6] = (double) 2420;
      doubleArray2[7] = (double) 2420;
      doubleArray2[8] = (double) 2420;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2420).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1);
      // Undeclared exception!
      try { 
        qRDecomposition0.getQT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (double) 46;
      doubleArray1[2] = (double) 46;
      doubleArray1[3] = (double) 46;
      doubleArray1[4] = (double) 46;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(realMatrix1).getColumnDimension();
      doReturn(46).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getR();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(realMatrix1).getColumnDimension();
      doReturn((-3)).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      double double0 = 0.0;
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-418)).when(realMatrix1).getColumnDimension();
      doReturn((-592)).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix1).getColumnDimension();
      doReturn(0).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn((RealMatrix) null).when(realMatrix0).transpose();
      double double0 = 2073.89931965;
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix0, 2073.89931965);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn((RealMatrix) null).when(realMatrix0).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getSolver();
      qRDecomposition0.getR();
      // Undeclared exception!
      try { 
        qRDecomposition0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 4962;
      doubleArray1[2] = 4962.0;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = (double) 4962;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(4962).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getSolver();
      qRDecomposition0.getR();
      // Undeclared exception!
      try { 
        qRDecomposition0.getQ();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4962;
      doubleArray1[1] = (double) 2616;
      doubleArray1[2] = 4033.8098422697353;
      doubleArray1[3] = (double) 4962;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 4962;
      doubleArray2[1] = 4033.8098422697353;
      doubleArray0[1] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(4962).when(realMatrix1).getColumnDimension();
      doReturn(2616).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
      qRDecomposition0.getR();
      qRDecomposition0.getR();
      qRDecomposition0.getSolver();
      qRDecomposition0.getH();
      qRDecomposition0.decompose(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-3814)).when(realMatrix1).getColumnDimension();
      doReturn((-722)).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((double[][]) null).when(realMatrix0).getData();
      RealMatrix realMatrix1 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-3814)).when(realMatrix1).getColumnDimension();
      doReturn((-718)).when(realMatrix1).getRowDimension();
      doReturn(realMatrix0).when(realMatrix1).transpose();
      QRDecomposition qRDecomposition0 = null;
      try {
        qRDecomposition0 = new QRDecomposition(realMatrix1, (-3814));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.QRDecomposition", e);
      }
  }
}

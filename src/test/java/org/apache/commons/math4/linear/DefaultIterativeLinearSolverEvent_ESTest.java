/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:34:45 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.DefaultIterativeLinearSolverEvent;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultIterativeLinearSolverEvent_ESTest extends DefaultIterativeLinearSolverEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("/", 31, (RealVector) null, (RealVector) null, (RealVector) null, 31);
      defaultIterativeLinearSolverEvent0.getSolution();
      assertEquals(31.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("p{Cm&]\"N", (-2372), (RealVector) null, (RealVector) null, (RealVector) null, 1.0);
      defaultIterativeLinearSolverEvent0.getRightHandSideVector();
      assertEquals(1.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("", 1, realVector0, realVector0, 1);
      double double0 = defaultIterativeLinearSolverEvent0.getNormOfResidual();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("*@", (-124), (RealVector) null, (RealVector) null, (-124));
      double double0 = defaultIterativeLinearSolverEvent0.getNormOfResidual();
      assertEquals((-124.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = null;
      try {
        defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent((Object) null, 1, (RealVector) null, (RealVector) null, (RealVector) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = null;
      try {
        defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent((Object) null, 2, realVector0, realVector0, 731.5556147881);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("", 31, realVector0, realVector0, realVector0, 0.0);
      boolean boolean0 = defaultIterativeLinearSolverEvent0.providesResidual();
      assertEquals(0.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("&kh/i ", 1488, realVector0, realVector0, 1488);
      boolean boolean0 = defaultIterativeLinearSolverEvent0.providesResidual();
      assertFalse(boolean0);
      assertEquals(1488.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(realVector0).toString();
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("", 31, realVector0, realVector0, realVector0, 0.0);
      defaultIterativeLinearSolverEvent0.getResidual();
      assertEquals(0.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("", 31, realVector0, realVector0, realVector0, 0.0);
      double double0 = defaultIterativeLinearSolverEvent0.getNormOfResidual();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn("fvrE#hpk%^qkw(S+").when(realVector0).toString();
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("OtIqFyeJ(4)Gvz[A9oU", 0, realVector0, realVector0, 0);
      defaultIterativeLinearSolverEvent0.getSolution();
      assertEquals(0.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      doReturn("").when(realVector0).toString();
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("", 31, realVector0, realVector0, realVector0, 0.0);
      defaultIterativeLinearSolverEvent0.getRightHandSideVector();
      assertEquals(0.0, defaultIterativeLinearSolverEvent0.getNormOfResidual(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealVector realVector0 = mock(RealVector.class, new ViolatedAssumptionAnswer());
      DefaultIterativeLinearSolverEvent defaultIterativeLinearSolverEvent0 = new DefaultIterativeLinearSolverEvent("&kh/i ", 1488, realVector0, realVector0, 1488);
      // Undeclared exception!
      try { 
        defaultIterativeLinearSolverEvent0.getResidual();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupported operation
         //
         verifyException("org.apache.commons.math4.linear.DefaultIterativeLinearSolverEvent", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:16:48 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.HessenbergTransformer;
import org.apache.commons.math4.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HessenbergTransformer_ESTest extends HessenbergTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[5];
      doubleArray0[2] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getP();
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getPT();
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3630;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 3630;
      doubleArray1[3] = (double) 3630;
      doubleArray1[4] = (double) 3630;
      doubleArray1[5] = (double) 3630;
      doubleArray1[6] = (double) 3630;
      doubleArray1[7] = (double) 3630;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getH();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3630;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 3630;
      doubleArray1[3] = (double) 3630;
      doubleArray1[4] = (double) 3630;
      doubleArray1[5] = (double) 3630;
      doubleArray1[6] = (double) 3630;
      doubleArray1[7] = (double) 3630;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getH();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3630;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 3630;
      doubleArray1[3] = (double) 3630;
      doubleArray1[4] = (double) 3630;
      doubleArray1[5] = (double) 3630;
      doubleArray1[6] = (double) 3630;
      doubleArray1[7] = (double) 3630;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[2] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-742);
      doubleArray1[1] = (double) (-742);
      doubleArray1[2] = (double) 334;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(334).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 2;
      doubleArray4[4] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 2;
      doubleArray6[1] = (double) 2;
      doubleArray0[5] = doubleArray6;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3630;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 3630;
      doubleArray1[3] = (double) 3630;
      doubleArray1[4] = (double) 3630;
      doubleArray1[5] = (double) 3630;
      doubleArray1[6] = (double) 3630;
      doubleArray1[7] = (double) 3630;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(334).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getP();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 334;
      doubleArray1[1] = (double) (-742);
      doubleArray1[2] = (double) (-742);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 334;
      doubleArray2[1] = (double) 334;
      doubleArray2[2] = (double) (-742);
      doubleArray2[3] = (double) (-742);
      doubleArray2[4] = (double) (-742);
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(334).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getH();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getH();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getHouseholderVectorsRef();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      RealMatrix realMatrix1 = hessenbergTransformer0.getPT();
      assertEquals(2, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(549).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getPT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 133;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 133;
      doubleArray2[1] = (double) 133;
      doubleArray2[2] = (double) 133;
      doubleArray2[3] = (double) 133;
      doubleArray2[4] = (double) 133;
      doubleArray2[5] = (double) 133;
      doubleArray2[6] = (double) 133;
      doubleArray0[1] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(133).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1819)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      doubleArray0[2] = doubleArray0[1];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      // Undeclared exception!
      try { 
        hessenbergTransformer0.getH();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3630;
      doubleArray1[1] = (double) 3630;
      doubleArray1[2] = (double) 3630;
      doubleArray1[3] = (double) 3630;
      doubleArray1[4] = (double) 3630;
      doubleArray1[5] = (double) 3630;
      doubleArray1[6] = (double) 3630;
      doubleArray1[7] = (double) 3630;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getH();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getP();
      hessenbergTransformer0.getPT();
      hessenbergTransformer0.getHouseholderVectorsRef();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      doubleArray0[2] = doubleArray2;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3630).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      HessenbergTransformer hessenbergTransformer0 = null;
      try {
        hessenbergTransformer0 = new HessenbergTransformer(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.HessenbergTransformer", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:01:54 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.CholeskyDecomposition;
import org.apache.commons.math4.linear.DecompositionSolver;
import org.apache.commons.math4.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CholeskyDecomposition_ESTest extends CholeskyDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 743.430436602457;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2753)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getLT();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getL();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-4207)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getLT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getLT();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1505)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getLT();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getLT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2125)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, 2665.741627522322, 0.0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getL();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2385)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getL();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2385)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2753)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getDeterminant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 268;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(268).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non symmetric matrix: the difference between entries at (0,1) and (1,0) is larger than 0
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition((RealMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(3062).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-2125)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, 2665.741627522322, 0.0);
      // Undeclared exception!
      try { 
        choleskyDecomposition0.getL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1505)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getDeterminant();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getLT();
      choleskyDecomposition0.getLT();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      choleskyDecomposition0.getL();
      choleskyDecomposition0.getL();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) 217;
      doubleArray0[0] = doubleArray1;
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(217).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, 0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non symmetric matrix: the difference between entries at (0,1) and (1,0) is larger than 0
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(217).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, 0.0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(329).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn((double[][]) null).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, (-2709.7495528), (-2709.7495528));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realMatrix0).getColumnDimension();
      doReturn(0).when(realMatrix0).getRowDimension();
      doReturn(false).when(realMatrix0).isSquare();
      CholeskyDecomposition choleskyDecomposition0 = null;
      try {
        choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0, 1608, 1608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (0x0) matrix
         //
         verifyException("org.apache.commons.math4.linear.CholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      RealMatrix realMatrix0 = mock(RealMatrix.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(realMatrix0).getRowDimension();
      doReturn(true).when(realMatrix0).isSquare();
      doReturn(doubleArray0).when(realMatrix0).getData();
      CholeskyDecomposition choleskyDecomposition0 = new CholeskyDecomposition(realMatrix0);
      DecompositionSolver decompositionSolver0 = choleskyDecomposition0.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
  }
}

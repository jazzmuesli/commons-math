/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:10:53 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.analysis.QuinticFunction;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.linear.AbstractFieldMatrix;
import org.apache.commons.math4.linear.BlockFieldMatrix;
import org.apache.commons.math4.linear.DefaultFieldMatrixChangingVisitor;
import org.apache.commons.math4.linear.DefaultFieldMatrixPreservingVisitor;
import org.apache.commons.math4.linear.FieldMatrix;
import org.apache.commons.math4.linear.FieldMatrixChangingVisitor;
import org.apache.commons.math4.linear.FieldMatrixPreservingVisitor;
import org.apache.commons.math4.util.BigReal;
import org.apache.commons.math4.util.BigRealField;
import org.apache.commons.math4.util.Decimal64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BlockFieldMatrix_ESTest extends BlockFieldMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-9);
      byte byte0 = (byte) (-30);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.longValueExact();
      BigReal bigReal0 = new BigReal(bigInteger0, 3752);
      Field<BigReal> field0 = bigReal0.getField();
      BigReal bigReal1 = bigReal0.reciprocal();
      bigReal0.subtract(bigReal1);
      BlockFieldMatrix.createBlocksLayout(field0, 92, (int) 83);
      DerivativeStructure[][] derivativeStructureArray0 = new DerivativeStructure[1][1];
      DerivativeStructure[] derivativeStructureArray1 = new DerivativeStructure[1];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 92;
      doubleArray0[1] = (double) (byte) (-9);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)34;
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, (byte)83, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = 5;
      // Undeclared exception!
      try { 
        BlockFieldMatrix.createBlocksLayout((Field<BigReal>) null, 0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-1);
      int int1 = 938;
      DerivativeStructure[][] derivativeStructureArrayArray0 = null;
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<DerivativeStructure>((-1), 938, (DerivativeStructure[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DerivativeStructure[][] derivativeStructureArray0 = new DerivativeStructure[0][7];
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<DerivativeStructure>(derivativeStructureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math4.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<DerivativeStructure>((DerivativeStructure[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dfp[][] dfpArray0 = new Dfp[9][5];
      Dfp[] dfpArray1 = new Dfp[0];
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[0];
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[0];
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[0];
      dfpArray0[3] = dfpArray4;
      Dfp[] dfpArray5 = new Dfp[9];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray5[0] = dfp0;
      dfpArray5[1] = dfp0;
      dfpArray5[2] = dfp0;
      dfpArray5[3] = dfp0;
      dfpArray5[4] = dfp0;
      dfpArray5[5] = dfp0;
      dfpArray5[6] = dfp0;
      dfpArray5[7] = dfp0;
      dfpArray5[8] = dfp0;
      dfpArray0[4] = dfpArray5;
      Dfp[] dfpArray6 = new Dfp[7];
      dfpArray6[0] = dfp0;
      dfpArray6[1] = dfp0;
      dfpArray6[2] = dfp0;
      dfpArray6[3] = dfp0;
      dfpArray6[4] = dfp0;
      dfpArray6[5] = dfp0;
      dfpArray6[6] = dfp0;
      dfpArray0[5] = dfpArray6;
      Dfp[] dfpArray7 = new Dfp[2];
      dfpArray7[0] = dfp0;
      dfpArray7[1] = dfp0;
      dfpArray0[6] = dfpArray7;
      Dfp[] dfpArray8 = new Dfp[8];
      dfpArray8[0] = dfp0;
      dfpArray8[1] = dfp0;
      dfpArray8[2] = dfp0;
      dfpArray8[3] = dfp0;
      dfpArray8[4] = dfp0;
      dfpArray8[5] = dfp0;
      dfpArray8[6] = dfp0;
      dfpArray8[7] = dfp0;
      dfpArray0[7] = dfpArray8;
      Dfp[] dfpArray9 = new Dfp[5];
      dfpArray9[0] = dfp0;
      dfpArray9[1] = dfp0;
      dfpArray9[2] = dfp0;
      dfpArray9[3] = dfp0;
      dfpArray9[4] = dfp0;
      dfpArray0[8] = dfpArray9;
      BlockFieldMatrix<Dfp> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Dfp>((-2260), 3, dfpArray0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dfp[][] dfpArray0 = new Dfp[6][7];
      Dfp[] dfpArray1 = new Dfp[5];
      Dfp dfp0 = mock(Dfp.class, new ViolatedAssumptionAnswer());
      dfpArray1[0] = dfp0;
      dfpArray1[1] = dfp0;
      dfpArray1[2] = dfp0;
      dfpArray1[3] = dfp0;
      dfpArray1[4] = dfp0;
      dfpArray0[0] = dfpArray1;
      Dfp[] dfpArray2 = new Dfp[8];
      dfpArray2[0] = dfp0;
      dfpArray2[1] = dfp0;
      dfpArray2[2] = dfp0;
      dfpArray2[3] = dfp0;
      dfpArray2[4] = dfp0;
      dfpArray2[5] = dfp0;
      dfpArray2[6] = dfp0;
      dfpArray2[7] = dfp0;
      dfpArray0[1] = dfpArray2;
      Dfp[] dfpArray3 = new Dfp[6];
      dfpArray3[0] = dfp0;
      dfpArray3[1] = dfp0;
      dfpArray3[2] = dfp0;
      dfpArray3[3] = dfp0;
      dfpArray3[4] = dfp0;
      dfpArray3[5] = dfp0;
      dfpArray0[2] = dfpArray3;
      Dfp[] dfpArray4 = new Dfp[3];
      dfpArray4[0] = dfp0;
      dfpArray4[1] = dfp0;
      dfpArray4[2] = dfp0;
      dfpArray0[3] = dfpArray4;
      Dfp[] dfpArray5 = new Dfp[5];
      dfpArray5[0] = dfp0;
      dfpArray5[1] = dfp0;
      dfpArray5[2] = dfp0;
      dfpArray5[3] = dfp0;
      dfpArray5[4] = dfp0;
      dfpArray0[4] = dfpArray5;
      Dfp[] dfpArray6 = new Dfp[7];
      dfpArray6[0] = dfp0;
      dfpArray6[1] = dfp0;
      dfpArray6[2] = dfp0;
      dfpArray6[3] = dfp0;
      dfpArray6[4] = dfp0;
      dfpArray6[5] = dfp0;
      dfpArray6[6] = dfp0;
      dfpArray0[5] = dfpArray6;
      try { 
        BlockFieldMatrix.toBlocksLayout(dfpArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math4.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigReal[][] bigRealArray0 = new BigReal[7][4];
      BigReal[] bigRealArray1 = new BigReal[2];
      BigReal bigReal0 = mock(BigReal.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(bigReal0).getField();
      bigRealArray1[0] = bigReal0;
      bigRealArray1[1] = bigReal0;
      bigRealArray0[0] = bigRealArray1;
      BigReal[] bigRealArray2 = new BigReal[8];
      bigRealArray2[0] = bigReal0;
      bigRealArray2[1] = bigReal0;
      bigRealArray2[2] = bigReal0;
      bigRealArray2[3] = bigReal0;
      bigRealArray2[4] = bigReal0;
      bigRealArray2[5] = bigReal0;
      bigRealArray2[6] = bigReal0;
      bigRealArray2[7] = bigReal0;
      bigRealArray0[1] = bigRealArray2;
      BigReal[] bigRealArray3 = new BigReal[1];
      bigRealArray3[0] = bigReal0;
      bigRealArray0[2] = bigRealArray3;
      BigReal[] bigRealArray4 = new BigReal[4];
      bigRealArray4[0] = bigReal0;
      bigRealArray4[1] = bigReal0;
      bigRealArray4[2] = bigReal0;
      bigRealArray4[3] = bigReal0;
      bigRealArray0[3] = bigRealArray4;
      BigReal[] bigRealArray5 = new BigReal[9];
      bigRealArray5[0] = bigReal0;
      bigRealArray5[1] = bigReal0;
      bigRealArray5[2] = bigReal0;
      bigRealArray5[3] = bigReal0;
      bigRealArray5[4] = bigReal0;
      bigRealArray5[5] = bigReal0;
      bigRealArray5[6] = bigReal0;
      bigRealArray5[7] = bigReal0;
      bigRealArray5[8] = bigReal0;
      bigRealArray0[4] = bigRealArray5;
      BigReal[] bigRealArray6 = new BigReal[6];
      bigRealArray6[0] = bigReal0;
      bigRealArray6[1] = bigReal0;
      bigRealArray6[2] = bigReal0;
      bigRealArray6[3] = bigReal0;
      bigRealArray6[4] = bigReal0;
      bigRealArray6[5] = bigReal0;
      bigRealArray0[5] = bigRealArray6;
      BigReal[] bigRealArray7 = new BigReal[8];
      bigRealArray7[0] = bigReal0;
      bigRealArray7[1] = bigReal0;
      bigRealArray7[2] = bigReal0;
      bigRealArray7[3] = bigReal0;
      bigRealArray7[4] = bigReal0;
      bigRealArray7[5] = bigReal0;
      bigRealArray7[6] = bigReal0;
      bigRealArray7[7] = bigReal0;
      bigRealArray0[6] = bigRealArray7;
      BlockFieldMatrix<BigReal> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<BigReal>(166, 166, bigRealArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigReal[][] bigRealArray0 = new BigReal[6][0];
      BigReal[] bigRealArray1 = new BigReal[7];
      BigReal bigReal0 = mock(BigReal.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(bigReal0).getField();
      bigRealArray1[0] = bigReal0;
      bigRealArray1[1] = bigReal0;
      bigRealArray1[2] = bigReal0;
      bigRealArray1[3] = bigReal0;
      bigRealArray1[4] = bigReal0;
      bigRealArray1[5] = bigReal0;
      bigRealArray1[6] = bigReal0;
      bigRealArray0[0] = bigRealArray1;
      BigReal[] bigRealArray2 = new BigReal[9];
      bigRealArray2[0] = bigReal0;
      bigRealArray2[1] = bigReal0;
      bigRealArray2[2] = bigReal0;
      bigRealArray2[3] = bigReal0;
      bigRealArray2[4] = bigReal0;
      bigRealArray2[5] = bigReal0;
      bigRealArray2[6] = bigReal0;
      bigRealArray2[7] = bigReal0;
      bigRealArray2[8] = bigReal0;
      bigRealArray0[1] = bigRealArray2;
      BigReal[] bigRealArray3 = new BigReal[5];
      bigRealArray3[0] = bigReal0;
      bigRealArray3[1] = bigReal0;
      bigRealArray3[2] = bigReal0;
      bigRealArray3[3] = bigReal0;
      bigRealArray3[4] = bigReal0;
      bigRealArray0[2] = bigRealArray3;
      BigReal[] bigRealArray4 = new BigReal[8];
      bigRealArray4[0] = bigReal0;
      bigRealArray4[1] = bigReal0;
      bigRealArray4[2] = bigReal0;
      bigRealArray4[3] = bigReal0;
      bigRealArray4[4] = bigReal0;
      bigRealArray4[5] = bigReal0;
      bigRealArray4[6] = bigReal0;
      bigRealArray4[7] = bigReal0;
      bigRealArray0[3] = bigRealArray4;
      BigReal[] bigRealArray5 = new BigReal[5];
      bigRealArray5[0] = bigReal0;
      bigRealArray5[1] = bigReal0;
      bigRealArray5[2] = bigReal0;
      bigRealArray5[3] = bigReal0;
      bigRealArray5[4] = bigReal0;
      bigRealArray0[4] = bigRealArray5;
      BigReal[] bigRealArray6 = new BigReal[0];
      bigRealArray0[5] = bigRealArray6;
      BlockFieldMatrix<BigReal> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<BigReal>(148, (-1397), bigRealArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimension (-1,397)
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DerivativeStructure[][] derivativeStructureArray0 = new DerivativeStructure[8][4];
      DerivativeStructure[] derivativeStructureArray1 = new DerivativeStructure[2];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(313, 0, 313);
      DerivativeStructure derivativeStructure1 = DerivativeStructure.pow(0.0, derivativeStructure0);
      DerivativeStructure derivativeStructure2 = derivativeStructure1.floor();
      DerivativeStructure derivativeStructure3 = derivativeStructure2.cos();
      DerivativeStructure derivativeStructure4 = derivativeStructure3.remainder(derivativeStructure0);
      DerivativeStructure derivativeStructure5 = derivativeStructure4.subtract(1470.0598253474295);
      derivativeStructureArray1[0] = derivativeStructure5;
      DerivativeStructure derivativeStructure6 = derivativeStructure5.asin();
      derivativeStructureArray1[1] = derivativeStructure6;
      derivativeStructureArray0[0] = derivativeStructureArray1;
      DerivativeStructure[] derivativeStructureArray2 = new DerivativeStructure[0];
      derivativeStructureArray0[1] = derivativeStructureArray2;
      DerivativeStructure[] derivativeStructureArray3 = new DerivativeStructure[2];
      derivativeStructureArray3[0] = derivativeStructure2;
      derivativeStructureArray3[1] = derivativeStructure0;
      derivativeStructureArray0[2] = derivativeStructureArray3;
      DerivativeStructure[] derivativeStructureArray4 = new DerivativeStructure[8];
      derivativeStructureArray4[0] = derivativeStructure0;
      derivativeStructureArray4[1] = derivativeStructure3;
      derivativeStructureArray4[2] = derivativeStructure5;
      derivativeStructureArray4[3] = derivativeStructure2;
      derivativeStructureArray4[4] = derivativeStructure4;
      derivativeStructureArray4[5] = derivativeStructure6;
      derivativeStructureArray4[6] = derivativeStructure6;
      derivativeStructureArray4[7] = derivativeStructure6;
      derivativeStructureArray0[3] = derivativeStructureArray4;
      DerivativeStructure[] derivativeStructureArray5 = new DerivativeStructure[0];
      derivativeStructureArray0[4] = derivativeStructureArray5;
      DerivativeStructure[] derivativeStructureArray6 = new DerivativeStructure[7];
      derivativeStructureArray6[0] = derivativeStructure2;
      derivativeStructureArray6[1] = derivativeStructure6;
      derivativeStructureArray6[2] = derivativeStructure5;
      derivativeStructureArray6[3] = derivativeStructure4;
      derivativeStructureArray6[4] = derivativeStructure3;
      derivativeStructureArray6[5] = derivativeStructure4;
      derivativeStructureArray6[6] = derivativeStructure3;
      derivativeStructureArray0[5] = derivativeStructureArray6;
      DerivativeStructure[] derivativeStructureArray7 = new DerivativeStructure[3];
      derivativeStructureArray7[0] = derivativeStructure2;
      derivativeStructureArray7[1] = derivativeStructure4;
      derivativeStructureArray7[2] = derivativeStructure1;
      derivativeStructureArray0[6] = derivativeStructureArray7;
      DerivativeStructure[] derivativeStructureArray8 = new DerivativeStructure[0];
      derivativeStructureArray0[7] = derivativeStructureArray8;
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<DerivativeStructure>(313, 313, derivativeStructureArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2 != 1,296
         //
         verifyException("org.apache.commons.math4.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Decimal64[][] decimal64Array0 = new Decimal64[4][0];
      Decimal64[] decimal64Array1 = new Decimal64[6];
      Decimal64 decimal64_0 = new Decimal64(1995.10820447555);
      decimal64Array1[0] = decimal64_0;
      Decimal64 decimal64_1 = new Decimal64(0.0);
      decimal64Array1[1] = decimal64_1;
      Decimal64 decimal64_2 = new Decimal64(0.0);
      decimal64Array1[2] = decimal64_2;
      Decimal64 decimal64_3 = new Decimal64(1995.10820447555);
      decimal64Array1[3] = decimal64_3;
      Decimal64 decimal64_4 = new Decimal64(1723.24517056383);
      decimal64Array1[4] = decimal64_4;
      Decimal64 decimal64_5 = new Decimal64(0.0);
      decimal64Array1[5] = decimal64_5;
      decimal64Array0[0] = decimal64Array1;
      Decimal64[] decimal64Array2 = new Decimal64[4];
      decimal64Array2[0] = decimal64_5;
      decimal64Array2[1] = decimal64_0;
      decimal64Array2[2] = decimal64_1;
      decimal64Array2[3] = decimal64_0;
      decimal64Array0[1] = decimal64Array2;
      Decimal64[] decimal64Array3 = new Decimal64[0];
      decimal64Array0[2] = decimal64Array3;
      Decimal64[] decimal64Array4 = new Decimal64[5];
      decimal64Array4[0] = decimal64_1;
      decimal64Array4[1] = decimal64_1;
      decimal64Array4[2] = decimal64_2;
      decimal64Array4[3] = decimal64_3;
      decimal64Array4[4] = decimal64_4;
      decimal64Array0[3] = decimal64Array4;
      BlockFieldMatrix<Decimal64> blockFieldMatrix0 = null;
      try {
        blockFieldMatrix0 = new BlockFieldMatrix<Decimal64>(decimal64Array0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math4.linear.BlockFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DerivativeStructure[][] derivativeStructureArray0 = new DerivativeStructure[1][7];
      DerivativeStructure[] derivativeStructureArray1 = new DerivativeStructure[5];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertNotNull(derivativeStructure0);
      
      DerivativeStructure derivativeStructure1 = new DerivativeStructure((-356.841779), derivativeStructure0, 0, derivativeStructure0, 0, derivativeStructure0);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertNotNull(derivativeStructure1);
      
      DerivativeStructure derivativeStructure2 = derivativeStructure0.linearCombination(derivativeStructure1, derivativeStructure1, derivativeStructure1, derivativeStructure1);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertNotNull(derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      
      DerivativeStructure derivativeStructure3 = derivativeStructure2.floor();
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertNotNull(derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      
      DerivativeStructure derivativeStructure4 = derivativeStructure3.reciprocal();
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getValue(), 0.01);
      assertEquals(0, derivativeStructure4.getFreeParameters());
      assertEquals(0, derivativeStructure4.getOrder());
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getReal(), 0.01);
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure2));
      assertNotNull(derivativeStructure4);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure4, derivativeStructure3);
      assertNotSame(derivativeStructure4, derivativeStructure1);
      assertNotSame(derivativeStructure4, derivativeStructure0);
      assertNotSame(derivativeStructure4, derivativeStructure2);
      
      DerivativeStructure derivativeStructure5 = derivativeStructure4.acos();
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getValue(), 0.01);
      assertEquals(0, derivativeStructure4.getFreeParameters());
      assertEquals(0, derivativeStructure4.getOrder());
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getOrder());
      assertEquals(Double.NaN, derivativeStructure5.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure5.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getFreeParameters());
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure2));
      assertNotNull(derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure5);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure4, derivativeStructure5);
      assertNotSame(derivativeStructure4, derivativeStructure3);
      assertNotSame(derivativeStructure4, derivativeStructure1);
      assertNotSame(derivativeStructure4, derivativeStructure0);
      assertNotSame(derivativeStructure4, derivativeStructure2);
      assertNotSame(derivativeStructure5, derivativeStructure4);
      assertNotSame(derivativeStructure5, derivativeStructure3);
      assertNotSame(derivativeStructure5, derivativeStructure1);
      assertNotSame(derivativeStructure5, derivativeStructure0);
      assertNotSame(derivativeStructure5, derivativeStructure2);
      
      DerivativeStructure derivativeStructure6 = derivativeStructure5.copySign((double) 0);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getValue(), 0.01);
      assertEquals(0, derivativeStructure4.getFreeParameters());
      assertEquals(0, derivativeStructure4.getOrder());
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getOrder());
      assertEquals(Double.NaN, derivativeStructure5.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure5.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getFreeParameters());
      assertEquals(Double.NaN, derivativeStructure6.getValue(), 0.01);
      assertEquals(0, derivativeStructure6.getOrder());
      assertEquals(0, derivativeStructure6.getFreeParameters());
      assertEquals(Double.NaN, derivativeStructure6.getReal(), 0.01);
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure4));
      assertNotNull(derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure6);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure6);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure6);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure5);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure4, derivativeStructure6);
      assertNotSame(derivativeStructure4, derivativeStructure5);
      assertNotSame(derivativeStructure4, derivativeStructure3);
      assertNotSame(derivativeStructure4, derivativeStructure1);
      assertNotSame(derivativeStructure4, derivativeStructure0);
      assertNotSame(derivativeStructure4, derivativeStructure2);
      assertNotSame(derivativeStructure5, derivativeStructure4);
      assertNotSame(derivativeStructure5, derivativeStructure3);
      assertNotSame(derivativeStructure5, derivativeStructure1);
      assertNotSame(derivativeStructure5, derivativeStructure0);
      assertSame(derivativeStructure5, derivativeStructure6);
      assertNotSame(derivativeStructure5, derivativeStructure2);
      assertNotSame(derivativeStructure6, derivativeStructure3);
      assertSame(derivativeStructure6, derivativeStructure5);
      assertNotSame(derivativeStructure6, derivativeStructure1);
      assertNotSame(derivativeStructure6, derivativeStructure0);
      assertNotSame(derivativeStructure6, derivativeStructure2);
      assertNotSame(derivativeStructure6, derivativeStructure4);
      
      derivativeStructureArray1[0] = derivativeStructure6;
      DerivativeStructure derivativeStructure7 = derivativeStructure6.asin();
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getValue(), 0.01);
      assertEquals(0, derivativeStructure4.getFreeParameters());
      assertEquals(0, derivativeStructure4.getOrder());
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getOrder());
      assertEquals(Double.NaN, derivativeStructure5.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure5.getReal(), 0.01);
      assertEquals(0, derivativeStructure5.getFreeParameters());
      assertEquals(Double.NaN, derivativeStructure6.getValue(), 0.01);
      assertEquals(0, derivativeStructure6.getOrder());
      assertEquals(0, derivativeStructure6.getFreeParameters());
      assertEquals(Double.NaN, derivativeStructure6.getReal(), 0.01);
      assertEquals(Double.NaN, derivativeStructure7.getValue(), 0.01);
      assertEquals(Double.NaN, derivativeStructure7.getReal(), 0.01);
      assertEquals(0, derivativeStructure7.getFreeParameters());
      assertEquals(0, derivativeStructure7.getOrder());
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure6));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure5.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure6.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure7.equals((Object)derivativeStructure2));
      assertNotNull(derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure7);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure6);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure6);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure7);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure6);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure5);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure7);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure4, derivativeStructure6);
      assertNotSame(derivativeStructure4, derivativeStructure5);
      assertNotSame(derivativeStructure4, derivativeStructure3);
      assertNotSame(derivativeStructure4, derivativeStructure1);
      assertNotSame(derivativeStructure4, derivativeStructure7);
      assertNotSame(derivativeStructure4, derivativeStructure0);
      assertNotSame(derivativeStructure4, derivativeStructure2);
      assertNotSame(derivativeStructure5, derivativeStructure4);
      assertNotSame(derivativeStructure5, derivativeStructure3);
      assertNotSame(derivativeStructure5, derivativeStructure1);
      assertNotSame(derivativeStructure5, derivativeStructure7);
      assertNotSame(derivativeStructure5, derivativeStructure0);
      assertSame(derivativeStructure5, derivativeStructure6);
      assertNotSame(derivativeStructure5, derivativeStructure2);
      assertNotSame(derivativeStructure6, derivativeStructure3);
      assertSame(derivativeStructure6, derivativeStructure5);
      assertNotSame(derivativeStructure6, derivativeStructure1);
      assertNotSame(derivativeStructure6, derivativeStructure7);
      assertNotSame(derivativeStructure6, derivativeStructure0);
      assertNotSame(derivativeStructure6, derivativeStructure2);
      assertNotSame(derivativeStructure6, derivativeStructure4);
      assertNotSame(derivativeStructure7, derivativeStructure6);
      assertNotSame(derivativeStructure7, derivativeStructure4);
      assertNotSame(derivativeStructure7, derivativeStructure5);
      assertNotSame(derivativeStructure7, derivativeStructure3);
      assertNotSame(derivativeStructure7, derivativeStructure1);
      assertNotSame(derivativeStructure7, derivativeStructure0);
      assertNotSame(derivativeStructure7, derivativeStructure2);
      
      derivativeStructureArray1[1] = derivativeStructure7;
      DerivativeStructure derivativeStructure8 = derivativeStructure2.exp();
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure8.getOrder());
      assertEquals(0, derivativeStructure8.getFreeParameters());
      assertEquals(1.0, derivativeStructure8.getValue(), 0.01);
      assertEquals(1.0, derivativeStructure8.getReal(), 0.01);
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure6));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure2));
      assertNotNull(derivativeStructure8);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure8);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure7);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure6);
      assertNotSame(derivativeStructure1, derivativeStructure8);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure6);
      assertNotSame(derivativeStructure2, derivativeStructure8);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure7);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure8, derivativeStructure6);
      assertNotSame(derivativeStructure8, derivativeStructure5);
      assertNotSame(derivativeStructure8, derivativeStructure4);
      assertNotSame(derivativeStructure8, derivativeStructure3);
      assertNotSame(derivativeStructure8, derivativeStructure1);
      assertNotSame(derivativeStructure8, derivativeStructure7);
      assertNotSame(derivativeStructure8, derivativeStructure0);
      assertNotSame(derivativeStructure8, derivativeStructure2);
      
      derivativeStructureArray1[2] = derivativeStructure8;
      DerivativeStructure derivativeStructure9 = derivativeStructure3.subtract(derivativeStructure8);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(0, derivativeStructure8.getOrder());
      assertEquals(0, derivativeStructure8.getFreeParameters());
      assertEquals(1.0, derivativeStructure8.getValue(), 0.01);
      assertEquals(1.0, derivativeStructure8.getReal(), 0.01);
      assertEquals(0, derivativeStructure9.getFreeParameters());
      assertEquals(0, derivativeStructure9.getOrder());
      assertEquals((-1.0), derivativeStructure9.getReal(), 0.01);
      assertEquals((-1.0), derivativeStructure9.getValue(), 0.01);
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure8));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure7));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure8));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure8.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure9.equals((Object)derivativeStructure6));
      assertNotNull(derivativeStructure9);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure8);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure0, derivativeStructure9);
      assertNotSame(derivativeStructure1, derivativeStructure7);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure9);
      assertNotSame(derivativeStructure1, derivativeStructure6);
      assertNotSame(derivativeStructure1, derivativeStructure8);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure6);
      assertNotSame(derivativeStructure2, derivativeStructure8);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure9);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure7);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure6);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure9);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure5);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure7);
      assertNotSame(derivativeStructure3, derivativeStructure8);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure8, derivativeStructure6);
      assertNotSame(derivativeStructure8, derivativeStructure5);
      assertNotSame(derivativeStructure8, derivativeStructure4);
      assertNotSame(derivativeStructure8, derivativeStructure9);
      assertNotSame(derivativeStructure8, derivativeStructure3);
      assertNotSame(derivativeStructure8, derivativeStructure1);
      assertNotSame(derivativeStructure8, derivativeStructure7);
      assertNotSame(derivativeStructure8, derivativeStructure0);
      assertNotSame(derivativeStructure8, derivativeStructure2);
      assertNotSame(derivativeStructure9, derivativeStructure0);
      assertNotSame(derivativeStructure9, derivativeStructure2);
      assertNotSame(derivativeStructure9, derivativeStructure8);
      assertNotSame(derivativeStructure9, derivativeStructure5);
      assertNotSame(derivativeStructure9, derivativeStructure1);
      assertNotSame(derivativeStructure9, derivativeStructure3);
      assertNotSame(derivativeStructure9, derivativeStructure7);
      assertNotSame(derivativeStructure9, derivativeStructure4);
      assertNotSame(derivativeStructure9, derivativeStructure6);
      
      derivativeStructureArray1[3] = derivativeStructure9;
      DerivativeStructure derivativeStructure10 = derivativeStructure4.asin();
      assertEquals(Double.NaN, derivativeStructure10.getReal(), 0.01);
      assertEquals(0, derivativeStructure10.getFreeParameters());
      assertEquals(0, derivativeStructure10.getOrder());
      assertEquals(Double.NaN, derivativeStructure10.getValue(), 0.01);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0, derivativeStructure1.getFreeParameters());
      assertEquals(0, derivativeStructure1.getOrder());
      assertEquals(0.0, derivativeStructure1.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure1.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getValue(), 0.01);
      assertEquals(0.0, derivativeStructure2.getReal(), 0.01);
      assertEquals(0, derivativeStructure2.getFreeParameters());
      assertEquals(0, derivativeStructure2.getOrder());
      assertEquals(0, derivativeStructure3.getOrder());
      assertEquals(0, derivativeStructure3.getFreeParameters());
      assertEquals(0.0, derivativeStructure3.getReal(), 0.01);
      assertEquals(0.0, derivativeStructure3.getValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getValue(), 0.01);
      assertEquals(0, derivativeStructure4.getFreeParameters());
      assertEquals(0, derivativeStructure4.getOrder());
      assertEquals(Double.POSITIVE_INFINITY, derivativeStructure4.getReal(), 0.01);
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure9));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure10.equals((Object)derivativeStructure7));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure0.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure0.equals((Object)derivativeStructure9));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure9));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure3));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure8));
      assertTrue(derivativeStructure1.equals((Object)derivativeStructure2));
      assertFalse(derivativeStructure1.equals((Object)derivativeStructure5));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure1));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure9));
      assertTrue(derivativeStructure2.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure2.equals((Object)derivativeStructure7));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure2));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure4));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure9));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure3.equals((Object)derivativeStructure8));
      assertTrue(derivativeStructure3.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure6));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure8));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure5));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure3));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure9));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure1));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure7));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure0));
      assertFalse(derivativeStructure4.equals((Object)derivativeStructure2));
      assertNotNull(derivativeStructure10);
      assertNotSame(derivativeStructure10, derivativeStructure0);
      assertNotSame(derivativeStructure10, derivativeStructure2);
      assertNotSame(derivativeStructure10, derivativeStructure6);
      assertNotSame(derivativeStructure10, derivativeStructure3);
      assertNotSame(derivativeStructure10, derivativeStructure4);
      assertNotSame(derivativeStructure10, derivativeStructure9);
      assertNotSame(derivativeStructure10, derivativeStructure8);
      assertNotSame(derivativeStructure10, derivativeStructure5);
      assertNotSame(derivativeStructure10, derivativeStructure1);
      assertNotSame(derivativeStructure10, derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure10);
      assertNotSame(derivativeStructure0, derivativeStructure2);
      assertNotSame(derivativeStructure0, derivativeStructure1);
      assertNotSame(derivativeStructure0, derivativeStructure7);
      assertNotSame(derivativeStructure0, derivativeStructure6);
      assertNotSame(derivativeStructure0, derivativeStructure8);
      assertNotSame(derivativeStructure0, derivativeStructure5);
      assertNotSame(derivativeStructure0, derivativeStructure3);
      assertNotSame(derivativeStructure0, derivativeStructure4);
      assertNotSame(derivativeStructure0, derivativeStructure9);
      assertNotSame(derivativeStructure1, derivativeStructure7);
      assertNotSame(derivativeStructure1, derivativeStructure0);
      assertNotSame(derivativeStructure1, derivativeStructure10);
      assertNotSame(derivativeStructure1, derivativeStructure2);
      assertNotSame(derivativeStructure1, derivativeStructure4);
      assertNotSame(derivativeStructure1, derivativeStructure9);
      assertNotSame(derivativeStructure1, derivativeStructure6);
      assertNotSame(derivativeStructure1, derivativeStructure8);
      assertNotSame(derivativeStructure1, derivativeStructure5);
      assertNotSame(derivativeStructure1, derivativeStructure3);
      assertNotSame(derivativeStructure2, derivativeStructure6);
      assertNotSame(derivativeStructure2, derivativeStructure8);
      assertNotSame(derivativeStructure2, derivativeStructure4);
      assertNotSame(derivativeStructure2, derivativeStructure9);
      assertNotSame(derivativeStructure2, derivativeStructure5);
      assertNotSame(derivativeStructure2, derivativeStructure0);
      assertNotSame(derivativeStructure2, derivativeStructure10);
      assertNotSame(derivativeStructure2, derivativeStructure1);
      assertNotSame(derivativeStructure2, derivativeStructure7);
      assertNotSame(derivativeStructure2, derivativeStructure3);
      assertNotSame(derivativeStructure3, derivativeStructure6);
      assertNotSame(derivativeStructure3, derivativeStructure4);
      assertNotSame(derivativeStructure3, derivativeStructure9);
      assertNotSame(derivativeStructure3, derivativeStructure0);
      assertNotSame(derivativeStructure3, derivativeStructure10);
      assertNotSame(derivativeStructure3, derivativeStructure5);
      assertNotSame(derivativeStructure3, derivativeStructure1);
      assertNotSame(derivativeStructure3, derivativeStructure7);
      assertNotSame(derivativeStructure3, derivativeStructure8);
      assertNotSame(derivativeStructure3, derivativeStructure2);
      assertNotSame(derivativeStructure4, derivativeStructure6);
      assertNotSame(derivativeStructure4, derivativeStructure8);
      assertNotSame(derivativeStructure4, derivativeStructure5);
      assertNotSame(derivativeStructure4, derivativeStructure3);
      assertNotSame(derivativeStructure4, derivativeStructure9);
      assertNotSame(derivativeStructure4, derivativeStructure1);
      assertNotSame(derivativeStructure4, derivativeStructure7);
      assertNotSame(derivativeStructure4, derivativeStructure0);
      assertNotSame(derivativeStructure4, derivativeStructure10);
      assertNotSame(derivativeStructure4, derivativeStructure2);
      
      derivativeStructureArray1[4] = derivativeStructure10;
      derivativeStructureArray0[0] = derivativeStructureArray1;
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix0 = new BlockFieldMatrix<DerivativeStructure>(derivativeStructureArray0);
      assertFalse(blockFieldMatrix0.isSquare());
      assertEquals(1, blockFieldMatrix0.getRowDimension());
      assertEquals(5, blockFieldMatrix0.getColumnDimension());
      assertEquals(1, derivativeStructureArray0.length);
      assertEquals(36, BlockFieldMatrix.BLOCK_SIZE);
      assertNotNull(blockFieldMatrix0);
      
      Field<DerivativeStructure> field0 = blockFieldMatrix0.getField();
      assertFalse(blockFieldMatrix0.isSquare());
      assertEquals(1, blockFieldMatrix0.getRowDimension());
      assertEquals(5, blockFieldMatrix0.getColumnDimension());
      assertEquals(1, derivativeStructureArray0.length);
      assertEquals(36, BlockFieldMatrix.BLOCK_SIZE);
      assertNotNull(field0);
      
      BlockFieldMatrix<DerivativeStructure> blockFieldMatrix1 = null;
      try {
        blockFieldMatrix1 = new BlockFieldMatrix<DerivativeStructure>(field0, (-1629), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimension (-1,629)
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractFieldMatrix.extractField((DerivativeStructure[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DerivativeStructure[][] derivativeStructureArray0 = new DerivativeStructure[3][9];
      DerivativeStructure[] derivativeStructureArray1 = new DerivativeStructure[3];
      double double0 = 6.0;
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.0;
      doubleArray0[1] = 6.0;
      doubleArray0[2] = 6.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math4.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[9];
      double double0 = 1496.9;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1496.9;
      doubleArray0[1] = 1496.9;
      doubleArray0[2] = (double) 4227;
      doubleArray0[3] = (double) 4227;
      doubleArray0[4] = (double) 4227;
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(4227, 4227, doubleArray0);
  }
}

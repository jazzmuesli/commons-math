/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:06:17 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.Field;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.linear.AbstractFieldMatrix;
import org.apache.commons.math4.linear.FieldMatrix;
import org.apache.commons.math4.linear.SparseFieldMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SparseFieldMatrix_ESTest extends SparseFieldMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>((FieldMatrix<DerivativeStructure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.SparseFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>((Field<DerivativeStructure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>((Field<DerivativeStructure>) null, 2174, 2174);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.OpenIntToFieldHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(0, 0, 0);
      assertNotNull(derivativeStructure0);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      
      Field<DerivativeStructure> field0 = derivativeStructure0.getField();
      assertNotNull(field0);
      assertEquals(0, derivativeStructure0.getFreeParameters());
      assertEquals(0.0, derivativeStructure0.getReal(), 0.01);
      assertEquals(0, derivativeStructure0.getOrder());
      assertEquals(0.0, derivativeStructure0.getValue(), 0.01);
      
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>(field0, 80, (-3332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimension (-3,332)
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[7];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1233, 0);
      derivativeStructureArray0[0] = derivativeStructure0;
      Field<DerivativeStructure> field0 = AbstractFieldMatrix.extractField(derivativeStructureArray0);
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>(field0);
      // Undeclared exception!
      try { 
        sparseFieldMatrix0.getEntry(1, 1787);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index (1)
         //
         verifyException("org.apache.commons.math4.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = null;
      try {
        sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>((SparseFieldMatrix<DerivativeStructure>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.SparseFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DerivativeStructure[] derivativeStructureArray0 = new DerivativeStructure[7];
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(1233, 0);
      derivativeStructureArray0[0] = derivativeStructure0;
      Field<DerivativeStructure> field0 = AbstractFieldMatrix.extractField(derivativeStructureArray0);
      SparseFieldMatrix<DerivativeStructure> sparseFieldMatrix0 = new SparseFieldMatrix<DerivativeStructure>(field0);
      int int0 = sparseFieldMatrix0.getColumnDimension();
      assertTrue(sparseFieldMatrix0.isSquare());
      assertEquals(0, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:28:12 GMT 2019
 */

package org.apache.commons.math4.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.BlockRealMatrix;
import org.apache.commons.math4.linear.DiagonalMatrix;
import org.apache.commons.math4.linear.OpenMapRealMatrix;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealMatrixChangingVisitor;
import org.apache.commons.math4.linear.RealMatrixPreservingVisitor;
import org.apache.commons.math4.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnyMatrix_ESTest extends AnyMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1678;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(864, 1678);
      int int1 = 3623;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 3623;
      doubleArray1[1] = (double) 3623;
      doubleArray1[2] = (double) 1678;
      doubleArray1[3] = (double) 1678;
      doubleArray0[0] = doubleArray1;
      try { 
        blockRealMatrix0.power(864);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (864x1,678) matrix
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-3943);
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.getColumnDimension();
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      try { 
        array2DRowRealMatrix1.getColumnMatrix(52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (52)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3244;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3244, 3244);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 3244;
      doubleArray0[1] = (double) 3244;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (double) 52;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(3244);
      int int1 = 1898;
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0, false);
      try { 
        diagonalMatrix0.multiply(diagonalMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3,244 != 5
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      array2DRowRealMatrix0.isSquare();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1268.048297017367;
      doubleArray1[3] = (-1333.05091636);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1268.048297017367;
      doubleArray2[1] = 1268.048297017367;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1333.05091636);
      doubleArray2[4] = 1268.048297017367;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1268.048297017367;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1268.048297017367;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1333.05091636);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-146.100331235);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, true);
      diagonalMatrix0.getData();
      RealMatrix realMatrix0 = diagonalMatrix0.getSubMatrix(0, 0, 0, 0);
      diagonalMatrix0.checkAdd(realMatrix0);
      int int0 = 16;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(16, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0, true);
      diagonalMatrix0.add(diagonalMatrix1);
      diagonalMatrix0.copy();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3025;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3025, 3025);
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      // Undeclared exception!
      try { 
        blockRealMatrix0.checkAdd(array2DRowRealMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 3,025x3,025 but expected 0x0
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 583;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(583, 583);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 583;
      doubleArray0[1] = (double) 583;
      doubleArray0[2] = 854.117784501;
      doubleArray0[3] = (double) 52;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      // Undeclared exception!
      try { 
        diagonalMatrix0.checkMultiply(blockRealMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 4 != 583
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-6.0);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      diagonalMatrix0.toString();
      diagonalMatrix0.getColumnDimension();
      double[][] doubleArray1 = new double[0][6];
      Array2DRowRealMatrix array2DRowRealMatrix0 = null;
      try {
        array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math4.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4214;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(951, 4214);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(951, 951);
      try { 
        openMapRealMatrix0.add(openMapRealMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 951x4,214 but expected 951x951
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-361.4503);
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      try { 
        array2DRowRealMatrix0.power(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // non square (8x1) matrix
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1432.3442594);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.createMatrix(86, 1333);
      try { 
        array2DRowRealMatrix0.multiply(realMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 1 != 86
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-23.2475032737609);
      double double0 = 1024.0;
      doubleArray0[1] = 1024.0;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0, false);
      try { 
        array2DRowRealMatrix0.subtract(diagonalMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // got 0x0 but expected 2x2
         //
         verifyException("org.apache.commons.math4.linear.AnyMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3244;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3244, 3244);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3244;
      doubleArray0[1] = (double) 3244;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = (double) 52;
      doubleArray0[4] = (double) 52;
      DiagonalMatrix diagonalMatrix0 = new DiagonalMatrix(doubleArray0);
      int int1 = 1898;
      DiagonalMatrix diagonalMatrix1 = new DiagonalMatrix(doubleArray0, false);
      diagonalMatrix0.multiply(diagonalMatrix1);
      try { 
        blockRealMatrix0.getColumnVector(3244);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index (3,244)
         //
         verifyException("org.apache.commons.math4.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1073;
      doubleArray1[1] = (double) 1073;
      doubleArray1[2] = (double) 1073;
      doubleArray1[3] = (double) 1073;
      doubleArray1[4] = (double) 1073;
      doubleArray1[5] = (double) 1073;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1073;
      doubleArray2[1] = (double) 1073;
      doubleArray2[2] = (double) 1073;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 1073;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 1073;
      doubleArray4[1] = (double) 1073;
      doubleArray4[2] = (-3429.107);
      doubleArray4[3] = 1464.054346598;
      doubleArray4[4] = (double) 1073;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1464.054346598;
      doubleArray5[1] = (-3429.107);
      doubleArray5[2] = (double) 1073;
      doubleArray5[3] = (double) 1073;
      doubleArray5[4] = (-3429.107);
      doubleArray5[5] = (double) 1073;
      doubleArray5[6] = (-3429.107);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-3429.107);
      doubleArray0[5] = doubleArray6;
      doubleArray0[6] = doubleArray1;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(1073, 1073, doubleArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6 != 2,704
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealMatrixPreservingVisitor realMatrixPreservingVisitor0 = mock(RealMatrixPreservingVisitor.class, new ViolatedAssumptionAnswer());
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2361, 2361);
      OpenMapRealMatrix openMapRealMatrix1 = new OpenMapRealMatrix(openMapRealMatrix0);
      openMapRealMatrix1.add(openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 6088.458383;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 6088.458383;
      doubleArray3[1] = 6088.458383;
      doubleArray3[2] = 6088.458383;
      doubleArray3[3] = 6088.458383;
      doubleArray3[4] = 6088.458383;
      doubleArray3[5] = 6088.458383;
      doubleArray3[6] = 6088.458383;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 6088.458383;
      doubleArray4[1] = 6088.458383;
      doubleArray4[2] = 6088.458383;
      doubleArray4[3] = 1024.0;
      doubleArray4[4] = 6088.458383;
      doubleArray4[5] = 6088.458383;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1024.0;
      doubleArray5[1] = 6088.458383;
      doubleArray5[2] = 6088.458383;
      doubleArray5[3] = 6088.458383;
      doubleArray5[4] = 1024.0;
      doubleArray5[5] = 1024.0;
      doubleArray5[6] = 1024.0;
      doubleArray5[8] = 1024.0;
      doubleArray0[4] = doubleArray5;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2765;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(2765, 2765);
      int int1 = 0;
      RealMatrix realMatrix0 = array2DRowRealMatrix0.power(0);
      array2DRowRealMatrix0.checkMultiply(realMatrix0);
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(2765, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math4.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 341;
      int int1 = 265;
      BlockRealMatrix blockRealMatrix0 = null;
      try {
        blockRealMatrix0 = new BlockRealMatrix(341, 265, (double[][]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.linear.BlockRealMatrix", e);
      }
  }
}

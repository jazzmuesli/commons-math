/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:17:44 GMT 2019
 */

package org.apache.commons.math4.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.genetics.CrossoverPolicy;
import org.apache.commons.math4.genetics.GeneticAlgorithm;
import org.apache.commons.math4.genetics.MutationPolicy;
import org.apache.commons.math4.genetics.Population;
import org.apache.commons.math4.genetics.SelectionPolicy;
import org.apache.commons.math4.genetics.StoppingCondition;
import org.apache.commons.rng.UniformRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class GeneticAlgorithm_ESTest extends GeneticAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.0, (MutationPolicy) null, 0.0, selectionPolicy0);
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(population0).toString();
      doReturn(0).when(population0).getPopulationLimit();
      doReturn(0).when(population0).getPopulationSize();
      Population population1 = mock(Population.class, new ViolatedAssumptionAnswer());
      doReturn(population0).when(population1).nextGeneration();
      Population population2 = geneticAlgorithm0.nextGeneration(population1);
      assertEquals(0.0, geneticAlgorithm0.getMutationRate(), 0.01);
      assertEquals(0.0, geneticAlgorithm0.getCrossoverRate(), 0.01);
      assertSame(population2, population0);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeneticAlgorithm.setRandomGenerator((UniformRandomProvider) null);
      UniformRandomProvider uniformRandomProvider0 = GeneticAlgorithm.getRandomGenerator();
      assertNull(uniformRandomProvider0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.0, mutationPolicy0, 0.0, selectionPolicy0);
      double double0 = geneticAlgorithm0.getMutationRate();
      assertEquals(0.0, geneticAlgorithm0.getCrossoverRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.9, (MutationPolicy) null, 0.0, selectionPolicy0);
      geneticAlgorithm0.getMutationPolicy();
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
      assertEquals(0.0, geneticAlgorithm0.getMutationRate(), 0.01);
      assertEquals(0.9, geneticAlgorithm0.getCrossoverRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 1.0, mutationPolicy0, 1.0, selectionPolicy0);
      double double0 = geneticAlgorithm0.getCrossoverRate();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
      assertEquals(1.0, geneticAlgorithm0.getMutationRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm((CrossoverPolicy) null, 0.0, mutationPolicy0, 0.0, selectionPolicy0);
      geneticAlgorithm0.getCrossoverPolicy();
      assertEquals(0.0, geneticAlgorithm0.getCrossoverRate(), 0.01);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
      assertEquals(0.0, geneticAlgorithm0.getMutationRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.0, (MutationPolicy) null, 0.0, selectionPolicy0);
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      doReturn("NON_POSITIVE_POLYNOMIAL_DEGREE").when(population0).toString();
      doReturn((-2354)).when(population0).getPopulationLimit();
      doReturn((-7)).when(population0).getPopulationSize();
      Population population1 = mock(Population.class, new ViolatedAssumptionAnswer());
      doReturn(population0).when(population1).nextGeneration();
      Population population2 = geneticAlgorithm0.nextGeneration(population1);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
      assertEquals(0.0, geneticAlgorithm0.getMutationRate(), 0.01);
      assertEquals(0.0, geneticAlgorithm0.getCrossoverRate(), 0.01);
      assertEquals((-2354), population2.getPopulationLimit());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm((CrossoverPolicy) null, 0.0, mutationPolicy0, 0.0, selectionPolicy0);
      geneticAlgorithm0.getCrossoverRate();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      doReturn("1/hM)w|").when(selectionPolicy0).toString();
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.9, mutationPolicy0, 0.9, selectionPolicy0);
      geneticAlgorithm0.getMutationRate();
      geneticAlgorithm0.getSelectionPolicy();
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      UniformRandomProvider uniformRandomProvider0 = GeneticAlgorithm.getRandomGenerator();
      GeneticAlgorithm.setRandomGenerator(uniformRandomProvider0);
      Population population1 = mock(Population.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = null;
      try {
        geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.0, (MutationPolicy) null, (-1886.3326528), (SelectionPolicy) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // mutation rate (-1,886.333)
         //
         verifyException("org.apache.commons.math4.genetics.GeneticAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = null;
      try {
        geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 496.2024070408852, mutationPolicy0, (-2666.357619074877), selectionPolicy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // crossover rate (496.202)
         //
         verifyException("org.apache.commons.math4.genetics.GeneticAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = null;
      try {
        geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, (-1.0), mutationPolicy0, 0.0, selectionPolicy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // crossover rate (-1)
         //
         verifyException("org.apache.commons.math4.genetics.GeneticAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = GeneticAlgorithm.getRandomGenerator();
      GeneticAlgorithm.setRandomGenerator(uniformRandomProvider0);
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      MutationPolicy mutationPolicy0 = null;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CrossoverPolicy crossoverPolicy0 = mock(CrossoverPolicy.class, new ViolatedAssumptionAnswer());
      doReturn("[1 3B=VYmDK3Pv@").when(crossoverPolicy0).toString();
      MutationPolicy mutationPolicy0 = mock(MutationPolicy.class, new ViolatedAssumptionAnswer());
      SelectionPolicy selectionPolicy0 = mock(SelectionPolicy.class, new ViolatedAssumptionAnswer());
      GeneticAlgorithm geneticAlgorithm0 = new GeneticAlgorithm(crossoverPolicy0, 0.0, mutationPolicy0, 0.0, selectionPolicy0);
      geneticAlgorithm0.getCrossoverPolicy();
      assertEquals(0.0, geneticAlgorithm0.getCrossoverRate(), 0.01);
      assertEquals(0.0, geneticAlgorithm0.getMutationRate(), 0.01);
      assertEquals(0, geneticAlgorithm0.getGenerationsEvolved());
  }
}

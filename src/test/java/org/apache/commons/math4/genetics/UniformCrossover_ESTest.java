/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:25:21 GMT 2019
 */

package org.apache.commons.math4.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.genetics.Chromosome;
import org.apache.commons.math4.genetics.DummyRandomKey;
import org.apache.commons.math4.genetics.UniformCrossover;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UniformCrossover_ESTest extends UniformCrossover_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniformCrossover<String> uniformCrossover0 = new UniformCrossover<String>(0.0);
      Chromosome chromosome0 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      Chromosome chromosome1 = mock(Chromosome.class, new ViolatedAssumptionAnswer());
      try { 
        uniformCrossover0.crossover(chromosome0, chromosome1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // one-point crossover only works with fixed-length chromosomes
         //
         verifyException("org.apache.commons.math4.genetics.UniformCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformCrossover<String> uniformCrossover0 = new UniformCrossover<String>(1.0);
      double double0 = uniformCrossover0.getRatio();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UniformCrossover<DummyRandomKey> uniformCrossover0 = null;
      try {
        uniformCrossover0 = new UniformCrossover<DummyRandomKey>(961.213026012809);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // crossover rate (961.213)
         //
         verifyException("org.apache.commons.math4.genetics.UniformCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UniformCrossover<Integer> uniformCrossover0 = null;
      try {
        uniformCrossover0 = new UniformCrossover<Integer>((-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // crossover rate (-1)
         //
         verifyException("org.apache.commons.math4.genetics.UniformCrossover", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UniformCrossover<Integer> uniformCrossover0 = new UniformCrossover<Integer>(0.0);
      double double0 = uniformCrossover0.getRatio();
      assertEquals(0.0, double0, 0.01);
  }
}

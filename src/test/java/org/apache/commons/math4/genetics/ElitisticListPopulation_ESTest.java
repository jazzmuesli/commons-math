/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:17:59 GMT 2019
 */

package org.apache.commons.math4.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.function.Consumer;
import org.apache.commons.math4.genetics.Chromosome;
import org.apache.commons.math4.genetics.ElitisticListPopulation;
import org.apache.commons.math4.genetics.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElitisticListPopulation_ESTest extends ElitisticListPopulation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 838;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(838, 0.9);
      elitisticListPopulation0.nextGeneration();
      elitisticListPopulation0.getChromosomes();
      elitisticListPopulation0.getElitismRate();
      elitisticListPopulation0.nextGeneration();
      try { 
        elitisticListPopulation0.setElitismRate((-443.84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (-443.84)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(2144730463, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 730;
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(730, 0.0);
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomeList();
      double double1 = 0.0;
      ElitisticListPopulation elitisticListPopulation1 = new ElitisticListPopulation(list0, 730, 0.0);
      List<Chromosome> list1 = elitisticListPopulation1.getChromosomeList();
      elitisticListPopulation0.addChromosomes(list1);
      elitisticListPopulation0.iterator();
      elitisticListPopulation0.nextGeneration();
      double double2 = 1708.2908519652296;
      elitisticListPopulation1.addChromosomes(list1);
      try { 
        elitisticListPopulation0.setElitismRate(1708.2908519652296);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (1,708.291)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
      int int0 = 1580;
      ElitisticListPopulation elitisticListPopulation1 = null;
      try {
        elitisticListPopulation1 = new ElitisticListPopulation(list0, 1580, 1580);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (1,580)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(308, 0.0);
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
      ElitisticListPopulation elitisticListPopulation1 = null;
      try {
        elitisticListPopulation1 = new ElitisticListPopulation(list0, 511, 1642.11734561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (1,642.117)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      elitisticListPopulation0.setElitismRate(1);
      elitisticListPopulation0.spliterator();
      elitisticListPopulation0.setElitismRate(1);
      elitisticListPopulation0.spliterator();
      elitisticListPopulation0.setPopulationLimit(306);
      elitisticListPopulation0.nextGeneration();
      Population population0 = elitisticListPopulation0.nextGeneration();
      elitisticListPopulation0.nextGeneration();
      elitisticListPopulation0.setElitismRate(0.0);
      elitisticListPopulation0.getElitismRate();
      elitisticListPopulation0.getElitismRate();
      Population population1 = elitisticListPopulation0.nextGeneration();
      assertNotSame(population1, population0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 838;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(838, 0.9);
      elitisticListPopulation0.nextGeneration();
      elitisticListPopulation0.getElitismRate();
      try { 
        elitisticListPopulation0.setElitismRate(838);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (838)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) null, 0, (-1673.22033677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.genetics.ListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1511, 0.0);
      List<Chromosome> list0 = elitisticListPopulation0.getChromosomes();
      int int0 = 0;
      ElitisticListPopulation elitisticListPopulation1 = null;
      try {
        elitisticListPopulation1 = new ElitisticListPopulation(list0, 0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // population limit has to be positive
         //
         verifyException("org.apache.commons.math4.genetics.ListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(677, 0.0);
      Population population0 = elitisticListPopulation0.nextGeneration();
      assertNotSame(population0, elitisticListPopulation0);
      
      Population population1 = elitisticListPopulation0.nextGeneration();
      assertEquals(0.0, elitisticListPopulation0.getElitismRate(), 0.01);
      assertNotSame(population1, elitisticListPopulation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(1, 1);
      elitisticListPopulation0.setPopulationLimit(1);
      elitisticListPopulation0.setPopulationLimit(97);
      try { 
        elitisticListPopulation0.setElitismRate(97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (97)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = new ElitisticListPopulation(729, 1.0);
      assertEquals(1.0, elitisticListPopulation0.getElitismRate(), 0.01);
      
      Population population0 = elitisticListPopulation0.nextGeneration();
      assertNotSame(population0, elitisticListPopulation0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 397.5982187398;
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(0, 397.5982187398);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // population limit has to be positive
         //
         verifyException("org.apache.commons.math4.genetics.ListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(115, 115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (115)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(222, 222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (222)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      double double0 = (-1.0);
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(1, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // elitism rate (-1)
         //
         verifyException("org.apache.commons.math4.genetics.ElitisticListPopulation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation((List<Chromosome>) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.genetics.ListPopulation", e);
      }
  }
}

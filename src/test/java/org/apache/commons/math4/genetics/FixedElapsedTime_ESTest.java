/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:51:13 GMT 2019
 */

package org.apache.commons.math4.genetics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math4.genetics.FixedElapsedTime;
import org.apache.commons.math4.genetics.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FixedElapsedTime_ESTest extends FixedElapsedTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(1392470281320000L, timeUnit0);
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fixedElapsedTime0.isSatisfied(population0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(0L);
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      fixedElapsedTime0.isSatisfied(population0);
      Population population1 = mock(Population.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fixedElapsedTime0.isSatisfied(population1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      FixedElapsedTime fixedElapsedTime0 = null;
      try {
        fixedElapsedTime0 = new FixedElapsedTime((-912L), timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -912 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.genetics.FixedElapsedTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FixedElapsedTime fixedElapsedTime0 = new FixedElapsedTime(4510L);
      Population population0 = mock(Population.class, new ViolatedAssumptionAnswer());
      fixedElapsedTime0.isSatisfied(population0);
      Population population1 = mock(Population.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fixedElapsedTime0.isSatisfied(population1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FixedElapsedTime fixedElapsedTime0 = null;
      try {
        fixedElapsedTime0 = new FixedElapsedTime((-1236L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,236 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math4.genetics.FixedElapsedTime", e);
      }
  }
}

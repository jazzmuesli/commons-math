/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:05:33 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.ToIntFunction;
import org.apache.commons.math4.ml.neuralnet.Network;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Network_ESTest extends Network_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Network network0 = new Network((-1L), 7);
      Collection<Neuron> collection0 = network0.getNeighbours((Iterable<Neuron>) network0);
      network0.getNeighbours((Iterable<Neuron>) collection0, (Iterable<Neuron>) network0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Network network0 = new Network((-944L), 8);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        network0.createNeuron(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Network network0 = new Network((-1L), 7);
      network0.iterator();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Network network0 = new Network(0L, 625);
      network0.getFeaturesSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Network network0 = new Network(0L, (-4576));
      network0.getFeaturesSize();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Network network0 = new Network(0L, 0);
      network0.copy();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Network network0 = new Network(0L, 625);
      network0.copy();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Network network0 = new Network(0L, 0);
      // Undeclared exception!
      try { 
        network0.getNeighbours((Neuron) null, (Iterable<Neuron>) network0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Network network0 = new Network(1L, 0);
      // Undeclared exception!
      try { 
        network0.getNeighbours((Iterable<Neuron>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Network network0 = new Network(676L, 2729);
      // Undeclared exception!
      try { 
        network0.createNeuron((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Network network0 = new Network(1L, 0);
      // Undeclared exception!
      try { 
        network0.addLink((Neuron) null, (Neuron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[][] longArray0 = new long[4][4];
      Network network0 = null;
      try {
        network0 = new Network(0L, 1, (Neuron[]) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Network network0 = new Network(0L, (-1247));
      // Undeclared exception!
      try { 
        network0.getNeighbours((Neuron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Network network0 = new Network((-1620L), 0);
      // Undeclared exception!
      try { 
        network0.getNeuron(65);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // 65
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Network network0 = new Network((-1445L), (-1764));
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        network0.createNeuron(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 7 != -1,764
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Network network0 = new Network((-1445L), (-1764));
      network0.copy();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Neuron[] neuronArray0 = new Neuron[3];
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L).when(neuron0).getIdentifier();
      neuronArray0[0] = neuron0;
      neuronArray0[1] = neuron0;
      neuronArray0[2] = neuron0;
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[3];
      longArray1[1] = 895L;
      longArray0[0] = longArray1;
      Network network0 = null;
      try {
        network0 = new Network(895L, 0, neuronArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Neuron[] neuronArray0 = new Neuron[3];
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((long)0, (long)0, 895L).when(neuron0).getIdentifier();
      neuronArray0[0] = neuron0;
      neuronArray0[1] = neuron0;
      neuronArray0[2] = neuron0;
      long[][] longArray0 = new long[3][7];
      Network network0 = null;
      try {
        network0 = new Network(895L, 0, neuronArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Neuron[] neuronArray0 = new Neuron[7];
      long[][] longArray0 = new long[2][6];
      Network network0 = null;
      try {
        network0 = new Network((-623L), 2, neuronArray0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Network.NeuronIdentifierComparator network_NeuronIdentifierComparator0 = new Network.NeuronIdentifierComparator();
      // Undeclared exception!
      try { 
        network_NeuronIdentifierComparator0.compare((Neuron) null, (Neuron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network$NeuronIdentifierComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Neuron[] neuronArray0 = new Neuron[3];
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L, 0L).when(neuron0).getIdentifier();
      neuronArray0[0] = neuron0;
      neuronArray0[1] = neuron0;
      neuronArray0[2] = neuron0;
      long[][] longArray0 = new long[3][7];
      Network network0 = new Network(895L, 0, neuronArray0, longArray0);
      assertEquals(0, network0.getFeaturesSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Network network0 = new Network(3030L, 0);
      int int0 = network0.getFeaturesSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Network network0 = new Network((-1946L), (-1359));
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Neuron> comparator0 = Comparator.comparingInt((ToIntFunction<? super Neuron>) toIntFunction0);
      Collection<Neuron> collection0 = network0.getNeurons(comparator0);
      // Undeclared exception!
      try { 
        network0.getNeighbours((Iterable<Neuron>) null, (Iterable<Neuron>) collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Network network0 = new Network(0L, 0);
      double[] doubleArray0 = new double[0];
      network0.createNeuron(doubleArray0);
      Neuron neuron0 = network0.getNeuron(0L);
      // Undeclared exception!
      try { 
        network0.deleteLink((Neuron) null, neuron0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Network network0 = new Network((-1532L), 31);
      // Undeclared exception!
      try { 
        network0.deleteNeuron((Neuron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.Network", e);
      }
  }
}

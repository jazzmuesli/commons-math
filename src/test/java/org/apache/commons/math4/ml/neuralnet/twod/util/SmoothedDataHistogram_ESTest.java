/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:19:04 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet.twod.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.apache.commons.math4.ml.neuralnet.Network;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D;
import org.apache.commons.math4.ml.neuralnet.twod.util.SmoothedDataHistogram;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmoothedDataHistogram_ESTest extends SmoothedDataHistogram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram((-1190), distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(1127).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn((-1190)).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -1,341,130 is smaller than the minimum (-1,190)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.SmoothedDataHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram(0, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0, 0).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterator<double[]> iterator0 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram((-1027), distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1027), (-1027)).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn((-4494), (-4494)).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.SmoothedDataHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram(0, distanceMeasure0);
      Iterator<Neuron> iterator0 = (Iterator<Neuron>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(network0).iterator();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(0, 0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(4123, (-3967)).when(neuronSquareMesh2D0).getNumberOfRows();
      double[] doubleArray0 = new double[2];
      Iterator<double[]> iterator1 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator1).hasNext();
      doReturn(doubleArray0).when(iterator1).next();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator1).when(iterable0).iterator();
      smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram(1286, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (1,286)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.SmoothedDataHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SmoothedDataHistogram smoothedDataHistogram0 = new SmoothedDataHistogram(1, distanceMeasure0);
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(neuron0).getIdentifier();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(neuron0, (Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn(1, 812).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1, 3562).when(neuronSquareMesh2D0).getNumberOfRows();
      // Undeclared exception!
      try { 
        smoothedDataHistogram0.computeImage(neuronSquareMesh2D0, (Iterable<double[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.LocationFinder", e);
      }
  }
}

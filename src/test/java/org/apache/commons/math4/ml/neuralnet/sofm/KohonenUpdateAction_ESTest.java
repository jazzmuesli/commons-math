/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:04:28 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet.sofm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.apache.commons.math4.ml.neuralnet.Network;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.apache.commons.math4.ml.neuralnet.sofm.KohonenUpdateAction;
import org.apache.commons.math4.ml.neuralnet.sofm.LearningFactorFunction;
import org.apache.commons.math4.ml.neuralnet.sofm.NeighbourhoodSizeFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class KohonenUpdateAction_ESTest extends KohonenUpdateAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      LearningFactorFunction learningFactorFunction0 = mock(LearningFactorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3399.727)).when(learningFactorFunction0).value(anyLong());
      NeighbourhoodSizeFunction neighbourhoodSizeFunction0 = mock(NeighbourhoodSizeFunction.class, new ViolatedAssumptionAnswer());
      KohonenUpdateAction kohonenUpdateAction0 = new KohonenUpdateAction(distanceMeasure0, learningFactorFunction0, neighbourhoodSizeFunction0);
      assertEquals(0L, kohonenUpdateAction0.getNumberOfCalls());
      assertNotNull(kohonenUpdateAction0);
      
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(neuron0).getFeatures();
      Iterator<Neuron> iterator0 = (Iterator<Neuron>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(neuron0).when(iterator0).next();
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(network0).iterator();
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        kohonenUpdateAction0.update(network0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn((-527.345395693), (-527.345395693)).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      LearningFactorFunction learningFactorFunction0 = mock(LearningFactorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3399.727)).when(learningFactorFunction0).value(anyLong());
      NeighbourhoodSizeFunction neighbourhoodSizeFunction0 = mock(NeighbourhoodSizeFunction.class, new ViolatedAssumptionAnswer());
      KohonenUpdateAction kohonenUpdateAction0 = new KohonenUpdateAction(distanceMeasure0, learningFactorFunction0, neighbourhoodSizeFunction0);
      assertEquals(0L, kohonenUpdateAction0.getNumberOfCalls());
      assertNotNull(kohonenUpdateAction0);
      
      double[] doubleArray0 = new double[5];
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(neuron0).getFeatures();
      Neuron neuron1 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(neuron1).getFeatures();
      Iterator<Neuron> iterator0 = (Iterator<Neuron>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(neuron0, neuron1).when(iterator0).next();
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(network0).iterator();
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        kohonenUpdateAction0.update(network0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math4.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      LearningFactorFunction learningFactorFunction0 = mock(LearningFactorFunction.class, new ViolatedAssumptionAnswer());
      NeighbourhoodSizeFunction neighbourhoodSizeFunction0 = mock(NeighbourhoodSizeFunction.class, new ViolatedAssumptionAnswer());
      KohonenUpdateAction kohonenUpdateAction0 = new KohonenUpdateAction(distanceMeasure0, learningFactorFunction0, neighbourhoodSizeFunction0);
      assertEquals(0L, kohonenUpdateAction0.getNumberOfCalls());
      assertNotNull(kohonenUpdateAction0);
      
      long long0 = kohonenUpdateAction0.getNumberOfCalls();
      assertEquals(0L, kohonenUpdateAction0.getNumberOfCalls());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn((-527.345395693), (-527.345395693)).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      LearningFactorFunction learningFactorFunction0 = mock(LearningFactorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3399.727)).when(learningFactorFunction0).value(anyLong());
      NeighbourhoodSizeFunction neighbourhoodSizeFunction0 = mock(NeighbourhoodSizeFunction.class, new ViolatedAssumptionAnswer());
      KohonenUpdateAction kohonenUpdateAction0 = new KohonenUpdateAction(distanceMeasure0, learningFactorFunction0, neighbourhoodSizeFunction0);
      double[] doubleArray0 = new double[5];
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(neuron0).compareAndSetFeatures(any(double[].class) , any(double[].class));
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(neuron0).getFeatures();
      Neuron neuron1 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(neuron1).getFeatures();
      Iterator<Neuron> iterator0 = (Iterator<Neuron>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn(neuron0, neuron1).when(iterator0).next();
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0, (Iterator) null).when(network0).iterator();
      // Undeclared exception!
      try { 
        kohonenUpdateAction0.update(network0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.MapUtils", e);
      }
  }
}

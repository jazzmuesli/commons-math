/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:20:16 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.ml.neuralnet.FeatureInitializer;
import org.apache.commons.math4.ml.neuralnet.FeatureInitializerFactory;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.statistics.distribution.ContinuousDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FeatureInitializerFactory_ESTest extends FeatureInitializerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FeatureInitializerFactory.uniform(uniformRandomProvider0, 2.220446049250313E-16, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > 0
         //
         verifyException("org.apache.commons.statistics.distribution.UniformContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformRandomProvider uniformRandomProvider0 = mock(UniformRandomProvider.class, new ViolatedAssumptionAnswer());
      FeatureInitializer featureInitializer0 = FeatureInitializerFactory.uniform(uniformRandomProvider0, (-1101.624), 0.0);
      assertNotNull(featureInitializer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnivariateFunction univariateFunction0 = mock(UnivariateFunction.class, new ViolatedAssumptionAnswer());
      FeatureInitializer featureInitializer0 = FeatureInitializerFactory.function(univariateFunction0, (-2486.0), (-1991.678207));
      FeatureInitializer featureInitializer1 = FeatureInitializerFactory.randomize((ContinuousDistribution.Sampler) null, featureInitializer0);
      assertFalse(featureInitializer1.equals((Object)featureInitializer0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeatureInitializer featureInitializer0 = FeatureInitializerFactory.uniform((-738.0127500444516), (-23.77304310481552));
      assertNotNull(featureInitializer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        FeatureInitializerFactory.uniform(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > 0
         //
         verifyException("org.apache.commons.statistics.distribution.UniformContinuousDistribution", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:17:47 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet.twod.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D;
import org.apache.commons.math4.ml.neuralnet.twod.util.LocationFinder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocationFinder_ESTest extends LocationFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(neuron0).getIdentifier();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(neuron0).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfRows();
      LocationFinder locationFinder0 = new LocationFinder(neuronSquareMesh2D0);
      assertNotNull(locationFinder0);
      
      Neuron neuron1 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(neuron1).getIdentifier();
      LocationFinder.Location locationFinder_Location0 = locationFinder0.getLocation(neuron1);
      assertEquals(0, locationFinder_Location0.getRow());
      assertEquals(0, locationFinder_Location0.getColumn());
      assertNotNull(locationFinder_Location0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      LocationFinder locationFinder0 = new LocationFinder(neuronSquareMesh2D0);
      assertNotNull(locationFinder0);
      
      // Undeclared exception!
      try { 
        locationFinder0.getLocation((Neuron) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.LocationFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(neuron0).getIdentifier();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(neuron0, (Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn(407).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfRows();
      LocationFinder locationFinder0 = null;
      try {
        locationFinder0 = new LocationFinder(neuronSquareMesh2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.LocationFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocationFinder.Location locationFinder_Location0 = new LocationFinder.Location(0, 100);
      assertEquals(100, locationFinder_Location0.getColumn());
      assertEquals(0, locationFinder_Location0.getRow());
      assertNotNull(locationFinder_Location0);
      
      int int0 = locationFinder_Location0.getRow();
      assertEquals(0, int0);
      assertEquals(100, locationFinder_Location0.getColumn());
      assertEquals(0, locationFinder_Location0.getRow());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocationFinder.Location locationFinder_Location0 = new LocationFinder.Location(0, 100);
      assertEquals(0, locationFinder_Location0.getRow());
      assertEquals(100, locationFinder_Location0.getColumn());
      assertNotNull(locationFinder_Location0);
      
      int int0 = locationFinder_Location0.getColumn();
      assertEquals(100, int0);
      assertEquals(0, locationFinder_Location0.getRow());
      assertEquals(100, locationFinder_Location0.getColumn());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      LocationFinder locationFinder0 = new LocationFinder(neuronSquareMesh2D0);
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(neuron0).getIdentifier();
      LocationFinder.Location locationFinder_Location0 = locationFinder0.getLocation(neuron0);
      assertNull(locationFinder_Location0);
  }
}

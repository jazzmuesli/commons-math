/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:24:25 GMT 2019
 */

package org.apache.commons.math4.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.math4.ml.clustering.DoublePoint;
import org.apache.commons.math4.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer;
import org.apache.commons.math4.ml.clustering.evaluation.ClusterEvaluator;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiKMeansPlusPlusClusterer_ESTest extends MultiKMeansPlusPlusClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = null;
      int int0 = 0;
      ClusterEvaluator<DoublePoint> clusterEvaluator0 = (ClusterEvaluator<DoublePoint>) mock(ClusterEvaluator.class, new ViolatedAssumptionAnswer());
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = null;
      try {
        multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>((KMeansPlusPlusClusterer<DoublePoint>) null, 2954, clusterEvaluator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      doReturn((List) null, (List) null, (List) null, (List) null, (List) null).when(kMeansPlusPlusClusterer0).cluster(anyCollection());
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 2699);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      ClusterEvaluator<DoublePoint> clusterEvaluator0 = multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, 2699, clusterEvaluator0);
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer1.cluster((Collection<DoublePoint>) null);
      Collection<DoublePoint> collection0 = null;
      multiKMeansPlusPlusClusterer1.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterer();
      // Undeclared exception!
      multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = null;
      int int0 = 0;
      int int1 = 0;
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = null;
      try {
        multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>((KMeansPlusPlusClusterer<DoublePoint>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = null;
      try {
        multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>((KMeansPlusPlusClusterer<DoublePoint>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 0, (ClusterEvaluator<DoublePoint>) null);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, (-300));
      multiKMeansPlusPlusClusterer1.getClusterer();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = null;
      int int0 = 0;
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = null;
      try {
        multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>((KMeansPlusPlusClusterer<DoublePoint>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      doReturn((List) null).when(kMeansPlusPlusClusterer0).cluster(anyCollection());
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 829, (ClusterEvaluator<DoublePoint>) null);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, 829);
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer0.getClusterer();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      // Undeclared exception!
      try { 
        multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, (-1), (ClusterEvaluator<DoublePoint>) null);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, 0, (ClusterEvaluator<DoublePoint>) null);
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer1.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer0.getNumTrials();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 0, (ClusterEvaluator<DoublePoint>) null);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, (-1));
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer0.getClusterer();
      multiKMeansPlusPlusClusterer0.getClusterer();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getClusterEvaluator();
      multiKMeansPlusPlusClusterer0.getClusterer();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      doReturn((List) null, (List) null, (List) null, (List) null, (List) null).when(kMeansPlusPlusClusterer0).cluster(anyCollection());
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, (-934));
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = multiKMeansPlusPlusClusterer0.getClusterer();
      ClusterEvaluator<DoublePoint> clusterEvaluator0 = multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, 449, clusterEvaluator0);
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getNumTrials();
      multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.cluster((Collection<DoublePoint>) null);
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer0.getNumTrials();
      multiKMeansPlusPlusClusterer0.getClusterer();
      multiKMeansPlusPlusClusterer1.getClusterEvaluator();
      multiKMeansPlusPlusClusterer1.getClusterer();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(kMeansPlusPlusClusterer0).toString();
      doReturn((DistanceMeasure) null, (DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer0).getDistanceMeasure();
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer1 = (KMeansPlusPlusClusterer<DoublePoint>) mock(KMeansPlusPlusClusterer.class, new ViolatedAssumptionAnswer());
      doReturn((DistanceMeasure) null, (DistanceMeasure) null).when(kMeansPlusPlusClusterer1).getDistanceMeasure();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer1, (-2098));
      ClusterEvaluator<DoublePoint> clusterEvaluator0 = multiKMeansPlusPlusClusterer0.getClusterEvaluator();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer1 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 4, clusterEvaluator0);
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer2 = multiKMeansPlusPlusClusterer1.getClusterer();
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer2 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer2, (-2098));
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer1.getClusterer();
      multiKMeansPlusPlusClusterer2.getClusterer();
      multiKMeansPlusPlusClusterer0.getClusterEvaluator();
  }
}

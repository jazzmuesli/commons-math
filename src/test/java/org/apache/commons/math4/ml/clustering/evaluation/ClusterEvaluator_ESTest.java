/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:47:00 GMT 2019
 */

package org.apache.commons.math4.ml.clustering.evaluation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math4.ml.clustering.Cluster;
import org.apache.commons.math4.ml.clustering.Clusterable;
import org.apache.commons.math4.ml.clustering.DoublePoint;
import org.apache.commons.math4.ml.clustering.evaluation.SumOfClusterVariances;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClusterEvaluator_ESTest extends ClusterEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(clusterable0).getPoint();
      Clusterable clusterable1 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(clusterable1).getPoint();
      double double0 = sumOfClusterVariances0.distance(clusterable0, clusterable1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      boolean boolean0 = sumOfClusterVariances0.isBetterScore(0.0, (-844.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      double[] doubleArray0 = new double[1];
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(clusterable0).getPoint();
      double double0 = sumOfClusterVariances0.distance(clusterable0, clusterable0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn((-2796.7)).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      double[] doubleArray0 = new double[5];
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(clusterable0).getPoint();
      double double0 = sumOfClusterVariances0.distance(clusterable0, clusterable0);
      assertEquals((-2796.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      // Undeclared exception!
      try { 
        sumOfClusterVariances0.score((List<? extends Cluster<DoublePoint>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.clustering.evaluation.SumOfClusterVariances", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      Cluster<DoublePoint> cluster0 = (Cluster<DoublePoint>) mock(Cluster.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cluster0).getPoints();
      // Undeclared exception!
      try { 
        sumOfClusterVariances0.centroidOf(cluster0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(distanceMeasure0).compute(any(double[].class) , any(double[].class));
      SumOfClusterVariances<DoublePoint> sumOfClusterVariances0 = new SumOfClusterVariances<DoublePoint>(distanceMeasure0);
      sumOfClusterVariances0.isBetterScore(0.0, 0.0);
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(clusterable0).getPoint();
      sumOfClusterVariances0.distance(clusterable0, clusterable0);
      Clusterable clusterable1 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(clusterable1).getPoint();
      sumOfClusterVariances0.distance(clusterable1, clusterable1);
      Cluster<DoublePoint> cluster0 = (Cluster<DoublePoint>) mock(Cluster.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(cluster0).getPoints();
      // Undeclared exception!
      try { 
        sumOfClusterVariances0.centroidOf(cluster0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}

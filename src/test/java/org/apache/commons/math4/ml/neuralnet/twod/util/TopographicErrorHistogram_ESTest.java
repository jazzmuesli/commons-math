/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 21:16:48 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet.twod.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.apache.commons.math4.ml.neuralnet.Network;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D;
import org.apache.commons.math4.ml.neuralnet.twod.util.TopographicErrorHistogram;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TopographicErrorHistogram_ESTest extends TopographicErrorHistogram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      TopographicErrorHistogram topographicErrorHistogram0 = new TopographicErrorHistogram(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn((-2790), 0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn((-2790), (-2790)).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        topographicErrorHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.TopographicErrorHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      TopographicErrorHistogram topographicErrorHistogram0 = new TopographicErrorHistogram(true, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(2, 2).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1, (-739)).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterator<double[]> iterator0 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      topographicErrorHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      TopographicErrorHistogram topographicErrorHistogram0 = new TopographicErrorHistogram(true, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(1217, 1217).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(795, (-2095)).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterator<double[]> iterator0 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      // Undeclared exception!
      topographicErrorHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      TopographicErrorHistogram topographicErrorHistogram0 = new TopographicErrorHistogram(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      Iterator<Neuron> iterator0 = (Iterator<Neuron>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(1, 0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0, 1222).when(neuronSquareMesh2D0).getNumberOfRows();
      doReturn(iterator0).when(neuronSquareMesh2D0).iterator();
      Iterator<double[]> iterator1 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator1).hasNext();
      doReturn((double[]) null).when(iterator1).next();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator1).when(iterable0).iterator();
      // Undeclared exception!
      try { 
        topographicErrorHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.LocationFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      TopographicErrorHistogram topographicErrorHistogram0 = new TopographicErrorHistogram(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(1, 0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0, 1228).when(neuronSquareMesh2D0).getNumberOfRows();
      Iterator<double[]> iterator0 = (Iterator<double[]>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Iterable<double[]> iterable0 = (Iterable<double[]>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(iterable0).iterator();
      double[][] doubleArray0 = topographicErrorHistogram0.computeImage(neuronSquareMesh2D0, iterable0);
      assertEquals(0, doubleArray0.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:13:55 GMT 2019
 */

package org.apache.commons.math4.ml.neuralnet.twod.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.apache.commons.math4.ml.neuralnet.Network;
import org.apache.commons.math4.ml.neuralnet.Neuron;
import org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D;
import org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnifiedDistanceMatrix_ESTest extends UnifiedDistanceMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      int int0 = 612;
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(612).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      Network network1 = mock(Network.class, new ViolatedAssumptionAnswer());
      int int1 = (-1);
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(612).when(neuronSquareMesh2D1).getNumberOfRows();
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      int int0 = 573;
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      Network network1 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(network1).getNeighbours(any(org.apache.commons.math4.ml.neuralnet.Neuron.class));
      int int1 = 577;
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network1).when(neuronSquareMesh2D1).getNetwork();
      doReturn((Neuron) null).when(neuronSquareMesh2D1).getNeuron(anyInt() , anyInt());
      doReturn(577).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(573).when(neuronSquareMesh2D1).getNumberOfRows();
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(network0).getNeighbours(any(org.apache.commons.math4.ml.neuralnet.Neuron.class));
      int int0 = 1576;
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(network0).when(neuronSquareMesh2D0).getNetwork();
      doReturn((Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn(1576).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1576).when(neuronSquareMesh2D0).getNumberOfRows();
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn(612).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfRows();
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      int int0 = (-3225);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((-3225)).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn((-3225)).when(neuronSquareMesh2D0).getNumberOfRows();
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D0).getNetwork();
      doReturn(2096).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D2 = null;
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage((NeuronSquareMesh2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D0).getNetwork();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D1).getNetwork();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      NeuronSquareMesh2D neuronSquareMesh2D2 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D2).getNetwork();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D3 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D3).getNetwork();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D3);
      NeuronSquareMesh2D neuronSquareMesh2D4 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D4).getNetwork();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D4);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D2);
      NeuronSquareMesh2D neuronSquareMesh2D5 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D5).getNetwork();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D5);
      NeuronSquareMesh2D neuronSquareMesh2D6 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D6).getNetwork();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D6);
      NeuronSquareMesh2D neuronSquareMesh2D7 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D7).getNetwork();
      doReturn(0).when(neuronSquareMesh2D7).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D7).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D7);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D0).getNetwork();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D1).getNetwork();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D2 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D2).getNetwork();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D3 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D3).getNetwork();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D3);
      NeuronSquareMesh2D neuronSquareMesh2D4 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D4).getNetwork();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D4);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D2);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      NeuronSquareMesh2D neuronSquareMesh2D5 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D5).getNetwork();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D5);
      NeuronSquareMesh2D neuronSquareMesh2D6 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D6).getNetwork();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D6);
      NeuronSquareMesh2D neuronSquareMesh2D7 = null;
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage((NeuronSquareMesh2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      Neuron neuron0 = mock(Neuron.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(neuron0).getFeatures();
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(neuron0, (Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt());
      doReturn((Neuron) null, (Neuron) null, (Neuron) null, (Neuron) null, (Neuron) null).when(neuronSquareMesh2D0).getNeuron(anyInt() , anyInt() , any(org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D.HorizontalDirection.class) , any(org.apache.commons.math4.ml.neuralnet.twod.NeuronSquareMesh2D.VerticalDirection.class));
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(1).when(neuronSquareMesh2D0).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D2 = null;
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage((NeuronSquareMesh2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D2 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D2);
      NeuronSquareMesh2D neuronSquareMesh2D3 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D3);
      NeuronSquareMesh2D neuronSquareMesh2D4 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(true, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      NeuronSquareMesh2D neuronSquareMesh2D2 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D2);
      NeuronSquareMesh2D neuronSquareMesh2D3 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D3);
      NeuronSquareMesh2D neuronSquareMesh2D4 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D4);
      NeuronSquareMesh2D neuronSquareMesh2D5 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D5);
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage((NeuronSquareMesh2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      UnifiedDistanceMatrix unifiedDistanceMatrix0 = new UnifiedDistanceMatrix(false, distanceMeasure0);
      NeuronSquareMesh2D neuronSquareMesh2D0 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D0).getNetwork();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D0).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D0);
      NeuronSquareMesh2D neuronSquareMesh2D1 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D1).getNetwork();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D1).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D2 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D2).getNetwork();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D2).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D2);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D1);
      NeuronSquareMesh2D neuronSquareMesh2D3 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D3).getNetwork();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D3).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D3);
      NeuronSquareMesh2D neuronSquareMesh2D4 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D4).getNetwork();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D4).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D5 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D5).getNetwork();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D5).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D5);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D4);
      NeuronSquareMesh2D neuronSquareMesh2D6 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D6).getNetwork();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D6).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D7 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D7).getNetwork();
      doReturn(0).when(neuronSquareMesh2D7).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D7).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D8 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D8).getNetwork();
      doReturn(0).when(neuronSquareMesh2D8).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D8).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D9 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D9).getNetwork();
      doReturn(0).when(neuronSquareMesh2D9).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D9).getNumberOfRows();
      NeuronSquareMesh2D neuronSquareMesh2D10 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D10).getNetwork();
      doReturn(0).when(neuronSquareMesh2D10).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D10).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D10);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D9);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D8);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D7);
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D6);
      NeuronSquareMesh2D neuronSquareMesh2D11 = mock(NeuronSquareMesh2D.class, new ViolatedAssumptionAnswer());
      doReturn((Network) null).when(neuronSquareMesh2D11).getNetwork();
      doReturn(0).when(neuronSquareMesh2D11).getNumberOfColumns();
      doReturn(0).when(neuronSquareMesh2D11).getNumberOfRows();
      unifiedDistanceMatrix0.computeImage(neuronSquareMesh2D11);
      NeuronSquareMesh2D neuronSquareMesh2D12 = null;
      // Undeclared exception!
      try { 
        unifiedDistanceMatrix0.computeImage((NeuronSquareMesh2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.ml.neuralnet.twod.util.UnifiedDistanceMatrix", e);
      }
  }
}

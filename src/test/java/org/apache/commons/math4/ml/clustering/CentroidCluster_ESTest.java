/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:23:13 GMT 2019
 */

package org.apache.commons.math4.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.math4.ml.clustering.CentroidCluster;
import org.apache.commons.math4.ml.clustering.Clusterable;
import org.apache.commons.math4.ml.clustering.DoublePoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CentroidCluster_ESTest extends CentroidCluster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(clusterable0).toString();
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>(clusterable0);
      Clusterable clusterable1 = centroidCluster0.getCenter();
      assertSame(clusterable1, clusterable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CentroidCluster<DoublePoint> centroidCluster0 = new CentroidCluster<DoublePoint>((Clusterable) null);
      Clusterable clusterable0 = centroidCluster0.getCenter();
      assertNull(clusterable0);
  }
}

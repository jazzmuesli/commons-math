/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 11 22:09:24 GMT 2019
 */

package org.apache.commons.math4.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.math4.ml.clustering.Cluster;
import org.apache.commons.math4.ml.clustering.Clusterable;
import org.apache.commons.math4.ml.clustering.DoublePoint;
import org.apache.commons.math4.ml.clustering.FuzzyKMeansClusterer;
import org.apache.commons.math4.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math4.ml.clustering.MultiKMeansPlusPlusClusterer;
import org.apache.commons.math4.ml.distance.DistanceMeasure;
import org.apache.commons.rng.UniformRandomProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Clusterer_ESTest extends Clusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(0, 0, (DistanceMeasure) null);
      DistanceMeasure distanceMeasure0 = kMeansPlusPlusClusterer0.getDistanceMeasure();
      assertNull(distanceMeasure0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(1, 1);
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, (-2681));
      List<? extends Cluster<DoublePoint>> list0 = multiKMeansPlusPlusClusterer0.cluster((Collection<DoublePoint>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(708);
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[3];
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray1).when(clusterable0).getPoint();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.distance(clusterable0, clusterable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(2147483644);
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(clusterable0).getPoint();
      Clusterable clusterable1 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(clusterable1).getPoint();
      // Undeclared exception!
      try { 
        kMeansPlusPlusClusterer0.distance(clusterable0, clusterable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math4.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>(1, 2001);
      MultiKMeansPlusPlusClusterer<DoublePoint> multiKMeansPlusPlusClusterer0 = new MultiKMeansPlusPlusClusterer<DoublePoint>(kMeansPlusPlusClusterer0, 1);
      DistanceMeasure distanceMeasure0 = multiKMeansPlusPlusClusterer0.getDistanceMeasure();
      assertNotNull(distanceMeasure0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KMeansPlusPlusClusterer<DoublePoint> kMeansPlusPlusClusterer0 = new KMeansPlusPlusClusterer<DoublePoint>((-2147483643));
      double[] doubleArray0 = new double[6];
      Clusterable clusterable0 = mock(Clusterable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0).when(clusterable0).getPoint();
      double double0 = kMeansPlusPlusClusterer0.distance(clusterable0, clusterable0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DistanceMeasure distanceMeasure0 = mock(DistanceMeasure.class, new ViolatedAssumptionAnswer());
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-1), Double.POSITIVE_INFINITY, (-1), distanceMeasure0, 1.7976931348623157E308, (UniformRandomProvider) null);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster((Collection<DoublePoint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math4.util.MathUtils", e);
      }
  }
}
